{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Aprenda sobre a BD A miss\u00e3o da Base dos Dados \u00e9 universalizar o uso de dados de qualidade no Brasil. Para isso, criamos uma ferramenta que te permite acessar recursos importantes de diversos conjuntos de dados p\u00fablicos , como: Tabelas tratadas BD+ : Tabelas completas, j\u00e1 tratadas e prontas para an\u00e1lise, dispon\u00edveis no nosso datalake p\u00fablico. Dados originais : Links com informa\u00e7\u00f5es \u00fateis para explorar mais sobre o conjunto de dados, como a fonte original e outros. Temos um time de Dados e volunt\u00e1rios(as) de todo o Brasil que ajudam a limpar e manter as tabelas tratadas BD+. Saiba como fazer parte Acessando tabelas tratadas BD+ No nosso site voc\u00ea encontra a lista de todas as tabelas tratadas de cada conjunto de dados. Apresentamos tamb\u00e9m informa\u00e7\u00f5es importantes de todas as tabelas, como a lista de colunas, cobertura temporal, periodicidade, entre outras informa\u00e7\u00f5es. Voc\u00ea pode consultar os dados das tabelas via: Download Voc\u00ea pode baixar o arquivo CSV completo da tabela direto no site. Este tipo de Consulta n\u00e3o est\u00e1 dispon\u00edvel para arquivos que ultrapassem 200 mil linhas. BigQuery (SQL) O BigQuery \u00e9 o um servi\u00e7o de banco de dados em nuvem da Google. Direto do navegador, voc\u00ea pode fazer consultas \u00e0s tabelas tratadas com: Rapidez: Mesmo queries muito longas demoram apenas minutos para serem processadas. Escala: O BigQuery escala magicamente para hexabytes se necess\u00e1rio. Economia: Todo usu\u00e1rio possui 1 TB gratuito por m\u00eas para consulta aos dados . Aprenda Pacotes Os pacotes da Base dos Dados permitem o acesso ao datalake p\u00fablico direto do seu computador ou ambiente de desenvolvimento. Outra forma de acessar os recursos da BD \u00e9 diretamente pelos endpoints, conforme documentado em BD Open API . Os pacotes atualmente dispon\u00edveis s\u00e3o: Python R Stata Aprenda Dicas para melhor uso dos dados Nosso time de dados trabalha constantemente em desenvolver melhores padr\u00f5es e metodologias para facilitar o processo de an\u00e1lise de dados. Separamos alguns materiais \u00fateis para voc\u00ea entender melhor o que fazemos e como tirar o melhor proveito dos dados: Cruzar dados de diferentes organiza\u00e7\u00f5es de forma r\u00e1pida Entender padr\u00f5es de tabelas, conjuntos e vari\u00e1veis","title":"Aprenda sobre a BD"},{"location":"#aprenda-sobre-a-bd","text":"A miss\u00e3o da Base dos Dados \u00e9 universalizar o uso de dados de qualidade no Brasil. Para isso, criamos uma ferramenta que te permite acessar recursos importantes de diversos conjuntos de dados p\u00fablicos , como: Tabelas tratadas BD+ : Tabelas completas, j\u00e1 tratadas e prontas para an\u00e1lise, dispon\u00edveis no nosso datalake p\u00fablico. Dados originais : Links com informa\u00e7\u00f5es \u00fateis para explorar mais sobre o conjunto de dados, como a fonte original e outros. Temos um time de Dados e volunt\u00e1rios(as) de todo o Brasil que ajudam a limpar e manter as tabelas tratadas BD+. Saiba como fazer parte","title":"Aprenda sobre a BD"},{"location":"#acessando-tabelas-tratadas-bd","text":"No nosso site voc\u00ea encontra a lista de todas as tabelas tratadas de cada conjunto de dados. Apresentamos tamb\u00e9m informa\u00e7\u00f5es importantes de todas as tabelas, como a lista de colunas, cobertura temporal, periodicidade, entre outras informa\u00e7\u00f5es. Voc\u00ea pode consultar os dados das tabelas via:","title":"Acessando tabelas tratadas BD+"},{"location":"#download","text":"Voc\u00ea pode baixar o arquivo CSV completo da tabela direto no site. Este tipo de Consulta n\u00e3o est\u00e1 dispon\u00edvel para arquivos que ultrapassem 200 mil linhas.","title":"Download"},{"location":"#bigquery-sql","text":"O BigQuery \u00e9 o um servi\u00e7o de banco de dados em nuvem da Google. Direto do navegador, voc\u00ea pode fazer consultas \u00e0s tabelas tratadas com: Rapidez: Mesmo queries muito longas demoram apenas minutos para serem processadas. Escala: O BigQuery escala magicamente para hexabytes se necess\u00e1rio. Economia: Todo usu\u00e1rio possui 1 TB gratuito por m\u00eas para consulta aos dados . Aprenda","title":"BigQuery (SQL)"},{"location":"#pacotes","text":"Os pacotes da Base dos Dados permitem o acesso ao datalake p\u00fablico direto do seu computador ou ambiente de desenvolvimento. Outra forma de acessar os recursos da BD \u00e9 diretamente pelos endpoints, conforme documentado em BD Open API . Os pacotes atualmente dispon\u00edveis s\u00e3o: Python R Stata Aprenda","title":"Pacotes"},{"location":"#dicas-para-melhor-uso-dos-dados","text":"Nosso time de dados trabalha constantemente em desenvolver melhores padr\u00f5es e metodologias para facilitar o processo de an\u00e1lise de dados. Separamos alguns materiais \u00fateis para voc\u00ea entender melhor o que fazemos e como tirar o melhor proveito dos dados: Cruzar dados de diferentes organiza\u00e7\u00f5es de forma r\u00e1pida Entender padr\u00f5es de tabelas, conjuntos e vari\u00e1veis","title":"Dicas para melhor uso dos dados"},{"location":"access_data_bq/","text":"BigQuery O BigQuery \u00e9 o um servi\u00e7o de banco de dados em nuvem da Google. Voc\u00ea faz consultas ao banco em SQL direto do navegador com: Rapidez : Mesmo queries muito longas demoram apenas minutos para serem processadas. Escala : O BigQuery escala magicamente para hexabytes se necess\u00e1rio. Economia : Todo usu\u00e1rio possui 1 TB gratuito por m\u00eas para consulta aos dados . Pronto(a) para come\u00e7ar? Nesta p\u00e1gina voc\u00ea encontra: Primeiros passos Entenda o uso gratuito do Big Query BQ Tutoriais Manuais e Cursos de SQL Primeiros passos Antes de come\u00e7ar: Crie o seu projeto no Google Cloud Para criar um projeto no Google Cloud basta ter um email cadastrado no Google. \u00c9 necess\u00e1rio ter um projeto seu, mesmo que vazio, para voc\u00ea fazer queries em nosso datalake p\u00fablico. Acesse o Google Cloud . Caso for a sua primeira vez, aceite o Termo de Servi\u00e7os. Clique em Create Project/Criar Projeto . Escolha um nome bacana para o projeto. Clique em Create/Criar Por que eu preciso criar um projeto no Google Cloud? A Google fornece 1 TB gratuito por m\u00eas de uso do BigQuery para cada projeto que voc\u00ea possui. Um projeto \u00e9 necess\u00e1rio para ativar os servi\u00e7os do Google Cloud, incluindo a permiss\u00e3o de uso do BigQuery. Pense no projeto como a \"conta\" na qual a Google vai contabilizar o quanto de processamento voc\u00ea j\u00e1 utilizou. N\u00e3o \u00e9 necess\u00e1rio adicionar nenhum cart\u00e3o ou forma de pagamento - O BigQuery inicia automaticamente no modo Sandbox, que permite voc\u00ea utilizar seus recursos sem adicionar um modo de pagamento. Leia mais aqui . Acessando o datalake da basedosdados O bot\u00e3o abaixo via te direcionar ao nosso projeto no Google BigQuery: Ir para BigQuery Agora voc\u00ea precisa fixar o projeto da BD no seu BigQuery, \u00e9 bem simples, veja: Dentro do projeto existem dois n\u00edveis de organiza\u00e7\u00e3o dos dados, datasets (conjuntos de dados) e tables (tabelas), nos quais: Todas as tabelas est\u00e3o organizadas dentro de cojuntos de dados , que representaam sua organiza\u00e7\u00e3o/tema (ex: o conjunto br_ibge_populacao cont\u00e9m uma tabela municipio com a s\u00e9rie hist\u00f3rica de popula\u00e7\u00e3o a n\u00edvel municipal) Cada tabela pertence a um \u00fanico conjunto de dados (ex: a tabela municipio em br_ibge_populacao \u00e9 diferente de municipio em br_bd_diretorios ) Veja aqui o guia do Google de como funciona a interface do BigQuery . Caso n\u00e3o apare\u00e7am as tabelas na 1\u00aa vez que voc\u00ea acessar, atualize a p\u00e1gina. Fa\u00e7a sua primeira consulta! Que tal fazer uma consulta simples? Vamos usar o Editor de Consultas do BigQuery para ver as informa\u00e7\u00f5es sobre munic\u00edpios direto na nossa base de diret\u00f3rios brasileiros. Para isso, copiar e colar o c\u00f3digo abaixo: SELECT * FROM ` basedosdados . br_bd_diretorios_brasil . municipio ` S\u00f3 clicar em Executar e pronto! Dica Clicando no bot\u00e3o \ud83d\udd0d Consultar tabela/Query View , o BigQuery cria automaticamente a estrutura b\u00e1sica da sua query em Query Editor/Editor de consultas - basta voc\u00ea completar com os campos e filtros que achar necess\u00e1rios. Entenda o uso gratuito do Big Query BQ Est\u00e1 se\u00e7\u00e3o \u00e9 dedicada a apresentar dicas de como reduzir custos de processamento para aproveitar ao m\u00e1ximo os dados da BD! Para usu\u00e1rios que acessam os dados em projetos p\u00fablicos como o da Base dos Dados o \u00fanico tipo de custo associado se refere ao custo de processamento das consultas . A not\u00edcia boa, como mencionado acima, \u00e9 que todo usu\u00e1rio possui 1 TB gratuito por m\u00eas para consultar livremente os dados do maior data lake p\u00fablico do Brasil . Se voc\u00ea ainda n\u00e3o possui um projeto no BQ consulte a sess\u00e3o acima para cri\u00e1-lo. Conhecer o b\u00e1sico da interface do BQ \u00e9 importante para o entendimento do artigo. Caso voc\u00ea n\u00e3o tenha familiariadade ou queria revisitar a interface, sugerimos 3 trilhas: Nosso guia utilizando as tabelas da RAIS - Rela\u00e7\u00e3o Anual de Informa\u00e7\u00f5es Sociais Nosso acervo de v\u00eddeos no youtube A introdu\u00e7\u00e3o a interface feita pelo Google Veja como usufruir ao m\u00e1ximo das consultas gratuitas Nesta se\u00e7\u00e3o, apresentamos algumas dicas simples para reduzir os custos das consultas no Big Query e aproveitar ao m\u00e1ximo os dados da BD! Antes de partir para os exemplos, apresentaremos o mecanismo b\u00e1sico de previs\u00e3o de custos de processamento de consultas no Big Query (BQ). Estimativas de custos No canto superior direito da interface do BQ \u00e9 informado um aviso com estimativa do custo de processamento que ser\u00e1 cobrado do seu projeto apos a execu\u00e7\u00e3o da consulta. Este \u00e9 o mecanismo b\u00e1sico e prontamente acess\u00edvel de previsibilidade dos custos de processamento. Infelizmente, n\u00e3o funciona para todas as tabelas. Por motivos de limita\u00e7\u00e3o interna do pr\u00f3prio Big Query, consultas \u00e0 tabelas espec\u00edficas n\u00e3o exibem estimativas de custos. \u00c9 o caso das tabelas que possuem Row Access Policy . Isto \u00e9, tabelas onde o n\u00famero de linhas acess\u00edveis \u00e9 limitada a depender do usu\u00e1rio. Este \u00e9 o caso das tabelas que fazem parte do servi\u00e7o BDpro Exemplo da tabela agencia do conjunto br_bcb_estban . { width=100% } DICA 1: Selecione somente as colunas de interesse A arquitetura do Big Query utiliza o armazenamento orientado a colunas, isto \u00e9, cada coluna \u00e9 armazenada separadamente. Esta caracter\u00edstica tem uma implica\u00e7\u00e3o clara quanto aos custos de processamento: quanto mais colunas forem selecionadas, maior ser\u00e1 o custo. Evite : Selecionar colunas em excesso SELECT * Pr\u00e1tica recomendada : selecione somente as colunas de interesse para reduzir o custo final da consulta. SELECT coluna1 , coluna2 - Veja este a diferen\u00e7a obtida com a tabela microdados do conjunto br_ms_sim . Sem sele\u00e7\u00e3o de colunas: custo estimado 5.83 GB Selecionando 3 colunas: custo estimado 0.531 GB (531 MB) SELECT sequencial_obito , tipo_obito , data_obito FROM ` basedosdados . br_ms_sim . microdados ` Para entender mais a fundo a arquitetura colunar, consulte a documenta\u00e7\u00e3o oficial do Big Query DICA 2: Utilize colunas particionadas e clusterizadas para filtrar os dados As parti\u00e7\u00f5es s\u00e3o divis\u00f5es feitas em uma tabela para facilitar o gerenciamento e a consulta dos dados. No momento de execu\u00e7\u00e3o da consulta, o Big Query ignora linhas que possuem um valor da parti\u00e7\u00e3o diferente do utilizado no filtro. Isto normalmente reduz significativamente a quantidade de linhas lidas e, o que nos interessa, reduz o custo de processamento . Clusters s\u00e3o agrupamentos organizados em uma tabela com base nos valores de uma ou mais colunas especificadas. Durante a execu\u00e7\u00e3o de uma consulta, o BigQuery otimiza a leitura dos dados, acessando apenas os segmentos que cont\u00eam os valores relevantes das colunas de cluster. Isso significa que, ao inv\u00e9s de escanear toda a tabela, apenas as partes necess\u00e1rias s\u00e3o lidas, o que geralmente reduz a quantidade de dados processados e, consequentemente, reduz o custo de processamento. Como saber qual coluna foi utilizada para particionar e clusterizar uma tabela espec\u00edfica? Pelos metadados na p\u00e1gina de tabela no site da BD Note que o campo Parti\u00e7\u00f5es no Big Query elenca tanto as parti\u00e7\u00f5es quanto os clusters. Pelos metadados na p\u00e1gina de 'Detalhes' no Big Query Note que s\u00e3o elencadas ambas informa\u00e7\u00f5es: parti\u00e7\u00f5es e clusters . Neste caso, a coluna ano foi definida como parti\u00e7\u00e3o e a coluna sigla_uf como cluster. Pr\u00e1tica recomendada : sempre que poss\u00edvel, utilize colunas particionadas e clusterizadas para filtrar/agregar os dados. Exemplo Consulta utilizado a coluna particionada como filtro: SELECT sequencial_obito , tipo_obito , data_obito FROM ` basedosdados . br_ms_sim . microdados ` where ano = 2015 custo estimado : 31.32 MB. A combina\u00e7\u00e3o de t\u00e9cnicas de sele\u00e7\u00e3o de colunas e filtro utilizando parti\u00e7\u00e3o reduziu o custo estimado da consulta inicial de 5.83 GB para somente 31.32 MB DICA 3: Muita aten\u00e7\u00e3o ao realizar joins entre tabelas Avalie a real necessidade do JOIN Certifique-se de que o join \u00e9 realmente necess\u00e1rio para a an\u00e1lise que voc\u00ea est\u00e1 realizando. \u00c0s vezes, opera\u00e7\u00f5es alternativas como subconsultas ou agrega\u00e7\u00f5es podem ser mais eficientes. Entenda a L\u00f3gica do JOIN Diferentes tipos de joins (INNER, LEFT, RIGHT, FULL) t\u00eam diferentes implica\u00e7\u00f5es de desempenho e resultado. Gastar um tempinho entendo a melhor op\u00e7\u00e3o para seu objetivo de an\u00e1lise pode ajudar a ter um controle de custos mais eficiente. Um dos problemas mais comuns \u00e9 a multiplica\u00e7\u00e3o de linhas indesejadas no resultado final. Para entender a fundo boas pr\u00e1ticas e problemas recorrentes com joins sugerimos os guias SQL Joins na pr\u00e1tica e Maximizando a Efici\u00eancia com JOIN em Consultas SQL para Combinar Tabelas Utilize as dicas anteriores Selecione somente colunas de interesse Fa\u00e7a uso das colunas particionadas para filtrar os dados Atente-se a estimativa de custos antes de executar a consulta Tutoriais Como navegar pelo BigQuery Para entender mais sobre a interface do BigQuery e como explorar os dados, preparamos um texto completo no blog com um exemplo de busca dos dados da RAIS - Minist\u00e9rio da Economia . Cansado(a) da leitura? Temos tamb\u00e9m um v\u00eddeo completo no nosso Youtube . Entenda os dados O BigQuery possui um mecanismo de busca que permite buscar por nomes de datasets (conjuntos), tables (tabelas) ou labels (grupos). Constru\u00edmos regras de nomea\u00e7\u00e3o simples e pr\u00e1ticas para facilitar sua busca - veja mais . Entenda o uso gratuito do Big Query (BQ) Conectando com o PowerBI O Power BI \u00e9 uma das tecnologias mais populares para o desenvolvimento de dashboards com dados relacionais. Por isso, preparamos um tutorial para voc\u00ea descobrir como usar os dados do datalake no desenvolvimento dos seus dashboards . Manuais e Cursos de SQL Est\u00e1 come\u00e7ando a aprender sobre SQL para fazer suas consultas? Abaixo colocamos algumas recomenda\u00e7\u00f5es usadas pela nossa equipe tanto no aprendizado quanto no dia-a-dia: Lista de fun\u00e7\u00f5es em SQL da W3 Curso SQL na Codeacademy Curso de SQL do Programa\u00e7\u00e3o Din\u00e2mica","title":"BigQuery"},{"location":"access_data_bq/#bigquery","text":"O BigQuery \u00e9 o um servi\u00e7o de banco de dados em nuvem da Google. Voc\u00ea faz consultas ao banco em SQL direto do navegador com: Rapidez : Mesmo queries muito longas demoram apenas minutos para serem processadas. Escala : O BigQuery escala magicamente para hexabytes se necess\u00e1rio. Economia : Todo usu\u00e1rio possui 1 TB gratuito por m\u00eas para consulta aos dados . Pronto(a) para come\u00e7ar? Nesta p\u00e1gina voc\u00ea encontra: Primeiros passos Entenda o uso gratuito do Big Query BQ Tutoriais Manuais e Cursos de SQL","title":"BigQuery"},{"location":"access_data_bq/#primeiros-passos","text":"","title":"Primeiros passos"},{"location":"access_data_bq/#antes-de-comecar-crie-o-seu-projeto-no-google-cloud","text":"Para criar um projeto no Google Cloud basta ter um email cadastrado no Google. \u00c9 necess\u00e1rio ter um projeto seu, mesmo que vazio, para voc\u00ea fazer queries em nosso datalake p\u00fablico. Acesse o Google Cloud . Caso for a sua primeira vez, aceite o Termo de Servi\u00e7os. Clique em Create Project/Criar Projeto . Escolha um nome bacana para o projeto. Clique em Create/Criar Por que eu preciso criar um projeto no Google Cloud? A Google fornece 1 TB gratuito por m\u00eas de uso do BigQuery para cada projeto que voc\u00ea possui. Um projeto \u00e9 necess\u00e1rio para ativar os servi\u00e7os do Google Cloud, incluindo a permiss\u00e3o de uso do BigQuery. Pense no projeto como a \"conta\" na qual a Google vai contabilizar o quanto de processamento voc\u00ea j\u00e1 utilizou. N\u00e3o \u00e9 necess\u00e1rio adicionar nenhum cart\u00e3o ou forma de pagamento - O BigQuery inicia automaticamente no modo Sandbox, que permite voc\u00ea utilizar seus recursos sem adicionar um modo de pagamento. Leia mais aqui .","title":"Antes de come\u00e7ar: Crie o seu projeto no Google Cloud"},{"location":"access_data_bq/#acessando-o-datalake-da-basedosdados","text":"O bot\u00e3o abaixo via te direcionar ao nosso projeto no Google BigQuery: Ir para BigQuery Agora voc\u00ea precisa fixar o projeto da BD no seu BigQuery, \u00e9 bem simples, veja: Dentro do projeto existem dois n\u00edveis de organiza\u00e7\u00e3o dos dados, datasets (conjuntos de dados) e tables (tabelas), nos quais: Todas as tabelas est\u00e3o organizadas dentro de cojuntos de dados , que representaam sua organiza\u00e7\u00e3o/tema (ex: o conjunto br_ibge_populacao cont\u00e9m uma tabela municipio com a s\u00e9rie hist\u00f3rica de popula\u00e7\u00e3o a n\u00edvel municipal) Cada tabela pertence a um \u00fanico conjunto de dados (ex: a tabela municipio em br_ibge_populacao \u00e9 diferente de municipio em br_bd_diretorios ) Veja aqui o guia do Google de como funciona a interface do BigQuery . Caso n\u00e3o apare\u00e7am as tabelas na 1\u00aa vez que voc\u00ea acessar, atualize a p\u00e1gina.","title":"Acessando o datalake da basedosdados"},{"location":"access_data_bq/#faca-sua-primeira-consulta","text":"Que tal fazer uma consulta simples? Vamos usar o Editor de Consultas do BigQuery para ver as informa\u00e7\u00f5es sobre munic\u00edpios direto na nossa base de diret\u00f3rios brasileiros. Para isso, copiar e colar o c\u00f3digo abaixo: SELECT * FROM ` basedosdados . br_bd_diretorios_brasil . municipio ` S\u00f3 clicar em Executar e pronto! Dica Clicando no bot\u00e3o \ud83d\udd0d Consultar tabela/Query View , o BigQuery cria automaticamente a estrutura b\u00e1sica da sua query em Query Editor/Editor de consultas - basta voc\u00ea completar com os campos e filtros que achar necess\u00e1rios.","title":"Fa\u00e7a sua primeira consulta!"},{"location":"access_data_bq/#entenda-o-uso-gratuito-do-big-query-bq","text":"Est\u00e1 se\u00e7\u00e3o \u00e9 dedicada a apresentar dicas de como reduzir custos de processamento para aproveitar ao m\u00e1ximo os dados da BD! Para usu\u00e1rios que acessam os dados em projetos p\u00fablicos como o da Base dos Dados o \u00fanico tipo de custo associado se refere ao custo de processamento das consultas . A not\u00edcia boa, como mencionado acima, \u00e9 que todo usu\u00e1rio possui 1 TB gratuito por m\u00eas para consultar livremente os dados do maior data lake p\u00fablico do Brasil . Se voc\u00ea ainda n\u00e3o possui um projeto no BQ consulte a sess\u00e3o acima para cri\u00e1-lo. Conhecer o b\u00e1sico da interface do BQ \u00e9 importante para o entendimento do artigo. Caso voc\u00ea n\u00e3o tenha familiariadade ou queria revisitar a interface, sugerimos 3 trilhas: Nosso guia utilizando as tabelas da RAIS - Rela\u00e7\u00e3o Anual de Informa\u00e7\u00f5es Sociais Nosso acervo de v\u00eddeos no youtube A introdu\u00e7\u00e3o a interface feita pelo Google","title":"Entenda o uso gratuito do Big Query BQ"},{"location":"access_data_bq/#veja-como-usufruir-ao-maximo-das-consultas-gratuitas","text":"Nesta se\u00e7\u00e3o, apresentamos algumas dicas simples para reduzir os custos das consultas no Big Query e aproveitar ao m\u00e1ximo os dados da BD! Antes de partir para os exemplos, apresentaremos o mecanismo b\u00e1sico de previs\u00e3o de custos de processamento de consultas no Big Query (BQ). Estimativas de custos No canto superior direito da interface do BQ \u00e9 informado um aviso com estimativa do custo de processamento que ser\u00e1 cobrado do seu projeto apos a execu\u00e7\u00e3o da consulta. Este \u00e9 o mecanismo b\u00e1sico e prontamente acess\u00edvel de previsibilidade dos custos de processamento. Infelizmente, n\u00e3o funciona para todas as tabelas. Por motivos de limita\u00e7\u00e3o interna do pr\u00f3prio Big Query, consultas \u00e0 tabelas espec\u00edficas n\u00e3o exibem estimativas de custos. \u00c9 o caso das tabelas que possuem Row Access Policy . Isto \u00e9, tabelas onde o n\u00famero de linhas acess\u00edveis \u00e9 limitada a depender do usu\u00e1rio. Este \u00e9 o caso das tabelas que fazem parte do servi\u00e7o BDpro Exemplo da tabela agencia do conjunto br_bcb_estban . { width=100% }","title":"Veja como usufruir ao m\u00e1ximo das consultas gratuitas"},{"location":"access_data_bq/#dica-1-selecione-somente-as-colunas-de-interesse","text":"A arquitetura do Big Query utiliza o armazenamento orientado a colunas, isto \u00e9, cada coluna \u00e9 armazenada separadamente. Esta caracter\u00edstica tem uma implica\u00e7\u00e3o clara quanto aos custos de processamento: quanto mais colunas forem selecionadas, maior ser\u00e1 o custo. Evite : Selecionar colunas em excesso SELECT * Pr\u00e1tica recomendada : selecione somente as colunas de interesse para reduzir o custo final da consulta. SELECT coluna1 , coluna2 - Veja este a diferen\u00e7a obtida com a tabela microdados do conjunto br_ms_sim . Sem sele\u00e7\u00e3o de colunas: custo estimado 5.83 GB Selecionando 3 colunas: custo estimado 0.531 GB (531 MB) SELECT sequencial_obito , tipo_obito , data_obito FROM ` basedosdados . br_ms_sim . microdados ` Para entender mais a fundo a arquitetura colunar, consulte a documenta\u00e7\u00e3o oficial do Big Query","title":"DICA 1: Selecione somente as colunas de interesse"},{"location":"access_data_bq/#dica-2-utilize-colunas-particionadas-e-clusterizadas-para-filtrar-os-dados","text":"As parti\u00e7\u00f5es s\u00e3o divis\u00f5es feitas em uma tabela para facilitar o gerenciamento e a consulta dos dados. No momento de execu\u00e7\u00e3o da consulta, o Big Query ignora linhas que possuem um valor da parti\u00e7\u00e3o diferente do utilizado no filtro. Isto normalmente reduz significativamente a quantidade de linhas lidas e, o que nos interessa, reduz o custo de processamento . Clusters s\u00e3o agrupamentos organizados em uma tabela com base nos valores de uma ou mais colunas especificadas. Durante a execu\u00e7\u00e3o de uma consulta, o BigQuery otimiza a leitura dos dados, acessando apenas os segmentos que cont\u00eam os valores relevantes das colunas de cluster. Isso significa que, ao inv\u00e9s de escanear toda a tabela, apenas as partes necess\u00e1rias s\u00e3o lidas, o que geralmente reduz a quantidade de dados processados e, consequentemente, reduz o custo de processamento. Como saber qual coluna foi utilizada para particionar e clusterizar uma tabela espec\u00edfica? Pelos metadados na p\u00e1gina de tabela no site da BD Note que o campo Parti\u00e7\u00f5es no Big Query elenca tanto as parti\u00e7\u00f5es quanto os clusters. Pelos metadados na p\u00e1gina de 'Detalhes' no Big Query Note que s\u00e3o elencadas ambas informa\u00e7\u00f5es: parti\u00e7\u00f5es e clusters . Neste caso, a coluna ano foi definida como parti\u00e7\u00e3o e a coluna sigla_uf como cluster. Pr\u00e1tica recomendada : sempre que poss\u00edvel, utilize colunas particionadas e clusterizadas para filtrar/agregar os dados. Exemplo Consulta utilizado a coluna particionada como filtro: SELECT sequencial_obito , tipo_obito , data_obito FROM ` basedosdados . br_ms_sim . microdados ` where ano = 2015 custo estimado : 31.32 MB. A combina\u00e7\u00e3o de t\u00e9cnicas de sele\u00e7\u00e3o de colunas e filtro utilizando parti\u00e7\u00e3o reduziu o custo estimado da consulta inicial de 5.83 GB para somente 31.32 MB","title":"DICA 2: Utilize colunas particionadas e clusterizadas para filtrar os dados"},{"location":"access_data_bq/#dica-3-muita-atencao-ao-realizar-joins-entre-tabelas","text":"Avalie a real necessidade do JOIN Certifique-se de que o join \u00e9 realmente necess\u00e1rio para a an\u00e1lise que voc\u00ea est\u00e1 realizando. \u00c0s vezes, opera\u00e7\u00f5es alternativas como subconsultas ou agrega\u00e7\u00f5es podem ser mais eficientes. Entenda a L\u00f3gica do JOIN Diferentes tipos de joins (INNER, LEFT, RIGHT, FULL) t\u00eam diferentes implica\u00e7\u00f5es de desempenho e resultado. Gastar um tempinho entendo a melhor op\u00e7\u00e3o para seu objetivo de an\u00e1lise pode ajudar a ter um controle de custos mais eficiente. Um dos problemas mais comuns \u00e9 a multiplica\u00e7\u00e3o de linhas indesejadas no resultado final. Para entender a fundo boas pr\u00e1ticas e problemas recorrentes com joins sugerimos os guias SQL Joins na pr\u00e1tica e Maximizando a Efici\u00eancia com JOIN em Consultas SQL para Combinar Tabelas Utilize as dicas anteriores Selecione somente colunas de interesse Fa\u00e7a uso das colunas particionadas para filtrar os dados Atente-se a estimativa de custos antes de executar a consulta","title":"DICA 3: Muita aten\u00e7\u00e3o ao realizar joins entre tabelas"},{"location":"access_data_bq/#tutoriais","text":"","title":"Tutoriais"},{"location":"access_data_bq/#como-navegar-pelo-bigquery","text":"Para entender mais sobre a interface do BigQuery e como explorar os dados, preparamos um texto completo no blog com um exemplo de busca dos dados da RAIS - Minist\u00e9rio da Economia . Cansado(a) da leitura? Temos tamb\u00e9m um v\u00eddeo completo no nosso Youtube .","title":"Como navegar pelo BigQuery"},{"location":"access_data_bq/#entenda-os-dados","text":"O BigQuery possui um mecanismo de busca que permite buscar por nomes de datasets (conjuntos), tables (tabelas) ou labels (grupos). Constru\u00edmos regras de nomea\u00e7\u00e3o simples e pr\u00e1ticas para facilitar sua busca - veja mais .","title":"Entenda os dados"},{"location":"access_data_bq/#entenda-o-uso-gratuito-do-big-query-bq_1","text":"","title":"Entenda o uso gratuito do Big Query (BQ)"},{"location":"access_data_bq/#conectando-com-o-powerbi","text":"O Power BI \u00e9 uma das tecnologias mais populares para o desenvolvimento de dashboards com dados relacionais. Por isso, preparamos um tutorial para voc\u00ea descobrir como usar os dados do datalake no desenvolvimento dos seus dashboards .","title":"Conectando com o PowerBI"},{"location":"access_data_bq/#manuais-e-cursos-de-sql","text":"Est\u00e1 come\u00e7ando a aprender sobre SQL para fazer suas consultas? Abaixo colocamos algumas recomenda\u00e7\u00f5es usadas pela nossa equipe tanto no aprendizado quanto no dia-a-dia: Lista de fun\u00e7\u00f5es em SQL da W3 Curso SQL na Codeacademy Curso de SQL do Programa\u00e7\u00e3o Din\u00e2mica","title":"Manuais e Cursos de SQL"},{"location":"access_data_packages/","text":"Pacotes Os pacotes da Base dos Dados permitem o acesso ao datalake p\u00fablico direto do seu computador ou ambiente de desenvolvimento. Atualmente dispon\u00edveis em: Python R Stata CLI (terminal) Pronto(a) para come\u00e7ar? Nesta p\u00e1gina voc\u00ea encontra: Primeiros passos Tutoriais Manuais de refer\u00eancia Primeiros passos Antes de come\u00e7ar: Crie o seu projeto no Google Cloud Para criar um projeto no Google Cloud basta ter um email cadastrado no Google. \u00c9 necess\u00e1rio ter um projeto seu, mesmo que vazio, para voc\u00ea fazer queries em nosso datalake p\u00fablico. Acesse o Google Cloud . Caso for a sua primeira vez, aceite o Termo de Servi\u00e7os. Clique em Create Project/Criar Projeto . Escolha um nome bacana para o projeto. Clique em Create/Criar Por que eu preciso criar um projeto no Google Cloud? A Google fornece 1 TB gratuito por m\u00eas de uso do BigQuery para cada projeto que voc\u00ea possui. Um projeto \u00e9 necess\u00e1rio para ativar os servi\u00e7os do Google Cloud, incluindo a permiss\u00e3o de uso do BigQuery. Pense no projeto como a \"conta\" na qual a Google vai contabilizar o quanto de processamento voc\u00ea j\u00e1 utilizou. N\u00e3o \u00e9 necess\u00e1rio adicionar nenhum cart\u00e3o ou forma de pagamento - O BigQuery inicia automaticamente no modo Sandbox, que permite voc\u00ea utilizar seus recursos sem adicionar um modo de pagamento. Leia mais aqui . Instalando o pacote Para instala\u00e7\u00e3o do pacote em Python e linha de comando, voc\u00ea pode usar o pip direto do seu terminal. Em R, basta instalar diretamente no RStudio ou editor de sua prefer\u00eancia. Python/CLI pip install basedosdados R install.packages ( \"basedosdados\" ) Stata Requerimentos: Garantir que seu Stata seja a vers\u00e3o 16+ Garantir que o Python esteja instalado no seu computador. Com os requerimentos satisfeitos, rodar os comandos abaixo: net install basedosdados, from( \"https://raw.githubusercontent.com/basedosdados/mais/master/stata-package\" ) Configurando o pacote Uma vez com seu projeto, voc\u00ea precisa configurar o pacote para usar o ID desse projeto nas consultas ao datalake . Para isso, voc\u00ea deve usar o project_id que a Google fornece para voc\u00ea assim que o projeto \u00e9 criado. Python/CLI N\u00e3o \u00e9 necess\u00e1rio configurar o projeto de antem\u00e3o. Assim que voc\u00ea roda a 1\u00aa consulta, o pacote ir\u00e1 indicar os passos para configura\u00e7\u00e3o. R Uma vez com o project_id , voc\u00ea deve passar essa informa\u00e7\u00e3o para o pacote usando a fun\u00e7\u00e3o set_billing_id . set_billing_id ( \"<YOUR_PROJECT_ID>\" ) Stata \u00c9 necess\u00e1rio especificar o project_id a cada vez que usar o pacote. Fa\u00e7a sua primeira consulta Um exemplo simples para come\u00e7ar a explorar o datalake \u00e9 puxar informa\u00e7\u00f5es cadastrais de munic\u00edpios direto na nossa base de Diret\u00f3rios Brasileiros (tabela municipio ) . Para isso, vamos usar a fun\u00e7\u00e3o download , baixando os dados direto para nossa m\u00e1quina. Python import basedosdados as bd bd . download ( savepath = \"<PATH>\" , dataset_id = \"br-bd-diretorios-brasil\" , table_id = \"municipio\" ) Para entender mais sobre a fun\u00e7\u00e3o download , leia o manual de refer\u00eancia . R library ( \"basedosdados\" ) query <- \"SELECT * FROM `basedosdados.br_bd_diretorios_brasil.municipio`\" dir <- tempdir () data <- download ( query , \"<PATH>\" ) Para entender mais sobre a fun\u00e7\u00e3o download , leia o manual de refer\u00eancia . Stata bd_read_sql, /// path( \"<PATH>\" ) /// query ( \"SELECT * FROM `basedosdados.br_bd_diretorios_brasil.municipio`\") /// billing_project_id(\"<PROJECT_ID>\") CLI basedosdados download \"where/to/save/file\" \\ --billing_project_id <YOUR_PROJECT_ID> \\ --query 'SELECT * FROM `basedosdados.br_bd_diretorios_brasil.municipio`' Para entender mais sobre a fun\u00e7\u00e3o download , leia o manual de refer\u00eancia . Tutoriais Como usar os pacotes Preparamos tutoriais apresentando as principais fun\u00e7\u00f5es de cada pacote para voc\u00ea come\u00e7ar a us\u00e1-los. Python Blog: Introdu\u00e7\u00e3o ao pacote Python Introdu\u00e7\u00e3o ao pacote Python (cont.) V\u00eddeos: Workshop: Aplica\u00e7\u00f5es em Python R Blog: Introdu\u00e7\u00e3o ao pacote R Explorando o Censo Escolar An\u00e1lise: O Brasil nas Olimp\u00edadas V\u00eddeos: Workshop: Aprenda a acessar dados p\u00fablicos em R Stata Documenta\u00e7\u00e3o: GitHub Manuais de refer\u00eancia (API) Python R Stata CLI","title":"Pacotes"},{"location":"access_data_packages/#pacotes","text":"Os pacotes da Base dos Dados permitem o acesso ao datalake p\u00fablico direto do seu computador ou ambiente de desenvolvimento. Atualmente dispon\u00edveis em: Python R Stata CLI (terminal) Pronto(a) para come\u00e7ar? Nesta p\u00e1gina voc\u00ea encontra: Primeiros passos Tutoriais Manuais de refer\u00eancia","title":"Pacotes"},{"location":"access_data_packages/#primeiros-passos","text":"","title":"Primeiros passos"},{"location":"access_data_packages/#antes-de-comecar-crie-o-seu-projeto-no-google-cloud","text":"Para criar um projeto no Google Cloud basta ter um email cadastrado no Google. \u00c9 necess\u00e1rio ter um projeto seu, mesmo que vazio, para voc\u00ea fazer queries em nosso datalake p\u00fablico. Acesse o Google Cloud . Caso for a sua primeira vez, aceite o Termo de Servi\u00e7os. Clique em Create Project/Criar Projeto . Escolha um nome bacana para o projeto. Clique em Create/Criar Por que eu preciso criar um projeto no Google Cloud? A Google fornece 1 TB gratuito por m\u00eas de uso do BigQuery para cada projeto que voc\u00ea possui. Um projeto \u00e9 necess\u00e1rio para ativar os servi\u00e7os do Google Cloud, incluindo a permiss\u00e3o de uso do BigQuery. Pense no projeto como a \"conta\" na qual a Google vai contabilizar o quanto de processamento voc\u00ea j\u00e1 utilizou. N\u00e3o \u00e9 necess\u00e1rio adicionar nenhum cart\u00e3o ou forma de pagamento - O BigQuery inicia automaticamente no modo Sandbox, que permite voc\u00ea utilizar seus recursos sem adicionar um modo de pagamento. Leia mais aqui .","title":"Antes de come\u00e7ar: Crie o seu projeto no Google Cloud"},{"location":"access_data_packages/#instalando-o-pacote","text":"Para instala\u00e7\u00e3o do pacote em Python e linha de comando, voc\u00ea pode usar o pip direto do seu terminal. Em R, basta instalar diretamente no RStudio ou editor de sua prefer\u00eancia. Python/CLI pip install basedosdados R install.packages ( \"basedosdados\" ) Stata Requerimentos: Garantir que seu Stata seja a vers\u00e3o 16+ Garantir que o Python esteja instalado no seu computador. Com os requerimentos satisfeitos, rodar os comandos abaixo: net install basedosdados, from( \"https://raw.githubusercontent.com/basedosdados/mais/master/stata-package\" )","title":"Instalando o pacote"},{"location":"access_data_packages/#configurando-o-pacote","text":"Uma vez com seu projeto, voc\u00ea precisa configurar o pacote para usar o ID desse projeto nas consultas ao datalake . Para isso, voc\u00ea deve usar o project_id que a Google fornece para voc\u00ea assim que o projeto \u00e9 criado. Python/CLI N\u00e3o \u00e9 necess\u00e1rio configurar o projeto de antem\u00e3o. Assim que voc\u00ea roda a 1\u00aa consulta, o pacote ir\u00e1 indicar os passos para configura\u00e7\u00e3o. R Uma vez com o project_id , voc\u00ea deve passar essa informa\u00e7\u00e3o para o pacote usando a fun\u00e7\u00e3o set_billing_id . set_billing_id ( \"<YOUR_PROJECT_ID>\" ) Stata \u00c9 necess\u00e1rio especificar o project_id a cada vez que usar o pacote.","title":"Configurando o pacote"},{"location":"access_data_packages/#faca-sua-primeira-consulta","text":"Um exemplo simples para come\u00e7ar a explorar o datalake \u00e9 puxar informa\u00e7\u00f5es cadastrais de munic\u00edpios direto na nossa base de Diret\u00f3rios Brasileiros (tabela municipio ) . Para isso, vamos usar a fun\u00e7\u00e3o download , baixando os dados direto para nossa m\u00e1quina. Python import basedosdados as bd bd . download ( savepath = \"<PATH>\" , dataset_id = \"br-bd-diretorios-brasil\" , table_id = \"municipio\" ) Para entender mais sobre a fun\u00e7\u00e3o download , leia o manual de refer\u00eancia . R library ( \"basedosdados\" ) query <- \"SELECT * FROM `basedosdados.br_bd_diretorios_brasil.municipio`\" dir <- tempdir () data <- download ( query , \"<PATH>\" ) Para entender mais sobre a fun\u00e7\u00e3o download , leia o manual de refer\u00eancia . Stata bd_read_sql, /// path( \"<PATH>\" ) /// query ( \"SELECT * FROM `basedosdados.br_bd_diretorios_brasil.municipio`\") /// billing_project_id(\"<PROJECT_ID>\") CLI basedosdados download \"where/to/save/file\" \\ --billing_project_id <YOUR_PROJECT_ID> \\ --query 'SELECT * FROM `basedosdados.br_bd_diretorios_brasil.municipio`' Para entender mais sobre a fun\u00e7\u00e3o download , leia o manual de refer\u00eancia .","title":"Fa\u00e7a sua primeira consulta"},{"location":"access_data_packages/#tutoriais","text":"","title":"Tutoriais"},{"location":"access_data_packages/#como-usar-os-pacotes","text":"Preparamos tutoriais apresentando as principais fun\u00e7\u00f5es de cada pacote para voc\u00ea come\u00e7ar a us\u00e1-los. Python Blog: Introdu\u00e7\u00e3o ao pacote Python Introdu\u00e7\u00e3o ao pacote Python (cont.) V\u00eddeos: Workshop: Aplica\u00e7\u00f5es em Python R Blog: Introdu\u00e7\u00e3o ao pacote R Explorando o Censo Escolar An\u00e1lise: O Brasil nas Olimp\u00edadas V\u00eddeos: Workshop: Aprenda a acessar dados p\u00fablicos em R Stata Documenta\u00e7\u00e3o: GitHub","title":"Como usar os pacotes"},{"location":"access_data_packages/#manuais-de-referencia-api","text":"Python R Stata CLI","title":"Manuais de refer\u00eancia (API)"},{"location":"api_reference_python/","text":"Python Esta API \u00e9 composta por fun\u00e7\u00f5es com 2 tipos de funcionalidade: M\u00f3dulos para requisi\u00e7\u00e3o de dados : para aquele(as) que desejam somente consultar os dados e metadados do nosso projeto. Classes para gerenciamento de dados no Google Cloud: para aqueles(as) que desejam subir dados no nosso projeto (ou qualquer outro projeto no Google Cloud, seguindo a nossa metodologia e infraestrutura). Toda documenta\u00e7\u00e3o do c\u00f3digo abaixo est\u00e1 em ingl\u00eas M\u00f3dulos (Requisi\u00e7\u00e3o de dados) Functions to get metadata from BD's API check_input ( f ) Checks if the number of inputs is valid Source code in basedosdados/download/metadata.py def check_input ( f ): \"\"\"Checks if the number of inputs is valid\"\"\" @wraps ( f ) def wrapper ( * args , ** kwargs ): if sum ([ a is not None for a in args ]) > 1 : raise ValueError ( \"At most one of the inputs must be non null\" ) return f ( * args , ** kwargs ) return wrapper get_columns ( table_id = None , column_id = None , columns_name = None , page = 1 , page_size = 10 , backend = None ) Get a list of available columns, either by table_id , column_id or column_name Parameters: Name Type Description Default table_id(str) table slug in google big query (gbq). required column_id(str) column slug in google big query (gbq). required column_name(str) table name in base dos dados metadata. required page(int) page for pagination. required page_size(int) page size for pagination. required backend(Backend) backend instance, injected automatically. required Returns: Type Description dict List of tables. Source code in basedosdados/download/metadata.py @check_input @inject_backend def get_columns ( table_id : str = None , column_id : str = None , columns_name : str = None , page : int = 1 , page_size : int = 10 , backend : Backend = None , ) -> list [ dict ]: \"\"\" Get a list of available columns, either by `table_id`, `column_id` or `column_name` Args: table_id(str): table slug in google big query (gbq). column_id(str): column slug in google big query (gbq). column_name(str): table name in base dos dados metadata. page(int): page for pagination. page_size(int): page size for pagination. backend(Backend): backend instance, injected automatically. Returns: dict: List of tables. \"\"\" result = backend . get_columns ( table_id , column_id , columns_name , page , page_size ) for item in result . get ( \"items\" , []) or []: item [ \"bigquery_type\" ] = item . pop ( \"bigqueryType\" , {}) . get ( \"name\" ) return result get_datasets ( dataset_id = None , dataset_name = None , page = 1 , page_size = 10 , backend = None ) Get a list of available datasets, either by dataset_id or dataset_name Parameters: Name Type Description Default dataset_id(str) dataset slug in google big query (gbq). required dataset_name(str) dataset name in base dos dados metadata. required page(int) page for pagination. required page_size(int) page size for pagination. required backend(Backend) backend instance, injected automatically. required Returns: Type Description dict List of datasets. Source code in basedosdados/download/metadata.py @check_input @inject_backend def get_datasets ( dataset_id : str = None , dataset_name : str = None , page : int = 1 , page_size : int = 10 , backend : Backend = None , ) -> list [ dict ]: \"\"\" Get a list of available datasets, either by `dataset_id` or `dataset_name` Args: dataset_id(str): dataset slug in google big query (gbq). dataset_name(str): dataset name in base dos dados metadata. page(int): page for pagination. page_size(int): page size for pagination. backend(Backend): backend instance, injected automatically. Returns: dict: List of datasets. \"\"\" result = backend . get_datasets ( dataset_id , dataset_name , page , page_size ) for item in result . get ( \"items\" , []) or []: item [ \"organization\" ] = item . get ( \"organization\" , {}) . get ( \"name\" ) item [ \"tags\" ] = [ i . get ( \"name\" ) for i in item . get ( \"tags\" , {}) . get ( \"items\" )] item [ \"themes\" ] = [ i . get ( \"name\" ) for i in item . get ( \"themes\" , {}) . get ( \"items\" )] return result get_tables ( dataset_id = None , table_id = None , table_name = None , page = 1 , page_size = 10 , backend = None ) Get a list of available tables, either by dataset_id , table_id or table_name Parameters: Name Type Description Default dataset_id(str) dataset slug in google big query (gbq). required table_id(str) table slug in google big query (gbq). required table_name(str) table name in base dos dados metadata. required page(int) page for pagination. required page_size(int) page size for pagination. required backend(Backend) backend instance, injected automatically. required Returns: Type Description dict List of tables. Source code in basedosdados/download/metadata.py @check_input @inject_backend def get_tables ( dataset_id : str = None , table_id : str = None , table_name : str = None , page : int = 1 , page_size : int = 10 , backend : Backend = None , ) -> list [ dict ]: \"\"\" Get a list of available tables, either by `dataset_id`, `table_id` or `table_name` Args: dataset_id(str): dataset slug in google big query (gbq). table_id(str): table slug in google big query (gbq). table_name(str): table name in base dos dados metadata. page(int): page for pagination. page_size(int): page size for pagination. backend(Backend): backend instance, injected automatically. Returns: dict: List of tables. \"\"\" return backend . get_tables ( dataset_id , table_id , table_name , page , page_size ) inject_backend ( f ) Inject backend instance if doesn't exists Source code in basedosdados/download/metadata.py def inject_backend ( f ): \"\"\"Inject backend instance if doesn't exists\"\"\" @wraps ( f ) def wrapper ( * args , ** kwargs ): if \"backend\" not in kwargs : kwargs [ \"backend\" ] = Backend () return f ( * args , ** kwargs ) return wrapper search ( q = None , page = 1 , page_size = 10 , backend = None ) Search for datasets, querying all available metadata for the term q Parameters: Name Type Description Default q(str) search term. required page(int) page for pagination. required page_size(int) page size for pagination. required backend(Backend) backend instance, injected automatically. required Returns: Type Description dict List of datasets and metadata. Source code in basedosdados/download/metadata.py @check_input @inject_backend def search ( q : str = None , page : int = 1 , page_size : int = 10 , backend : Backend = None , ) -> list [ dict ]: \"\"\" Search for datasets, querying all available metadata for the term `q` Args: q(str): search term. page(int): page for pagination. page_size(int): page size for pagination. backend(Backend): backend instance, injected automatically. Returns: dict: List of datasets and metadata. \"\"\" items = [] for item in backend . search ( q , page , page_size ) . get ( \"results\" , []): items . append ( { \"slug\" : item . get ( \"slug\" ), \"name\" : item . get ( \"name\" ), \"description\" : item . get ( \"description\" ), \"n_tables\" : item . get ( \"n_tables\" ), \"n_raw_data_sources\" : item . get ( \"n_raw_data_sources\" ), \"n_information_requests\" : item . get ( \"n_information_requests\" ), \"organization\" : { \"slug\" : item . get ( \"organizations\" , [{}])[ 0 ] . get ( \"slug\" ), \"name\" : item . get ( \"organizations\" , [{}])[ 0 ] . get ( \"name\" ), }, } ) return items Functions for managing downloads download ( savepath , query = None , dataset_id = None , table_id = None , billing_project_id = None , query_project_id = 'basedosdados' , limit = None , from_file = False , reauth = False , compression = 'GZIP' ) Download table or query result from basedosdados BigQuery (or other). Using a query : download('select * from basedosdados.br_suporte.diretorio_municipios limit 10') Using dataset_id & table_id : download(dataset_id='br_suporte', table_id='diretorio_municipios') You can also add arguments to modify save parameters: download(dataset_id='br_suporte', table_id='diretorio_municipios', index=False, sep='|') Parameters: Name Type Description Default savepath str, pathlib.PosixPath savepath must be a file path. Only supports .csv . required query str Optional. Valid SQL Standard Query to basedosdados. If query is available, dataset_id and table_id are not required. None dataset_id str Optional. Dataset id available in basedosdados. It should always come with table_id. None table_id str Optional. Table id available in basedosdados.dataset_id. It should always come with dataset_id. None billing_project_id str Optional. Project that will be billed. Find your Project ID here https://console.cloud.google.com/projectselector2/home/dashboard None query_project_id str Optional. Which project the table lives. You can change this you want to query different projects. 'basedosdados' limit int Optional Number of rows. None from_file boolean Optional. Uses the credentials from file, located in `~/.basedosdados/credentials/ False reauth boolean Optional. Re-authorize Google Cloud Project in case you need to change user or reset configurations. False compression str Optional. Compression type. Only GZIP is available for now. 'GZIP' Exceptions: Type Description Exception If either table_id, dataset_id or query are empty. Source code in basedosdados/download/download.py def download ( savepath , query = None , dataset_id = None , table_id = None , billing_project_id = None , query_project_id = \"basedosdados\" , limit = None , from_file = False , reauth = False , compression = \"GZIP\" , ): \"\"\"Download table or query result from basedosdados BigQuery (or other). * Using a **query**: `download('select * from `basedosdados.br_suporte.diretorio_municipios` limit 10')` * Using **dataset_id & table_id**: `download(dataset_id='br_suporte', table_id='diretorio_municipios')` You can also add arguments to modify save parameters: `download(dataset_id='br_suporte', table_id='diretorio_municipios', index=False, sep='|')` Args: savepath (str, pathlib.PosixPath): savepath must be a file path. Only supports `.csv`. query (str): Optional. Valid SQL Standard Query to basedosdados. If query is available, dataset_id and table_id are not required. dataset_id (str): Optional. Dataset id available in basedosdados. It should always come with table_id. table_id (str): Optional. Table id available in basedosdados.dataset_id. It should always come with dataset_id. billing_project_id (str): Optional. Project that will be billed. Find your Project ID here https://console.cloud.google.com/projectselector2/home/dashboard query_project_id (str): Optional. Which project the table lives. You can change this you want to query different projects. limit (int): Optional Number of rows. from_file (boolean): Optional. Uses the credentials from file, located in `~/.basedosdados/credentials/ reauth (boolean): Optional. Re-authorize Google Cloud Project in case you need to change user or reset configurations. compression (str): Optional. Compression type. Only `GZIP` is available for now. Raises: Exception: If either table_id, dataset_id or query are empty. \"\"\" billing_project_id , from_file = _set_config_variables ( billing_project_id = billing_project_id , from_file = from_file ) if ( query is None ) and (( table_id is None ) or ( dataset_id is None )): raise BaseDosDadosException ( \"Either table_id, dataset_id or query should be filled.\" ) client = _google_client ( billing_project_id , from_file , reauth ) # makes sure that savepath is a filepath and not a folder savepath = _sets_savepath ( savepath ) # if query is not defined (so it won't be overwritten) and if # table is a view or external or if limit is specified, # convert it to a query. if not query and ( not _is_table ( client , dataset_id , table_id , query_project_id ) or limit ): query = f \"\"\" SELECT * FROM { query_project_id } . { dataset_id } . { table_id } \"\"\" if limit is not None : query += f \" limit { limit } \" if query : # sql queries produces anonymous tables, whose names # can be found within `job._properties` job = client [ \"bigquery\" ] . query ( query ) # views may take longer: wait for job to finish. _wait_for ( job ) dest_table = job . _properties [ \"configuration\" ][ \"query\" ][ \"destinationTable\" ] project_id = dest_table [ \"projectId\" ] dataset_id = dest_table [ \"datasetId\" ] table_id = dest_table [ \"tableId\" ] _direct_download ( client , dataset_id , table_id , savepath , project_id , compression ) read_sql ( query , billing_project_id = None , from_file = False , reauth = False , use_bqstorage_api = False ) Load data from BigQuery using a query. Just a wrapper around pandas.read_gbq Parameters: Name Type Description Default query sql Valid SQL Standard Query to basedosdados required billing_project_id str Optional. Project that will be billed. Find your Project ID here https://console.cloud.google.com/projectselector2/home/dashboard None from_file boolean Optional. Uses the credentials from file, located in `~/.basedosdados/credentials/ False reauth boolean Optional. Re-authorize Google Cloud Project in case you need to change user or reset configurations. False use_bqstorage_api boolean Optional. Use the BigQuery Storage API to download query results quickly, but at an increased cost(https://cloud.google.com/bigquery/docs/reference/storage/). To use this API, first enable it in the Cloud Console(https://console.cloud.google.com/apis/library/bigquerystorage.googleapis.com). You must also have the bigquery.readsessions.create permission on the project you are billing queries to. False Returns: Type Description pd.DataFrame Query result Source code in basedosdados/download/download.py def read_sql ( query , billing_project_id = None , from_file = False , reauth = False , use_bqstorage_api = False , ): \"\"\"Load data from BigQuery using a query. Just a wrapper around pandas.read_gbq Args: query (sql): Valid SQL Standard Query to basedosdados billing_project_id (str): Optional. Project that will be billed. Find your Project ID here https://console.cloud.google.com/projectselector2/home/dashboard from_file (boolean): Optional. Uses the credentials from file, located in `~/.basedosdados/credentials/ reauth (boolean): Optional. Re-authorize Google Cloud Project in case you need to change user or reset configurations. use_bqstorage_api (boolean): Optional. Use the BigQuery Storage API to download query results quickly, but at an increased cost(https://cloud.google.com/bigquery/docs/reference/storage/). To use this API, first enable it in the Cloud Console(https://console.cloud.google.com/apis/library/bigquerystorage.googleapis.com). You must also have the bigquery.readsessions.create permission on the project you are billing queries to. Returns: pd.DataFrame: Query result \"\"\" billing_project_id , from_file = _set_config_variables ( billing_project_id = billing_project_id , from_file = from_file ) try : # Set a two hours timeout bigquery_storage_v1 . client . BigQueryReadClient . read_rows = partialmethod ( bigquery_storage_v1 . client . BigQueryReadClient . read_rows , timeout = 3600 * 2 , ) return read_gbq ( query , project_id = config . billing_project_id , use_bqstorage_api = use_bqstorage_api , credentials = _credentials ( from_file = config . from_file , reauth = reauth ), ) except GenericGBQException as e : if \"Reason: 403\" in str ( e ): raise BaseDosDadosAccessDeniedException from e if re . match ( \"Reason: 400 POST .* [Pp]roject[ ]*I[Dd]\" , str ( e )): raise BaseDosDadosInvalidProjectIDException from e raise except PyDataCredentialsError as e : raise BaseDosDadosAuthorizationException from e except ( OSError , ValueError ) as e : no_billing_id = \"Could not determine project ID\" in str ( e ) no_billing_id |= \"reading from stdin while output is captured\" in str ( e ) if no_billing_id : raise BaseDosDadosNoBillingProjectIDException from e raise read_table ( dataset_id , table_id , billing_project_id = None , query_project_id = 'basedosdados' , limit = None , from_file = False , reauth = False , use_bqstorage_api = False ) Load data from BigQuery using dataset_id and table_id. Parameters: Name Type Description Default dataset_id str Optional. Dataset id available in basedosdados. It should always come with table_id. required table_id str Optional. Table id available in basedosdados.dataset_id. It should always come with dataset_id. required billing_project_id str Optional. Project that will be billed. Find your Project ID here https://console.cloud.google.com/projectselector2/home/dashboard None query_project_id str Optional. Which project the table lives. You can change this you want to query different projects. 'basedosdados' limit int Optional. Number of rows to read from table. None from_file boolean Optional. Uses the credentials from file, located in `~/.basedosdados/credentials/ False reauth boolean Optional. Re-authorize Google Cloud Project in case you need to change user or reset configurations. False use_bqstorage_api boolean Optional. Use the BigQuery Storage API to download query results quickly, but at an increased cost(https://cloud.google.com/bigquery/docs/reference/storage/). To use this API, first enable it in the Cloud Console(https://console.cloud.google.com/apis/library/bigquerystorage.googleapis.com). You must also have the bigquery.readsessions.create permission on the project you are billing queries to. False Returns: Type Description pd.DataFrame Query result Source code in basedosdados/download/download.py def read_table ( dataset_id , table_id , billing_project_id = None , query_project_id = \"basedosdados\" , limit = None , from_file = False , reauth = False , use_bqstorage_api = False , ): \"\"\"Load data from BigQuery using dataset_id and table_id. Args: dataset_id (str): Optional. Dataset id available in basedosdados. It should always come with table_id. table_id (str): Optional. Table id available in basedosdados.dataset_id. It should always come with dataset_id. billing_project_id (str): Optional. Project that will be billed. Find your Project ID here https://console.cloud.google.com/projectselector2/home/dashboard query_project_id (str): Optional. Which project the table lives. You can change this you want to query different projects. limit (int): Optional. Number of rows to read from table. from_file (boolean): Optional. Uses the credentials from file, located in `~/.basedosdados/credentials/ reauth (boolean): Optional. Re-authorize Google Cloud Project in case you need to change user or reset configurations. use_bqstorage_api (boolean): Optional. Use the BigQuery Storage API to download query results quickly, but at an increased cost(https://cloud.google.com/bigquery/docs/reference/storage/). To use this API, first enable it in the Cloud Console(https://console.cloud.google.com/apis/library/bigquerystorage.googleapis.com). You must also have the bigquery.readsessions.create permission on the project you are billing queries to. Returns: pd.DataFrame: Query result \"\"\" billing_project_id , from_file = _set_config_variables ( billing_project_id = billing_project_id , from_file = from_file ) if ( dataset_id is not None ) and ( table_id is not None ): query = f \"\"\" SELECT * FROM ` { query_project_id } . { dataset_id } . { table_id } `\"\"\" if limit is not None : query += f \" LIMIT { limit } \" else : raise BaseDosDadosException ( \"Both table_id and dataset_id should be filled.\" ) return read_sql ( query , billing_project_id = billing_project_id , from_file = from_file , reauth = reauth , use_bqstorage_api = use_bqstorage_api , ) Classes (Gerenciamento de dados) Class for managing the files in cloud storage. Storage ( Base ) Manage files on Google Cloud Storage. Source code in basedosdados/upload/storage.py class Storage ( Base ): \"\"\" Manage files on Google Cloud Storage. \"\"\" def __init__ ( self , dataset_id , table_id , ** kwargs ): super () . __init__ ( ** kwargs ) self . bucket = self . client [ \"storage_staging\" ] . bucket ( self . bucket_name ) self . dataset_id = dataset_id . replace ( \"-\" , \"_\" ) self . table_id = table_id . replace ( \"-\" , \"_\" ) @staticmethod def _resolve_partitions ( partitions ): if isinstance ( partitions , dict ): return \"/\" . join ( f \" { k } = { v } \" for k , v in partitions . items ()) + \"/\" if isinstance ( partitions , str ): if partitions . endswith ( \"/\" ): partitions = partitions [: - 1 ] # If there is no partition if len ( partitions ) == 0 : return \"\" # It should fail if there is folder which is not a partition try : # check if it fits rule { b . split ( \"=\" )[ 0 ]: b . split ( \"=\" )[ 1 ] for b in partitions . split ( \"/\" )} except IndexError as e : raise Exception ( f \"The path { partitions } is not a valid partition\" ) from e return partitions + \"/\" raise Exception ( f \"Partitions format or type not accepted: { partitions } \" ) def _build_blob_name ( self , filename , mode , partitions = None ): \"\"\" Builds the blob name. \"\"\" # table folder blob_name = f \" { mode } / { self . dataset_id } / { self . table_id } /\" # add partition folder if partitions is not None : blob_name += self . _resolve_partitions ( partitions ) # add file name blob_name += filename return blob_name def init ( self , replace = False , very_sure = False ): \"\"\"Initializes bucket and folders. Folder should be: * `raw` : that contains really raw data * `staging` : preprocessed data ready to upload to BigQuery Args: replace (bool): Optional. Whether to replace if bucket already exists very_sure (bool): Optional. Are you aware that everything is going to be erased if you replace the bucket? Raises: Warning: very_sure argument is still False. \"\"\" if replace : if not very_sure : raise Warning ( \" \\n ********************************************************\" \" \\n You are trying to replace all the data that you have \" f \"in bucket { self . bucket_name } . \\n Are you sure? \\n \" \"If yes, add the flag --very_sure \\n \" \"********************************************************\" ) self . bucket . delete ( force = True ) self . client [ \"storage_staging\" ] . create_bucket ( self . bucket ) for folder in [ \"staging/\" , \"raw/\" ]: self . bucket . blob ( folder ) . upload_from_string ( \"\" ) def upload ( self , path , mode = \"all\" , partitions = None , if_exists = \"raise\" , chunk_size = None , ** upload_args , ): \"\"\"Upload to storage at `<bucket_name>/<mode>/<dataset_id>/<table_id>`. You can: * Add a single **file** setting `path = <file_path>`. * Add a **folder** with multiple files setting `path = <folder_path>`. *The folder should just contain the files and no folders.* * Add **partitioned files** setting `path = <folder_path>`. This folder must follow the hive partitioning scheme i.e. `<table_id>/<key>=<value>/<key2>=<value2>/<partition>.csv` (ex: `mytable/country=brasil/year=2020/mypart.csv`). *Remember all files must follow a single schema.* Otherwise, things might fail in the future. There are 6 modes: * `raw` : should contain raw files from datasource * `staging` : should contain pre-treated files ready to upload to BiqQuery * `header`: should contain the header of the tables * `auxiliary_files`: should contain auxiliary files from eache table * `architecture`: should contain the architecture sheet of the tables * `all`: if no treatment is needed, use `all`. Args: path (str or pathlib.PosixPath): Where to find the file or folder that you want to upload to storage mode (str): Folder of which dataset to update [raw|staging|header|auxiliary_files|architecture|all] partitions (str, pathlib.PosixPath, or dict): Optional. *If adding a single file*, use this to add it to a specific partition. * str : `<key>=<value>/<key2>=<value2>` * dict: `dict(key=value, key2=value2)` if_exists (str): Optional. What to do if data exists * 'raise' : Raises Conflict exception * 'replace' : Replace table * 'pass' : Do nothing chunk_size (int): Optional The size of a chunk of data whenever iterating (in bytes). This must be a multiple of 256 KB per the API specification. If not specified, the chunk_size of the blob itself is used. If that is not specified, a default value of 40 MB is used. upload_args (): Extra arguments accepted by [`google.cloud.storage.blob.Blob.upload_from_file`](https://googleapis.dev/python/storage/latest/blobs.html?highlight=upload_from_filename#google.cloud.storage.blob.Blob.upload_from_filename) \"\"\" if ( self . dataset_id is None ) or ( self . table_id is None ): raise Exception ( \"You need to pass dataset_id and table_id\" ) path = Path ( path ) if path . is_dir (): paths = [ f for f in path . glob ( \"**/*\" ) if f . is_file () and f . suffix in [ \".csv\" , \".parquet\" , \"parquet.gzip\" ] ] parts = [ ( filepath . as_posix () . replace ( path . as_posix () + \"/\" , \"\" ) . replace ( str ( filepath . name ), \"\" ) ) for filepath in paths ] else : paths = [ path ] parts = [ partitions or None ] self . _check_mode ( mode ) mode = ( [ \"raw\" , \"staging\" , \"header\" , \"auxiliary_files\" , \"architecture\" ] if mode == \"all\" else [ mode ] ) for m in mode : for filepath , part in tqdm ( list ( zip ( paths , parts )), desc = \"Uploading files\" ): blob_name = self . _build_blob_name ( filepath . name , m , part ) blob = self . bucket . blob ( blob_name , chunk_size = chunk_size ) if not blob . exists () or if_exists == \"replace\" : upload_args [ \"timeout\" ] = upload_args . get ( \"timeout\" , None ) blob . upload_from_filename ( str ( filepath ), ** upload_args ) elif if_exists == \"pass\" : pass else : raise BaseDosDadosException ( f \"Data already exists at { self . bucket_name } / { blob_name } . \" \"If you are using Storage.upload then set if_exists to \" \"'replace' to overwrite data \\n \" \"If you are using Table.create then set if_storage_data_exists \" \"to 'replace' to overwrite data.\" ) logger . success ( \" {object} {filename} _ {mode} was {action} !\" , filename = filepath . name , mode = m , object = \"File\" , action = \"uploaded\" , ) def download ( self , filename = \"*\" , savepath = \".\" , partitions = None , mode = \"staging\" , if_not_exists = \"raise\" , ): \"\"\"Download files from Google Storage from path `mode`/`dataset_id`/`table_id`/`partitions`/`filename` and replicate folder hierarchy on save, There are 5 modes: * `raw` : should contain raw files from datasource * `staging` : should contain pre-treated files ready to upload to BiqQuery * `header`: should contain the header of the tables * `auxiliary_files`: should contain auxiliary files from eache table * `architecture`: should contain the architecture sheet of the tables You can also use the `partitions` argument to choose files from a partition Args: filename (str): Optional Specify which file to download. If \"*\" , downloads all files within the bucket folder. Defaults to \"*\". savepath (str): Where you want to save the data on your computer. Must be a path to a directory. partitions (str, dict): Optional If downloading a single file, use this to specify the partition path from which to download. * str : `<key>=<value>/<key2>=<value2>` * dict: `dict(key=value, key2=value2)` mode (str): Optional Folder of which dataset to update.[raw|staging|header|auxiliary_files|architecture] if_not_exists (str): Optional. What to do if data not found. * 'raise' : Raises FileNotFoundError. * 'pass' : Do nothing and exit the function Raises: FileNotFoundError: If the given path `<mode>/<dataset_id>/<table_id>/<partitions>/<filename>` could not be found or there are no files to download. \"\"\" # Prefix to locate files within the bucket prefix = f \" { mode } / { self . dataset_id } / { self . table_id } /\" # Add specific partition to search prefix if partitions : prefix += self . _resolve_partitions ( partitions ) # if no filename is passed, list all blobs within a given table if filename != \"*\" : prefix += filename blob_list = list ( self . bucket . list_blobs ( prefix = prefix )) # if there are no blobs matching the search raise FileNotFoundError or return if not blob_list : if if_not_exists == \"raise\" : raise FileNotFoundError ( f \"Could not locate files at { prefix } \" ) return # download all blobs matching the search to given savepath for blob in tqdm ( blob_list , desc = \"Download Blob\" ): # parse blob.name and get the csv file name csv_name = blob . name . split ( \"/\" )[ - 1 ] # build folder path replicating storage hierarchy blob_folder = blob . name . replace ( csv_name , \"\" ) # replicate folder hierarchy savepath = Path ( savepath ) ( savepath / blob_folder ) . mkdir ( parents = True , exist_ok = True ) # download blob to savepath save_file_path = savepath / blob . name blob . download_to_filename ( filename = save_file_path ) logger . success ( \" {object} {object_id} _ {mode} was {action} at: {path} !\" , object_id = self . dataset_id , mode = mode , object = \"File\" , action = \"downloaded\" , path = { str ( savepath )}, ) def delete_file ( self , filename , mode , partitions = None , not_found_ok = False ): \"\"\"Deletes file from path `<bucket_name>/<mode>/<dataset_id>/<table_id>/<partitions>/<filename>`. Args: filename (str): Name of the file to be deleted mode (str): Folder of which dataset to update [raw|staging|header|auxiliary_files|architecture|all] partitions (str, pathlib.PosixPath, or dict): Optional. Hive structured partition as a string or dict * str : `<key>=<value>/<key2>=<value2>` * dict: `dict(key=value, key2=value2)` not_found_ok (bool): Optional. What to do if file not found \"\"\" self . _check_mode ( mode ) mode = ( [ \"raw\" , \"staging\" , \"header\" , \"auxiliary_files\" , \"architecture\" ] if mode == \"all\" else [ mode ] ) for m in mode : blob = self . bucket . blob ( self . _build_blob_name ( filename , m , partitions )) if blob . exists () or not blob . exists () and not not_found_ok : blob . delete () else : return logger . success ( \" {object} {filename} _ {mode} was {action} !\" , filename = filename , mode = mode , object = \"File\" , action = \"deleted\" , ) def delete_table ( self , mode = \"staging\" , bucket_name = None , not_found_ok = False ): \"\"\"Deletes a table from storage, sends request in batches. Args: mode (str): Folder of which dataset to update [raw|staging|header|auxiliary_files|architecture] Folder of which dataset to update. Defaults to \"staging\". bucket_name (str): The bucket name from which to delete the table. If None, defaults to the bucket initialized when instantiating the Storage object. (You can check it with the Storage().bucket property) not_found_ok (bool): Optional. What to do if table not found \"\"\" prefix = f \" { mode } / { self . dataset_id } / { self . table_id } /\" if bucket_name is not None : table_blobs = list ( self . client [ \"storage_staging\" ] . bucket ( f \" { bucket_name } \" ) . list_blobs ( prefix = prefix ) ) else : table_blobs = list ( self . bucket . list_blobs ( prefix = prefix )) if not table_blobs : if not_found_ok : return raise FileNotFoundError ( f \"Could not find the requested table { self . dataset_id } . { self . table_id } \" ) # Divides table_blobs list for maximum batch request size table_blobs_chunks = [ table_blobs [ i : i + 999 ] for i in range ( 0 , len ( table_blobs ), 999 ) # noqa ] for i , source_table in enumerate ( tqdm ( table_blobs_chunks , desc = \"Delete Table Chunk\" ) ): counter = 0 while counter < 10 : try : with self . client [ \"storage_staging\" ] . batch (): for blob in source_table : blob . delete () break except Exception : print ( f \"Delete Table Chunk { i } | Attempt { counter } : delete operation starts again in 5 seconds...\" , ) time . sleep ( 5 ) counter += 1 traceback . print_exc ( file = sys . stderr ) logger . success ( \" {object} {object_id} _ {mode} was {action} !\" , object_id = self . table_id , mode = mode , object = \"Table\" , action = \"deleted\" , ) def copy_table ( self , source_bucket_name = \"basedosdados\" , destination_bucket_name = None , mode = \"staging\" , new_table_id = None , ): \"\"\"Copies table from a source bucket to your bucket, sends request in batches. Args: source_bucket_name (str): The bucket name from which to copy data. You can change it to copy from other external bucket. destination_bucket_name (str): Optional The bucket name where data will be copied to. If None, defaults to the bucket initialized when instantiating the Storage object (You can check it with the Storage().bucket property) mode (str): Folder of which dataset to update [raw|staging|header|auxiliary_files|architecture] Folder of which dataset to update. Defaults to \"staging\". new_table_id (str): Optional. New table id to be copied to. If None, defaults to the table id initialized when instantiating the Storage object. \"\"\" source_table_ref = list ( self . client [ \"storage_staging\" ] . bucket ( source_bucket_name ) . list_blobs ( prefix = f \" { mode } / { self . dataset_id } / { self . table_id } /\" ) ) if not source_table_ref : raise FileNotFoundError ( f \"Could not find the requested table { self . dataset_id } . { self . table_id } \" ) if destination_bucket_name is None : destination_bucket = self . bucket else : destination_bucket = self . client [ \"storage_staging\" ] . bucket ( destination_bucket_name ) # Divides source_table_ref list for maximum batch request size source_table_ref_chunks = [ source_table_ref [ i : i + 999 ] # noqa for i in range ( 0 , len ( source_table_ref ), 999 ) # noqa ] for i , source_table in enumerate ( tqdm ( source_table_ref_chunks , desc = \"Copy Table Chunk\" ) ): counter = 0 while counter < 10 : try : with self . client [ \"storage_staging\" ] . batch (): for blob in source_table : new_name = None if new_table_id : new_name = blob . name . replace ( self . table_id , new_table_id ) self . bucket . copy_blob ( blob , destination_bucket = destination_bucket , new_name = new_name , ) break except Exception : print ( f \"Copy Table Chunk { i } | Attempt { counter } : copy operation starts again in 5 seconds...\" , ) counter += 1 time . sleep ( 5 ) traceback . print_exc ( file = sys . stderr ) logger . success ( \" {object} {object_id} _ {mode} was {action} to {new_object_id} _ {mode} !\" , object_id = self . table_id , new_object_id = new_table_id if new_table_id else self . table_id , mode = mode , object = \"Table\" , action = \"copied\" , ) copy_table ( self , source_bucket_name = 'basedosdados' , destination_bucket_name = None , mode = 'staging' , new_table_id = None ) Copies table from a source bucket to your bucket, sends request in batches. Parameters: Name Type Description Default source_bucket_name str The bucket name from which to copy data. You can change it to copy from other external bucket. 'basedosdados' destination_bucket_name str Optional The bucket name where data will be copied to. If None, defaults to the bucket initialized when instantiating the Storage object (You can check it with the Storage().bucket property) None mode str Folder of which dataset to update [raw|staging|header|auxiliary_files|architecture] Folder of which dataset to update. Defaults to \"staging\". 'staging' new_table_id str Optional. New table id to be copied to. If None, defaults to the table id initialized when instantiating the Storage object. None Source code in basedosdados/upload/storage.py def copy_table ( self , source_bucket_name = \"basedosdados\" , destination_bucket_name = None , mode = \"staging\" , new_table_id = None , ): \"\"\"Copies table from a source bucket to your bucket, sends request in batches. Args: source_bucket_name (str): The bucket name from which to copy data. You can change it to copy from other external bucket. destination_bucket_name (str): Optional The bucket name where data will be copied to. If None, defaults to the bucket initialized when instantiating the Storage object (You can check it with the Storage().bucket property) mode (str): Folder of which dataset to update [raw|staging|header|auxiliary_files|architecture] Folder of which dataset to update. Defaults to \"staging\". new_table_id (str): Optional. New table id to be copied to. If None, defaults to the table id initialized when instantiating the Storage object. \"\"\" source_table_ref = list ( self . client [ \"storage_staging\" ] . bucket ( source_bucket_name ) . list_blobs ( prefix = f \" { mode } / { self . dataset_id } / { self . table_id } /\" ) ) if not source_table_ref : raise FileNotFoundError ( f \"Could not find the requested table { self . dataset_id } . { self . table_id } \" ) if destination_bucket_name is None : destination_bucket = self . bucket else : destination_bucket = self . client [ \"storage_staging\" ] . bucket ( destination_bucket_name ) # Divides source_table_ref list for maximum batch request size source_table_ref_chunks = [ source_table_ref [ i : i + 999 ] # noqa for i in range ( 0 , len ( source_table_ref ), 999 ) # noqa ] for i , source_table in enumerate ( tqdm ( source_table_ref_chunks , desc = \"Copy Table Chunk\" ) ): counter = 0 while counter < 10 : try : with self . client [ \"storage_staging\" ] . batch (): for blob in source_table : new_name = None if new_table_id : new_name = blob . name . replace ( self . table_id , new_table_id ) self . bucket . copy_blob ( blob , destination_bucket = destination_bucket , new_name = new_name , ) break except Exception : print ( f \"Copy Table Chunk { i } | Attempt { counter } : copy operation starts again in 5 seconds...\" , ) counter += 1 time . sleep ( 5 ) traceback . print_exc ( file = sys . stderr ) logger . success ( \" {object} {object_id} _ {mode} was {action} to {new_object_id} _ {mode} !\" , object_id = self . table_id , new_object_id = new_table_id if new_table_id else self . table_id , mode = mode , object = \"Table\" , action = \"copied\" , ) delete_file ( self , filename , mode , partitions = None , not_found_ok = False ) Deletes file from path <bucket_name>/<mode>/<dataset_id>/<table_id>/<partitions>/<filename> . Parameters: Name Type Description Default filename str Name of the file to be deleted required mode str Folder of which dataset to update [raw|staging|header|auxiliary_files|architecture|all] required partitions str, pathlib.PosixPath, or dict Optional. Hive structured partition as a string or dict str : <key>=<value>/<key2>=<value2> dict: dict(key=value, key2=value2) None not_found_ok bool Optional. What to do if file not found False Source code in basedosdados/upload/storage.py def delete_file ( self , filename , mode , partitions = None , not_found_ok = False ): \"\"\"Deletes file from path `<bucket_name>/<mode>/<dataset_id>/<table_id>/<partitions>/<filename>`. Args: filename (str): Name of the file to be deleted mode (str): Folder of which dataset to update [raw|staging|header|auxiliary_files|architecture|all] partitions (str, pathlib.PosixPath, or dict): Optional. Hive structured partition as a string or dict * str : `<key>=<value>/<key2>=<value2>` * dict: `dict(key=value, key2=value2)` not_found_ok (bool): Optional. What to do if file not found \"\"\" self . _check_mode ( mode ) mode = ( [ \"raw\" , \"staging\" , \"header\" , \"auxiliary_files\" , \"architecture\" ] if mode == \"all\" else [ mode ] ) for m in mode : blob = self . bucket . blob ( self . _build_blob_name ( filename , m , partitions )) if blob . exists () or not blob . exists () and not not_found_ok : blob . delete () else : return logger . success ( \" {object} {filename} _ {mode} was {action} !\" , filename = filename , mode = mode , object = \"File\" , action = \"deleted\" , ) delete_table ( self , mode = 'staging' , bucket_name = None , not_found_ok = False ) Deletes a table from storage, sends request in batches. Parameters: Name Type Description Default mode str Folder of which dataset to update [raw|staging|header|auxiliary_files|architecture] Folder of which dataset to update. Defaults to \"staging\". 'staging' bucket_name str The bucket name from which to delete the table. If None, defaults to the bucket initialized when instantiating the Storage object. (You can check it with the Storage().bucket property) None not_found_ok bool Optional. What to do if table not found False Source code in basedosdados/upload/storage.py def delete_table ( self , mode = \"staging\" , bucket_name = None , not_found_ok = False ): \"\"\"Deletes a table from storage, sends request in batches. Args: mode (str): Folder of which dataset to update [raw|staging|header|auxiliary_files|architecture] Folder of which dataset to update. Defaults to \"staging\". bucket_name (str): The bucket name from which to delete the table. If None, defaults to the bucket initialized when instantiating the Storage object. (You can check it with the Storage().bucket property) not_found_ok (bool): Optional. What to do if table not found \"\"\" prefix = f \" { mode } / { self . dataset_id } / { self . table_id } /\" if bucket_name is not None : table_blobs = list ( self . client [ \"storage_staging\" ] . bucket ( f \" { bucket_name } \" ) . list_blobs ( prefix = prefix ) ) else : table_blobs = list ( self . bucket . list_blobs ( prefix = prefix )) if not table_blobs : if not_found_ok : return raise FileNotFoundError ( f \"Could not find the requested table { self . dataset_id } . { self . table_id } \" ) # Divides table_blobs list for maximum batch request size table_blobs_chunks = [ table_blobs [ i : i + 999 ] for i in range ( 0 , len ( table_blobs ), 999 ) # noqa ] for i , source_table in enumerate ( tqdm ( table_blobs_chunks , desc = \"Delete Table Chunk\" ) ): counter = 0 while counter < 10 : try : with self . client [ \"storage_staging\" ] . batch (): for blob in source_table : blob . delete () break except Exception : print ( f \"Delete Table Chunk { i } | Attempt { counter } : delete operation starts again in 5 seconds...\" , ) time . sleep ( 5 ) counter += 1 traceback . print_exc ( file = sys . stderr ) logger . success ( \" {object} {object_id} _ {mode} was {action} !\" , object_id = self . table_id , mode = mode , object = \"Table\" , action = \"deleted\" , ) download ( self , filename = '*' , savepath = '.' , partitions = None , mode = 'staging' , if_not_exists = 'raise' ) Download files from Google Storage from path mode / dataset_id / table_id / partitions / filename and replicate folder hierarchy on save, There are 5 modes: * raw : should contain raw files from datasource * staging : should contain pre-treated files ready to upload to BiqQuery * header : should contain the header of the tables * auxiliary_files : should contain auxiliary files from eache table * architecture : should contain the architecture sheet of the tables You can also use the partitions argument to choose files from a partition Parameters: Name Type Description Default filename str Optional Specify which file to download. If \" \" , downloads all files within the bucket folder. Defaults to \" \". '*' savepath str Where you want to save the data on your computer. Must be a path to a directory. '.' partitions str, dict Optional If downloading a single file, use this to specify the partition path from which to download. str : <key>=<value>/<key2>=<value2> dict: dict(key=value, key2=value2) None mode str Optional Folder of which dataset to update.[raw|staging|header|auxiliary_files|architecture] 'staging' if_not_exists str Optional. What to do if data not found. 'raise' : Raises FileNotFoundError. 'pass' : Do nothing and exit the function 'raise' Exceptions: Type Description FileNotFoundError If the given path <mode>/<dataset_id>/<table_id>/<partitions>/<filename> could not be found or there are no files to download. Source code in basedosdados/upload/storage.py def download ( self , filename = \"*\" , savepath = \".\" , partitions = None , mode = \"staging\" , if_not_exists = \"raise\" , ): \"\"\"Download files from Google Storage from path `mode`/`dataset_id`/`table_id`/`partitions`/`filename` and replicate folder hierarchy on save, There are 5 modes: * `raw` : should contain raw files from datasource * `staging` : should contain pre-treated files ready to upload to BiqQuery * `header`: should contain the header of the tables * `auxiliary_files`: should contain auxiliary files from eache table * `architecture`: should contain the architecture sheet of the tables You can also use the `partitions` argument to choose files from a partition Args: filename (str): Optional Specify which file to download. If \"*\" , downloads all files within the bucket folder. Defaults to \"*\". savepath (str): Where you want to save the data on your computer. Must be a path to a directory. partitions (str, dict): Optional If downloading a single file, use this to specify the partition path from which to download. * str : `<key>=<value>/<key2>=<value2>` * dict: `dict(key=value, key2=value2)` mode (str): Optional Folder of which dataset to update.[raw|staging|header|auxiliary_files|architecture] if_not_exists (str): Optional. What to do if data not found. * 'raise' : Raises FileNotFoundError. * 'pass' : Do nothing and exit the function Raises: FileNotFoundError: If the given path `<mode>/<dataset_id>/<table_id>/<partitions>/<filename>` could not be found or there are no files to download. \"\"\" # Prefix to locate files within the bucket prefix = f \" { mode } / { self . dataset_id } / { self . table_id } /\" # Add specific partition to search prefix if partitions : prefix += self . _resolve_partitions ( partitions ) # if no filename is passed, list all blobs within a given table if filename != \"*\" : prefix += filename blob_list = list ( self . bucket . list_blobs ( prefix = prefix )) # if there are no blobs matching the search raise FileNotFoundError or return if not blob_list : if if_not_exists == \"raise\" : raise FileNotFoundError ( f \"Could not locate files at { prefix } \" ) return # download all blobs matching the search to given savepath for blob in tqdm ( blob_list , desc = \"Download Blob\" ): # parse blob.name and get the csv file name csv_name = blob . name . split ( \"/\" )[ - 1 ] # build folder path replicating storage hierarchy blob_folder = blob . name . replace ( csv_name , \"\" ) # replicate folder hierarchy savepath = Path ( savepath ) ( savepath / blob_folder ) . mkdir ( parents = True , exist_ok = True ) # download blob to savepath save_file_path = savepath / blob . name blob . download_to_filename ( filename = save_file_path ) logger . success ( \" {object} {object_id} _ {mode} was {action} at: {path} !\" , object_id = self . dataset_id , mode = mode , object = \"File\" , action = \"downloaded\" , path = { str ( savepath )}, ) init ( self , replace = False , very_sure = False ) Initializes bucket and folders. Folder should be: raw : that contains really raw data staging : preprocessed data ready to upload to BigQuery Parameters: Name Type Description Default replace bool Optional. Whether to replace if bucket already exists False very_sure bool Optional. Are you aware that everything is going to be erased if you replace the bucket? False Exceptions: Type Description Warning very_sure argument is still False. Source code in basedosdados/upload/storage.py def init ( self , replace = False , very_sure = False ): \"\"\"Initializes bucket and folders. Folder should be: * `raw` : that contains really raw data * `staging` : preprocessed data ready to upload to BigQuery Args: replace (bool): Optional. Whether to replace if bucket already exists very_sure (bool): Optional. Are you aware that everything is going to be erased if you replace the bucket? Raises: Warning: very_sure argument is still False. \"\"\" if replace : if not very_sure : raise Warning ( \" \\n ********************************************************\" \" \\n You are trying to replace all the data that you have \" f \"in bucket { self . bucket_name } . \\n Are you sure? \\n \" \"If yes, add the flag --very_sure \\n \" \"********************************************************\" ) self . bucket . delete ( force = True ) self . client [ \"storage_staging\" ] . create_bucket ( self . bucket ) for folder in [ \"staging/\" , \"raw/\" ]: self . bucket . blob ( folder ) . upload_from_string ( \"\" ) upload ( self , path , mode = 'all' , partitions = None , if_exists = 'raise' , chunk_size = None , ** upload_args ) Upload to storage at <bucket_name>/<mode>/<dataset_id>/<table_id> . You can: Add a single file setting path = <file_path> . Add a folder with multiple files setting path = <folder_path> . The folder should just contain the files and no folders. Add partitioned files setting path = <folder_path> . This folder must follow the hive partitioning scheme i.e. <table_id>/<key>=<value>/<key2>=<value2>/<partition>.csv (ex: mytable/country=brasil/year=2020/mypart.csv ). Remember all files must follow a single schema. Otherwise, things might fail in the future. There are 6 modes: raw : should contain raw files from datasource staging : should contain pre-treated files ready to upload to BiqQuery header : should contain the header of the tables auxiliary_files : should contain auxiliary files from eache table architecture : should contain the architecture sheet of the tables all : if no treatment is needed, use all . Parameters: Name Type Description Default path str or pathlib.PosixPath Where to find the file or folder that you want to upload to storage required mode str Folder of which dataset to update [raw|staging|header|auxiliary_files|architecture|all] 'all' partitions str, pathlib.PosixPath, or dict Optional. If adding a single file , use this to add it to a specific partition. str : <key>=<value>/<key2>=<value2> dict: dict(key=value, key2=value2) None if_exists str Optional. What to do if data exists 'raise' : Raises Conflict exception 'replace' : Replace table 'pass' : Do nothing 'raise' chunk_size int Optional The size of a chunk of data whenever iterating (in bytes). This must be a multiple of 256 KB per the API specification. If not specified, the chunk_size of the blob itself is used. If that is not specified, a default value of 40 MB is used. None upload_args Extra arguments accepted by google.cloud.storage.blob.Blob.upload_from_file {} Source code in basedosdados/upload/storage.py def upload ( self , path , mode = \"all\" , partitions = None , if_exists = \"raise\" , chunk_size = None , ** upload_args , ): \"\"\"Upload to storage at `<bucket_name>/<mode>/<dataset_id>/<table_id>`. You can: * Add a single **file** setting `path = <file_path>`. * Add a **folder** with multiple files setting `path = <folder_path>`. *The folder should just contain the files and no folders.* * Add **partitioned files** setting `path = <folder_path>`. This folder must follow the hive partitioning scheme i.e. `<table_id>/<key>=<value>/<key2>=<value2>/<partition>.csv` (ex: `mytable/country=brasil/year=2020/mypart.csv`). *Remember all files must follow a single schema.* Otherwise, things might fail in the future. There are 6 modes: * `raw` : should contain raw files from datasource * `staging` : should contain pre-treated files ready to upload to BiqQuery * `header`: should contain the header of the tables * `auxiliary_files`: should contain auxiliary files from eache table * `architecture`: should contain the architecture sheet of the tables * `all`: if no treatment is needed, use `all`. Args: path (str or pathlib.PosixPath): Where to find the file or folder that you want to upload to storage mode (str): Folder of which dataset to update [raw|staging|header|auxiliary_files|architecture|all] partitions (str, pathlib.PosixPath, or dict): Optional. *If adding a single file*, use this to add it to a specific partition. * str : `<key>=<value>/<key2>=<value2>` * dict: `dict(key=value, key2=value2)` if_exists (str): Optional. What to do if data exists * 'raise' : Raises Conflict exception * 'replace' : Replace table * 'pass' : Do nothing chunk_size (int): Optional The size of a chunk of data whenever iterating (in bytes). This must be a multiple of 256 KB per the API specification. If not specified, the chunk_size of the blob itself is used. If that is not specified, a default value of 40 MB is used. upload_args (): Extra arguments accepted by [`google.cloud.storage.blob.Blob.upload_from_file`](https://googleapis.dev/python/storage/latest/blobs.html?highlight=upload_from_filename#google.cloud.storage.blob.Blob.upload_from_filename) \"\"\" if ( self . dataset_id is None ) or ( self . table_id is None ): raise Exception ( \"You need to pass dataset_id and table_id\" ) path = Path ( path ) if path . is_dir (): paths = [ f for f in path . glob ( \"**/*\" ) if f . is_file () and f . suffix in [ \".csv\" , \".parquet\" , \"parquet.gzip\" ] ] parts = [ ( filepath . as_posix () . replace ( path . as_posix () + \"/\" , \"\" ) . replace ( str ( filepath . name ), \"\" ) ) for filepath in paths ] else : paths = [ path ] parts = [ partitions or None ] self . _check_mode ( mode ) mode = ( [ \"raw\" , \"staging\" , \"header\" , \"auxiliary_files\" , \"architecture\" ] if mode == \"all\" else [ mode ] ) for m in mode : for filepath , part in tqdm ( list ( zip ( paths , parts )), desc = \"Uploading files\" ): blob_name = self . _build_blob_name ( filepath . name , m , part ) blob = self . bucket . blob ( blob_name , chunk_size = chunk_size ) if not blob . exists () or if_exists == \"replace\" : upload_args [ \"timeout\" ] = upload_args . get ( \"timeout\" , None ) blob . upload_from_filename ( str ( filepath ), ** upload_args ) elif if_exists == \"pass\" : pass else : raise BaseDosDadosException ( f \"Data already exists at { self . bucket_name } / { blob_name } . \" \"If you are using Storage.upload then set if_exists to \" \"'replace' to overwrite data \\n \" \"If you are using Table.create then set if_storage_data_exists \" \"to 'replace' to overwrite data.\" ) logger . success ( \" {object} {filename} _ {mode} was {action} !\" , filename = filepath . name , mode = m , object = \"File\" , action = \"uploaded\" , ) Module for manage dataset to the server. Dataset ( Base ) Manage datasets in BigQuery. Source code in basedosdados/upload/dataset.py class Dataset ( Base ): \"\"\" Manage datasets in BigQuery. \"\"\" def __init__ ( self , dataset_id , ** kwargs ): super () . __init__ ( ** kwargs ) self . dataset_id = dataset_id . replace ( \"-\" , \"_\" ) @property @lru_cache def dataset_config ( self ): \"\"\" Dataset config file. \"\"\" return self . backend . get_dataset_config ( self . dataset_id ) def _loop_modes ( self , mode = \"all\" ): \"\"\" Loop modes. \"\"\" def dataset_tag ( m ): return f \"_ { m } \" if m == \"staging\" else \"\" mode = [ \"prod\" , \"staging\" ] if mode == \"all\" else [ mode ] return ( { \"client\" : self . client [ f \"bigquery_ { m } \" ], \"id\" : f \" { self . client [ f 'bigquery_ { m } ' ] . project } . { self . dataset_id }{ dataset_tag ( m ) } \" , \"mode\" : m , } for m in mode ) def _setup_dataset_object ( self , dataset_id , location = None , mode = \"staging\" ): \"\"\" Setup dataset object. \"\"\" dataset = bigquery . Dataset ( dataset_id ) if mode == \"staging\" : dataset_path = dataset_id . replace ( \"_staging\" , \"\" ) description = f \"staging dataset for ` { dataset_path } `\" labels = { \"staging\" : True } else : try : description = self . dataset_config . get ( \"descriptionPt\" , \"\" ) labels = { tag . get ( \"namePt\" ): True for tag in self . dataset_config . get ( \"tags\" ) } except BaseException : logger . warning ( f \"dataset { dataset_id } does not have a description in the API.\" ) description = \"description not available in the API.\" labels = {} dataset . description = description dataset . labels = labels dataset . location = location return dataset def publicize ( self , mode = \"all\" , dataset_is_public = True ): \"\"\"Changes IAM configuration to turn BigQuery dataset public. Args: mode (bool): Which dataset to create [prod|staging|all]. dataset_is_public (bool): Control if prod dataset is public or not. By default staging datasets like `dataset_id_staging` are not public. \"\"\" for m in self . _loop_modes ( mode ): dataset = m [ \"client\" ] . get_dataset ( m [ \"id\" ]) entries = dataset . access_entries # TODO https://github.com/basedosdados/mais/pull/1020 # TODO if staging dataset is private, the prod view can't acess it: if dataset_is_public and \"staging\" not in dataset.dataset_id: if dataset_is_public : if \"staging\" not in dataset . dataset_id : entries . extend ( [ bigquery . AccessEntry ( role = \"roles/bigquery.dataViewer\" , entity_type = \"iamMember\" , entity_id = \"allUsers\" , ), bigquery . AccessEntry ( role = \"roles/bigquery.metadataViewer\" , entity_type = \"iamMember\" , entity_id = \"allUsers\" , ), bigquery . AccessEntry ( role = \"roles/bigquery.user\" , entity_type = \"iamMember\" , entity_id = \"allUsers\" , ), ] ) else : entries . extend ( [ bigquery . AccessEntry ( role = \"roles/bigquery.dataViewer\" , entity_type = \"iamMember\" , entity_id = \"allUsers\" , ), ] ) dataset . access_entries = entries m [ \"client\" ] . update_dataset ( dataset , [ \"access_entries\" ]) logger . success ( \" {object} {object_id} _ {mode} was {action} !\" , object_id = self . dataset_id , mode = m [ \"mode\" ], object = \"Dataset\" , action = \"publicized\" , ) def exists ( self , mode = \"staging\" ): \"\"\" Check if dataset exists. \"\"\" ref_dataset_id = ( self . dataset_id if mode == \"prod\" else self . dataset_id + \"_staging\" ) try : ref = self . client [ f \"bigquery_ { mode } \" ] . get_dataset ( ref_dataset_id ) except Exception : ref = None return bool ( ref ) def create ( self , mode = \"all\" , if_exists = \"raise\" , dataset_is_public = True , location = None ): \"\"\"Creates BigQuery datasets given `dataset_id`. It can create two datasets: * `<dataset_id>` (mode = 'prod') * `<dataset_id>_staging` (mode = 'staging') If `mode` is all, it creates both. Args: mode (str): Optional. Which dataset to create [prod|staging|all]. if_exists (str): Optional. What to do if dataset exists * raise : Raises Conflict exception * replace : Drop all tables and replace dataset * update : Update dataset description * pass : Do nothing dataset_is_public (bool): Control if prod dataset is public or not. By default staging datasets like `dataset_id_staging` are not public. location (str): Optional. Location of dataset data. List of possible region names locations: https://cloud.google.com/bigquery/docs/locations Raises: Warning: Dataset already exists and if_exists is set to `raise` \"\"\" # Set dataset_id to the ID of the dataset to create. for m in self . _loop_modes ( mode ): if if_exists == \"replace\" : self . delete ( mode = m [ \"mode\" ]) elif if_exists == \"update\" : self . update ( mode = m [ \"mode\" ]) continue # Send the dataset to the API for creation, with an explicit timeout. # Raises google.api_core.exceptions.Conflict if the Dataset already # exists within the project. try : if not self . exists ( mode = m [ \"mode\" ]): # Construct a full Dataset object to send to the API. dataset_obj = self . _setup_dataset_object ( dataset_id = m [ \"id\" ], location = location , mode = m [ \"mode\" ] ) m [ \"client\" ] . create_dataset ( dataset_obj ) # Make an API request. logger . success ( \" {object} {object_id} _ {mode} was {action} !\" , object_id = self . dataset_id , mode = m [ \"mode\" ], object = \"Dataset\" , action = \"created\" , ) # Make prod dataset public self . publicize ( dataset_is_public = dataset_is_public , mode = m [ \"mode\" ]) except Conflict as e : if if_exists == \"pass\" : continue raise Conflict ( f \"Dataset { self . dataset_id } already exists\" ) from e def delete ( self , mode = \"all\" ): \"\"\"Deletes dataset in BigQuery. Toogle mode to choose which dataset to delete. Args: mode (str): Optional. Which dataset to delete [prod|staging|all] \"\"\" for m in self . _loop_modes ( mode ): m [ \"client\" ] . delete_dataset ( m [ \"id\" ], delete_contents = True , not_found_ok = True ) logger . info ( \" {object} {object_id} _ {mode} was {action} !\" , object_id = self . dataset_id , mode = m [ \"mode\" ], object = \"Dataset\" , action = \"deleted\" , ) def update ( self , mode = \"all\" , location = None ): \"\"\"Update dataset description. Toogle mode to choose which dataset to update. Args: mode (str): Optional. Which dataset to update [prod|staging|all] location (str): Optional. Location of dataset data. List of possible region names locations: https://cloud.google.com/bigquery/docs/locations \"\"\" for m in self . _loop_modes ( mode ): # Send the dataset to the API to update, with an explicit timeout. # Raises google.api_core.exceptions.Conflict if the Dataset already # exists within the project. m [ \"client\" ] . update_dataset ( self . _setup_dataset_object ( m [ \"id\" ], location = location , mode = m [ \"mode\" ]), fields = [ \"description\" ], ) # Make an API request. logger . success ( \" {object} {object_id} _ {mode} was {action} !\" , object_id = self . dataset_id , mode = m [ \"mode\" ], object = \"Dataset\" , action = \"updated\" , ) dataset_config property readonly Dataset config file. create ( self , mode = 'all' , if_exists = 'raise' , dataset_is_public = True , location = None ) Creates BigQuery datasets given dataset_id . It can create two datasets: <dataset_id> (mode = 'prod') <dataset_id>_staging (mode = 'staging') If mode is all, it creates both. Parameters: Name Type Description Default mode str Optional. Which dataset to create [prod|staging|all]. 'all' if_exists str Optional. What to do if dataset exists raise : Raises Conflict exception replace : Drop all tables and replace dataset update : Update dataset description pass : Do nothing 'raise' dataset_is_public bool Control if prod dataset is public or not. By default staging datasets like dataset_id_staging are not public. True location str Optional. Location of dataset data. List of possible region names locations: https://cloud.google.com/bigquery/docs/locations None Exceptions: Type Description Warning Dataset already exists and if_exists is set to raise Source code in basedosdados/upload/dataset.py def create ( self , mode = \"all\" , if_exists = \"raise\" , dataset_is_public = True , location = None ): \"\"\"Creates BigQuery datasets given `dataset_id`. It can create two datasets: * `<dataset_id>` (mode = 'prod') * `<dataset_id>_staging` (mode = 'staging') If `mode` is all, it creates both. Args: mode (str): Optional. Which dataset to create [prod|staging|all]. if_exists (str): Optional. What to do if dataset exists * raise : Raises Conflict exception * replace : Drop all tables and replace dataset * update : Update dataset description * pass : Do nothing dataset_is_public (bool): Control if prod dataset is public or not. By default staging datasets like `dataset_id_staging` are not public. location (str): Optional. Location of dataset data. List of possible region names locations: https://cloud.google.com/bigquery/docs/locations Raises: Warning: Dataset already exists and if_exists is set to `raise` \"\"\" # Set dataset_id to the ID of the dataset to create. for m in self . _loop_modes ( mode ): if if_exists == \"replace\" : self . delete ( mode = m [ \"mode\" ]) elif if_exists == \"update\" : self . update ( mode = m [ \"mode\" ]) continue # Send the dataset to the API for creation, with an explicit timeout. # Raises google.api_core.exceptions.Conflict if the Dataset already # exists within the project. try : if not self . exists ( mode = m [ \"mode\" ]): # Construct a full Dataset object to send to the API. dataset_obj = self . _setup_dataset_object ( dataset_id = m [ \"id\" ], location = location , mode = m [ \"mode\" ] ) m [ \"client\" ] . create_dataset ( dataset_obj ) # Make an API request. logger . success ( \" {object} {object_id} _ {mode} was {action} !\" , object_id = self . dataset_id , mode = m [ \"mode\" ], object = \"Dataset\" , action = \"created\" , ) # Make prod dataset public self . publicize ( dataset_is_public = dataset_is_public , mode = m [ \"mode\" ]) except Conflict as e : if if_exists == \"pass\" : continue raise Conflict ( f \"Dataset { self . dataset_id } already exists\" ) from e delete ( self , mode = 'all' ) Deletes dataset in BigQuery. Toogle mode to choose which dataset to delete. Parameters: Name Type Description Default mode str Optional. Which dataset to delete [prod|staging|all] 'all' Source code in basedosdados/upload/dataset.py def delete ( self , mode = \"all\" ): \"\"\"Deletes dataset in BigQuery. Toogle mode to choose which dataset to delete. Args: mode (str): Optional. Which dataset to delete [prod|staging|all] \"\"\" for m in self . _loop_modes ( mode ): m [ \"client\" ] . delete_dataset ( m [ \"id\" ], delete_contents = True , not_found_ok = True ) logger . info ( \" {object} {object_id} _ {mode} was {action} !\" , object_id = self . dataset_id , mode = m [ \"mode\" ], object = \"Dataset\" , action = \"deleted\" , ) exists ( self , mode = 'staging' ) Check if dataset exists. Source code in basedosdados/upload/dataset.py def exists ( self , mode = \"staging\" ): \"\"\" Check if dataset exists. \"\"\" ref_dataset_id = ( self . dataset_id if mode == \"prod\" else self . dataset_id + \"_staging\" ) try : ref = self . client [ f \"bigquery_ { mode } \" ] . get_dataset ( ref_dataset_id ) except Exception : ref = None return bool ( ref ) publicize ( self , mode = 'all' , dataset_is_public = True ) Changes IAM configuration to turn BigQuery dataset public. Parameters: Name Type Description Default mode bool Which dataset to create [prod|staging|all]. 'all' dataset_is_public bool Control if prod dataset is public or not. By default staging datasets like dataset_id_staging are not public. True Source code in basedosdados/upload/dataset.py def publicize ( self , mode = \"all\" , dataset_is_public = True ): \"\"\"Changes IAM configuration to turn BigQuery dataset public. Args: mode (bool): Which dataset to create [prod|staging|all]. dataset_is_public (bool): Control if prod dataset is public or not. By default staging datasets like `dataset_id_staging` are not public. \"\"\" for m in self . _loop_modes ( mode ): dataset = m [ \"client\" ] . get_dataset ( m [ \"id\" ]) entries = dataset . access_entries # TODO https://github.com/basedosdados/mais/pull/1020 # TODO if staging dataset is private, the prod view can't acess it: if dataset_is_public and \"staging\" not in dataset.dataset_id: if dataset_is_public : if \"staging\" not in dataset . dataset_id : entries . extend ( [ bigquery . AccessEntry ( role = \"roles/bigquery.dataViewer\" , entity_type = \"iamMember\" , entity_id = \"allUsers\" , ), bigquery . AccessEntry ( role = \"roles/bigquery.metadataViewer\" , entity_type = \"iamMember\" , entity_id = \"allUsers\" , ), bigquery . AccessEntry ( role = \"roles/bigquery.user\" , entity_type = \"iamMember\" , entity_id = \"allUsers\" , ), ] ) else : entries . extend ( [ bigquery . AccessEntry ( role = \"roles/bigquery.dataViewer\" , entity_type = \"iamMember\" , entity_id = \"allUsers\" , ), ] ) dataset . access_entries = entries m [ \"client\" ] . update_dataset ( dataset , [ \"access_entries\" ]) logger . success ( \" {object} {object_id} _ {mode} was {action} !\" , object_id = self . dataset_id , mode = m [ \"mode\" ], object = \"Dataset\" , action = \"publicized\" , ) update ( self , mode = 'all' , location = None ) Update dataset description. Toogle mode to choose which dataset to update. Parameters: Name Type Description Default mode str Optional. Which dataset to update [prod|staging|all] 'all' location str Optional. Location of dataset data. List of possible region names locations: https://cloud.google.com/bigquery/docs/locations None Source code in basedosdados/upload/dataset.py def update ( self , mode = \"all\" , location = None ): \"\"\"Update dataset description. Toogle mode to choose which dataset to update. Args: mode (str): Optional. Which dataset to update [prod|staging|all] location (str): Optional. Location of dataset data. List of possible region names locations: https://cloud.google.com/bigquery/docs/locations \"\"\" for m in self . _loop_modes ( mode ): # Send the dataset to the API to update, with an explicit timeout. # Raises google.api_core.exceptions.Conflict if the Dataset already # exists within the project. m [ \"client\" ] . update_dataset ( self . _setup_dataset_object ( m [ \"id\" ], location = location , mode = m [ \"mode\" ]), fields = [ \"description\" ], ) # Make an API request. logger . success ( \" {object} {object_id} _ {mode} was {action} !\" , object_id = self . dataset_id , mode = m [ \"mode\" ], object = \"Dataset\" , action = \"updated\" , ) Class for manage tables in Storage and Big Query Table ( Base ) Manage tables in Google Cloud Storage and BigQuery. Source code in basedosdados/upload/table.py class Table ( Base ): \"\"\" Manage tables in Google Cloud Storage and BigQuery. \"\"\" def __init__ ( self , dataset_id , table_id , ** kwargs ): super () . __init__ ( ** kwargs ) self . table_id = table_id . replace ( \"-\" , \"_\" ) self . dataset_id = dataset_id . replace ( \"-\" , \"_\" ) self . table_full_name = dict ( prod = f \" { self . client [ 'bigquery_prod' ] . project } . { self . dataset_id } . { self . table_id } \" , staging = f \" { self . client [ 'bigquery_staging' ] . project } . { self . dataset_id } _staging. { self . table_id } \" , ) self . table_full_name . update ( dict ( all = deepcopy ( self . table_full_name ))) @property @lru_cache ( 256 ) def table_config ( self ): \"\"\" Load table config \"\"\" # return self._load_yaml(self.table_folder / \"table_config.yaml\") return self . backend . get_table_config ( self . dataset_id , self . table_id ) def _get_table_obj ( self , mode ): \"\"\" Get table object from BigQuery \"\"\" return self . client [ f \"bigquery_ { mode } \" ] . get_table ( self . table_full_name [ mode ]) def _is_partitioned ( self , data_sample_path = None , source_format = None , csv_delimiter = None ): if data_sample_path is not None : table_columns = self . _get_columns_from_data ( data_sample_path = data_sample_path , source_format = source_format , csv_delimiter = csv_delimiter , mode = \"staging\" , ) else : table_columns = self . _get_columns_metadata_from_api () return bool ( table_columns . get ( \"partition_columns\" , [])) def _load_schema_from_json ( self , columns = None , ): schema = [] for col in columns : # ref: https://cloud.google.com/python/docs/reference/bigquery/latest/google.cloud.bigquery.schema.SchemaField if col . get ( \"name\" ) is None : msg = \"Columns must have a name! Check your data files for columns without name\" raise BaseDosDadosException ( msg ) schema . append ( SchemaField ( name = col . get ( \"name\" ), field_type = col . get ( \"type\" ), description = col . get ( \"description\" , None ), ) ) return schema def _load_staging_schema_from_data ( self , data_sample_path = None , source_format = \"csv\" , csv_delimiter = \",\" ): \"\"\" Generate schema from columns metadata in data sample \"\"\" if self . table_exists ( mode = \"staging\" ): logger . warning ( \" {object} {object_id} allready exists, replacing schema!\" , object_id = self . table_id , object = \"Table\" , ) table_columns = self . _get_columns_from_data ( data_sample_path = data_sample_path , source_format = source_format , csv_delimiter = csv_delimiter , mode = \"staging\" , ) return self . _load_schema_from_json ( columns = table_columns . get ( \"columns\" )) def _load_schema_from_bq ( self , mode = \"staging\" ): \"\"\"Load schema from table config Args: mode (bool): Which dataset to create [prod|staging]. \"\"\" table_columns = self . _get_columns_from_bq () columns = table_columns . get ( \"partition_columns\" ) + table_columns . get ( \"columns\" ) return self . _load_schema_from_json ( columns = columns ) def _load_schema_from_api ( self , mode = \"staging\" ): \"\"\"Load schema from table config Args: mode (bool): Which dataset to create [prod|staging]. \"\"\" if self . table_exists ( mode = mode ): logger . warning ( \" {object} {object_id} allready exists, replacing schema!\" , object_id = self . table_id , object = \"Table\" , ) table_columns = self . _get_columns_metadata_from_api () columns = table_columns . get ( \"partition_columns\" ) + table_columns . get ( \"columns\" ) return self . _load_schema_from_json ( columns = columns ) def _get_columns_from_data ( self , data_sample_path = None , source_format = \"csv\" , csv_delimiter = \",\" , mode = \"staging\" , ): # sourcery skip: low-code-quality \"\"\" Get the partition columns from the structure of data_sample_path. Args: data_sample_path (str, pathlib.PosixPath): Optional. Data sample path to auto complete columns names It supports Comma Delimited CSV, Apache Avro and Apache Parquet. source_format (str): Optional Data source format. Only 'csv', 'avro' and 'parquet' are supported. Defaults to 'csv'. \"\"\" partition_columns = [] if isinstance ( data_sample_path , ( str , Path , ), ): # Check if partitioned and get data sample and partition columns data_sample_path = Path ( data_sample_path ) if data_sample_path . is_dir (): data_sample_path = [ f for f in data_sample_path . glob ( \"**/*\" ) if f . is_file () and f . suffix == f \". { source_format } \" ][ 0 ] partition_columns = [ k . split ( \"=\" )[ 0 ] for k in data_sample_path . as_posix () . split ( \"/\" ) if \"=\" in k ] columns = Datatype ( source_format = source_format ) . header ( data_sample_path = data_sample_path , csv_delimiter = csv_delimiter ) return { \"columns\" : [{ \"name\" : col , \"type\" : \"STRING\" } for col in columns ], \"partition_columns\" : [ { \"name\" : col , \"type\" : \"STRING\" } for col in partition_columns ], } def _get_columns_metadata_from_api ( self , ): \"\"\" Get columns and partition columns from API. \"\"\" table_columns = self . table_config . get ( \"columns\" , {}) columns = [ col for col in table_columns if col . get ( \"isPartition\" , {}) is False ] partition_columns = [ col for col in table_columns if col . get ( \"isPartition\" , {}) is True ] return { \"columns\" : [ { \"name\" : col . get ( \"name\" ), \"type\" : col . get ( \"bigqueryType\" ) . get ( \"name\" ), \"description\" : col . get ( \"descriptionPt\" ), } for col in columns ], \"partition_columns\" : [ { \"name\" : col . get ( \"name\" ), \"type\" : col . get ( \"bigqueryType\" ) . get ( \"name\" ), \"description\" : col . get ( \"descriptionPt\" ), } for col in partition_columns ], } def _parser_blobs_to_partition_dict ( self ) -> dict : \"\"\" Extracts the partition information from the blobs. \"\"\" if not self . table_exists ( mode = \"staging\" ): return blobs = ( self . client [ \"storage_staging\" ] . bucket ( self . bucket_name ) . list_blobs ( prefix = f \"staging/ { self . dataset_id } / { self . table_id } /\" ) ) partitions_dict = {} # only needs the first bloob for blob in blobs : for folder in blob . name . split ( \"/\" ): if \"=\" in folder : key = folder . split ( \"=\" )[ 0 ] value = folder . split ( \"=\" ) try : partitions_dict [ key ] . append ( value ) except KeyError : partitions_dict [ key ] = [ value ] return partitions_dict def _get_columns_from_bq ( self , mode = \"staging\" ): if not self . table_exists ( mode = mode ): msg = f \"Table { self . dataset_id } . { self . table_id } does not exist in { mode } , please create first!\" raise logger . error ( msg ) else : schema = self . _get_table_obj ( mode = mode ) . schema partition_dict = self . _parser_blobs_to_partition_dict () if partition_dict : partition_columns = list ( partition_dict . keys ()) else : partition_columns = [] return { \"columns\" : [ { \"name\" : col . name , \"type\" : col . field_type , \"description\" : col . description , } for col in schema if col . name not in partition_columns ], \"partition_columns\" : [ { \"name\" : col . name , \"type\" : col . field_type , \"description\" : col . description , } for col in schema if col . name in partition_columns ], } def _get_cross_columns_from_bq_api ( self ): bq = self . _get_columns_from_bq ( mode = \"staging\" ) bq_columns = bq . get ( \"partition_columns\" ) + bq . get ( \"columns\" ) api = self . _get_columns_metadata_from_api () api_columns = api . get ( \"partition_columns\" ) + api . get ( \"columns\" ) if api_columns != []: for bq_col in bq_columns : for api_col in api_columns : if bq_col . get ( \"name\" ) == api_col . get ( \"name\" ): bq_col [ \"type\" ] = api_col . get ( \"type\" ) bq_col [ \"description\" ] = api_col . get ( \"description\" ) return bq_columns def _make_publish_sql ( self ): \"\"\"Create publish.sql with columns and bigquery_type\"\"\" # publish.sql header and instructions publish_txt = \"\"\" /* Query para publicar a tabela. Esse \u00e9 o lugar para: - modificar nomes, ordem e tipos de colunas - dar join com outras tabelas - criar colunas extras (e.g. logs, propor\u00e7\u00f5es, etc.) Qualquer coluna definida aqui deve tamb\u00e9m existir em `table_config.yaml`. # Al\u00e9m disso, sinta-se \u00e0 vontade para alterar alguns nomes obscuros # para algo um pouco mais expl\u00edcito. TIPOS: - Para modificar tipos de colunas, basta substituir STRING por outro tipo v\u00e1lido. - Exemplo: `SAFE_CAST(column_name AS NUMERIC) column_name` - Mais detalhes: https://cloud.google.com/bigquery/docs/reference/standard-sql/data-types */ \"\"\" # table_columns = self._get_columns_from_api(mode=\"staging\") columns = self . _get_cross_columns_from_bq_api () # remove triple quotes extra space publish_txt = inspect . cleandoc ( publish_txt ) publish_txt = textwrap . dedent ( publish_txt ) # add create table statement project_id_prod = self . client [ \"bigquery_prod\" ] . project publish_txt += f \" \\n\\n CREATE OR REPLACE VIEW { project_id_prod } . { self . dataset_id } . { self . table_id } AS \\n SELECT \\n \" # sort columns by is_partition, partitions_columns come first # add columns in publish.sql for col in columns : name = col . get ( \"name\" ) bigquery_type = ( \"STRING\" if col . get ( \"type\" ) is None else col . get ( \"type\" ) . upper () ) publish_txt += f \"SAFE_CAST( { name } AS { bigquery_type } ) { name } , \\n \" # remove last comma publish_txt = publish_txt [: - 2 ] + \" \\n \" # add from statement project_id_staging = self . client [ \"bigquery_staging\" ] . project publish_txt += ( f \"FROM { project_id_staging } . { self . dataset_id } _staging. { self . table_id } AS t\" ) return publish_txt def table_exists ( self , mode ): \"\"\"Check if table exists in BigQuery. Args: mode (str): Which dataset to check [prod|staging]. \"\"\" try : ref = self . _get_table_obj ( mode = mode ) except google . api_core . exceptions . NotFound : ref = None return bool ( ref ) def _get_biglake_connection ( self , set_biglake_connection_permissions = True , location = None , mode = \"staging\" ): connection = Connection ( name = \"biglake\" , location = location , mode = \"staging\" ) if not connection . exists : try : logger . info ( \"Creating BigLake connection...\" ) connection . create () logger . success ( \"BigLake connection created!\" ) except google . api_core . exceptions . Forbidden as exc : logger . error ( \"You don't have permission to create a BigLake connection. \" \"Please contact an admin to create one for you.\" ) raise BaseDosDadosException ( \"You don't have permission to create a BigLake connection. \" \"Please contact an admin to create one for you.\" ) from exc except Exception as exc : logger . error ( \"Something went wrong while creating the BigLake connection. \" \"Please contact an admin to create one for you.\" ) raise BaseDosDadosException ( \"Something went wrong while creating the BigLake connection. \" \"Please contact an admin to create one for you.\" ) from exc if set_biglake_connection_permissions : try : logger . info ( \"Setting permissions for BigLake service account...\" ) connection . set_biglake_permissions () logger . success ( \"Permissions set successfully!\" ) except google . api_core . exceptions . Forbidden as exc : logger . error ( \"Could not set permissions for BigLake service account. \" \"Please make sure you have permissions to grant roles/storage.objectViewer\" f \" to the BigLake service account. ( { connection . service_account } ).\" \" If you don't, please ask an admin to do it for you or set \" \"set_biglake_connection_permissions=False.\" ) raise BaseDosDadosException ( \"Could not set permissions for BigLake service account. \" \"Please make sure you have permissions to grant roles/storage.objectViewer\" f \" to the BigLake service account. ( { connection . service_account } ).\" \" If you don't, please ask an admin to do it for you or set \" \"set_biglake_connection_permissions=False.\" ) from exc except Exception as exc : logger . error ( \"Something went wrong while setting permissions for BigLake service account. \" \"Please make sure you have permissions to grant roles/storage.objectViewer\" f \" to the BigLake service account. ( { connection . service_account } ).\" \" If you don't, please ask an admin to do it for you or set \" \"set_biglake_connection_permissions=False.\" ) raise BaseDosDadosException ( \"Something went wrong while setting permissions for BigLake service account. \" \"Please make sure you have permissions to grant roles/storage.objectViewer\" f \" to the BigLake service account. ( { connection . service_account } ).\" \" If you don't, please ask an admin to do it for you or set \" \"set_biglake_connection_permissions=False.\" ) from exc return connection def _get_table_description ( self , mode = \"staging\" ): \"\"\"Adds table description to BigQuery table. Args: table_obj (google.cloud.bigquery.table.Table): Table object. mode (str): Which dataset to check [prod|staging]. \"\"\" table_path = self . table_full_name [ \"prod\" ] if mode == \"staging\" : description = f \"staging table for ` { table_path } `\" else : try : description = self . table_config . get ( \"descriptionPt\" , \"\" ) except BaseException : logger . warning ( f \"table { self . table_id } does not have a description in the API.\" ) description = \"description not available in the API.\" return description def create ( self , path = None , source_format = \"csv\" , csv_delimiter = \",\" , csv_skip_leading_rows = 1 , csv_allow_jagged_rows = False , if_table_exists = \"raise\" , if_storage_data_exists = \"raise\" , if_dataset_exists = \"pass\" , dataset_is_public = True , location = None , chunk_size = None , biglake_table = False , set_biglake_connection_permissions = True , ): \"\"\"Creates a BigQuery table in the staging dataset. If a path is provided, data is automatically saved in storage, and a datasets folder and BigQuery location are created, in addition to creating the table and its configuration files. The new table is located at `<dataset_id>_staging.<table_id>` in BigQuery. Data can be found in Storage at `<bucket_name>/staging/<dataset_id>/<table_id>/*` and is used to build the table. The following data types are supported: - Comma-Delimited CSV - Apache Avro - Apache Parquet Data can also be partitioned following the Hive partitioning scheme `<key1>=<value1>/<key2>=<value2>`; for example, `year=2012/country=BR`. The partition is automatically detected by searching for `partitions` in the `table_config.yaml` file. Args: path (str or pathlib.PosixPath): The path to the file to be uploaded to create the table. source_format (str): Optional. The format of the data source. Only 'csv', 'avro', and 'parquet' are supported. Defaults to 'csv'. csv_delimiter (str): Optional. The separator for fields in a CSV file. The separator can be any ISO-8859-1 single-byte character. Defaults to ','. csv_skip_leading_rows(int): Optional. The number of rows at the top of a CSV file that BigQuery will skip when loading the data. Defaults to 1. csv_allow_jagged_rows (bool): Optional. Indicates if BigQuery should allow extra values that are not represented in the table schema. Defaults to False. if_table_exists (str): Optional. Determines what to do if the table already exists: * 'raise' : Raises a Conflict exception * 'replace' : Replaces the table * 'pass' : Does nothing if_storage_data_exists (str): Optional. Determines what to do if the data already exists on your bucket: * 'raise' : Raises a Conflict exception * 'replace' : Replaces the table * 'pass' : Does nothing if_dataset_exists (str): Optional. Determines what to do if the dataset already exists: * 'raise' : Raises a Conflict exception * 'replace' : Replaces the dataset * 'pass' : Does nothing dataset_is_public (bool): Optional. Controls if the prod dataset is public or not. By default, staging datasets like `dataset_id_staging` are not public. location (str): Optional. The location of the dataset data. List of possible region names locations: https://cloud.google.com/bigquery/docs/locations chunk_size (int): Optional. The size of a chunk of data whenever iterating (in bytes). This must be a multiple of 256 KB per the API specification. If not specified, the chunk_size of the blob itself is used. If that is not specified, a default value of 40 MB is used. biglake_table (bool): Optional. Sets this as a BigLake table. BigLake tables allow end-users to query from external data (such as GCS) even if they don't have access to the source data. IAM is managed like any other BigQuery native table. See https://cloud.google.com/bigquery/docs/biglake-intro for more on BigLake. set_biglake_connection_permissions (bool): Optional. If set to `True`, attempts to grant the BigLake connection service account access to the table's data in GCS. \"\"\" if path is None : # Look if table data already exists at Storage data = self . client [ \"storage_staging\" ] . list_blobs ( self . bucket_name , prefix = f \"staging/ { self . dataset_id } / { self . table_id } \" ) # Raise: Cannot create table without external data if not data : raise BaseDosDadosException ( \"You must provide a path for uploading data\" ) # Add data to storage if isinstance ( path , ( str , Path , ), ): Storage ( dataset_id = self . dataset_id , table_id = self . table_id , config_path = self . config_path , bucket_name = self . bucket_name , ) . upload ( path = path , mode = \"staging\" , if_exists = if_storage_data_exists , chunk_size = chunk_size , ) # Create Dataset if it doesn't exist dataset_obj = Dataset ( self . dataset_id , ) dataset_obj . create ( if_exists = if_dataset_exists , mode = \"all\" , location = location , dataset_is_public = dataset_is_public , ) if biglake_table : biglake_connection = self . _get_biglake_connection ( set_biglake_connection_permissions = set_biglake_connection_permissions , location = location , mode = \"staging\" , ) biglake_connection_id = biglake_connection . connection_id table = bigquery . Table ( self . table_full_name [ \"staging\" ]) table . description = self . _get_table_description ( mode = \"staging\" ) table . external_data_configuration = Datatype ( dataset_id = self . dataset_id , table_id = self . table_id , schema = self . _load_staging_schema_from_data ( data_sample_path = path , source_format = source_format , csv_delimiter = csv_delimiter , ), source_format = source_format , csv_skip_leading_rows = csv_skip_leading_rows , csv_delimiter = csv_delimiter , csv_allow_jagged_rows = csv_allow_jagged_rows , mode = \"staging\" , bucket_name = self . bucket_name , partitioned = self . _is_partitioned ( data_sample_path = path , source_format = source_format , csv_delimiter = csv_delimiter , ), biglake_connection_id = biglake_connection_id if biglake_table else None , ) . external_config # When using BigLake tables, schema must be provided to the `Table` object if biglake_table : table . schema = self . _load_staging_schema_from_data ( data_sample_path = path , source_format = source_format , csv_delimiter = csv_delimiter , ) logger . info ( f \"Using BigLake connection { biglake_connection_id } \" ) # Lookup if table alreay exists table_ref = None with contextlib . suppress ( google . api_core . exceptions . NotFound ): table_ref = self . client [ \"bigquery_staging\" ] . get_table ( self . table_full_name [ \"staging\" ] ) if isinstance ( table_ref , google . cloud . bigquery . table . Table ): if if_table_exists == \"pass\" : return None if if_table_exists == \"raise\" : raise FileExistsError ( \"Table already exists, choose replace if you want to overwrite it\" ) if if_table_exists == \"replace\" and self . table_exists ( mode = \"staging\" ): self . delete ( mode = \"staging\" ) try : self . client [ \"bigquery_staging\" ] . create_table ( table ) except google . api_core . exceptions . Forbidden as exc : if biglake_table : raise BaseDosDadosException ( \"Permission denied. The service account used to create the BigLake connection\" \" does not have permission to read data from the source bucket. Please grant\" f \" the service account { biglake_connection . service_account } the Storage Object Viewer\" \" (roles/storage.objectViewer) role on the source bucket (or on the project).\" \" Or, you can try running this again with set_biglake_connection_permissions=True.\" ) from exc raise BaseDosDadosException ( \"Something went wrong when creating the table. Please check the logs for more information.\" ) from exc except Exception as exc : raise BaseDosDadosException ( \"Something went wrong when creating the table. Please check the logs for more information.\" ) from exc logger . success ( \" {object} {object_id} was {action} in {mode} !\" , object_id = self . table_id , mode = \"staging\" , object = \"Table\" , action = \"created\" , ) # return None def update ( self , mode = \"prod\" , custom_schema = None ): \"\"\"Updates BigQuery schema and description. Args: mode (str): Optional. Table of which table to update [prod] not_found_ok (bool): Optional. What to do if table is not found \"\"\" self . _check_mode ( mode ) table = self . _get_table_obj ( mode ) table . description = self . _get_table_description () # when mode is staging the table schema already exists if mode == \"prod\" and custom_schema is None : table . schema = self . _load_schema_from_json ( columns = self . _get_cross_columns_from_bq_api () ) if mode == \"prod\" and custom_schema is not None : table . schema = self . _load_schema_from_json ( custom_schema ) fields = [ \"description\" , \"schema\" ] self . client [ \"bigquery_prod\" ] . update_table ( table , fields = fields ) logger . success ( \" {object} {object_id} was {action} in {mode} !\" , object_id = self . table_id , mode = mode , object = \"Table\" , action = \"updated\" , ) def publish ( self , if_exists = \"raise\" , custon_publish_sql = None , custom_schema = None ): \"\"\"Creates BigQuery table at production dataset. Table should be located at `<dataset_id>.<table_id>`. It creates a view that uses the query from `<metadata_path>/<dataset_id>/<table_id>/publish.sql`. Make sure that all columns from the query also exists at `<metadata_path>/<dataset_id>/<table_id>/table_config.sql`, including the partitions. Args: if_exists (str): Optional. What to do if table exists. * 'raise' : Raises Conflict exception * 'replace' : Replace table * 'pass' : Do nothing Todo: * Check if all required fields are filled \"\"\" # TODO: review this method if if_exists == \"replace\" and self . table_exists ( mode = \"prod\" ): self . delete ( mode = \"prod\" ) publish_sql = self . _make_publish_sql () # create view using API metadata if custon_publish_sql is None : self . client [ \"bigquery_prod\" ] . query ( publish_sql ) . result () self . update ( mode = \"prod\" ) # create view using custon query if custon_publish_sql is not None : self . client [ \"bigquery_prod\" ] . query ( custon_publish_sql ) . result () # update schema using a custom schema if custom_schema is not None : self . update ( custom_schema = custom_schema ) logger . success ( \" {object} {object_id} was {action} !\" , object_id = self . table_id , object = \"Table\" , action = \"published\" , ) def delete ( self , mode = \"all\" ): \"\"\"Deletes table in BigQuery. Args: mode (str): Table of which table to delete [prod|staging] \"\"\" self . _check_mode ( mode ) if mode == \"all\" : for m , n in self . table_full_name [ mode ] . items (): self . client [ f \"bigquery_ { m } \" ] . delete_table ( n , not_found_ok = True ) logger . info ( \" {object} {object_id} _ {mode} was {action} !\" , object_id = self . table_id , mode = m , object = \"Table\" , action = \"deleted\" , ) else : self . client [ f \"bigquery_ { mode } \" ] . delete_table ( self . table_full_name [ mode ], not_found_ok = True ) logger . info ( \" {object} {object_id} _ {mode} was {action} !\" , object_id = self . table_id , mode = mode , object = \"Table\" , action = \"deleted\" , ) def append ( self , filepath , partitions = None , if_exists = \"replace\" , chunk_size = None , ** upload_args , ): \"\"\"Appends new data to existing BigQuery table. As long as the data has the same schema. It appends the data in the filepath to the existing table. Args: filepath (str or pathlib.PosixPath): Where to find the file that you want to upload to create a table with partitions (str, pathlib.PosixPath, dict): Optional. Hive structured partition as a string or dict * str : `<key>=<value>/<key2>=<value2>` * dict: `dict(key=value, key2=value2)` if_exists (str): 0ptional. What to do if data with same name exists in storage * 'raise' : Raises Conflict exception * 'replace' : Replace table * 'pass' : Do nothing chunk_size (int): Optional The size of a chunk of data whenever iterating (in bytes). This must be a multiple of 256 KB per the API specification. If not specified, the chunk_size of the blob itself is used. If that is not specified, a default value of 40 MB is used. \"\"\" if not self . table_exists ( \"staging\" ): raise BaseDosDadosException ( \"You cannot append to a table that does not exist\" ) Storage ( self . dataset_id , self . table_id , ) . upload ( filepath , mode = \"staging\" , partitions = partitions , if_exists = if_exists , chunk_size = chunk_size , ** upload_args , ) logger . success ( \" {object} {object_id} was {action} !\" , object_id = self . table_id , object = \"Table\" , action = \"appended\" , ) table_config property readonly Load table config append ( self , filepath , partitions = None , if_exists = 'replace' , chunk_size = None , ** upload_args ) Appends new data to existing BigQuery table. As long as the data has the same schema. It appends the data in the filepath to the existing table. Parameters: Name Type Description Default filepath str or pathlib.PosixPath Where to find the file that you want to upload to create a table with required partitions str, pathlib.PosixPath, dict Optional. Hive structured partition as a string or dict str : <key>=<value>/<key2>=<value2> dict: dict(key=value, key2=value2) None if_exists str 0ptional. What to do if data with same name exists in storage 'raise' : Raises Conflict exception 'replace' : Replace table 'pass' : Do nothing 'replace' chunk_size int Optional The size of a chunk of data whenever iterating (in bytes). This must be a multiple of 256 KB per the API specification. If not specified, the chunk_size of the blob itself is used. If that is not specified, a default value of 40 MB is used. None Source code in basedosdados/upload/table.py def append ( self , filepath , partitions = None , if_exists = \"replace\" , chunk_size = None , ** upload_args , ): \"\"\"Appends new data to existing BigQuery table. As long as the data has the same schema. It appends the data in the filepath to the existing table. Args: filepath (str or pathlib.PosixPath): Where to find the file that you want to upload to create a table with partitions (str, pathlib.PosixPath, dict): Optional. Hive structured partition as a string or dict * str : `<key>=<value>/<key2>=<value2>` * dict: `dict(key=value, key2=value2)` if_exists (str): 0ptional. What to do if data with same name exists in storage * 'raise' : Raises Conflict exception * 'replace' : Replace table * 'pass' : Do nothing chunk_size (int): Optional The size of a chunk of data whenever iterating (in bytes). This must be a multiple of 256 KB per the API specification. If not specified, the chunk_size of the blob itself is used. If that is not specified, a default value of 40 MB is used. \"\"\" if not self . table_exists ( \"staging\" ): raise BaseDosDadosException ( \"You cannot append to a table that does not exist\" ) Storage ( self . dataset_id , self . table_id , ) . upload ( filepath , mode = \"staging\" , partitions = partitions , if_exists = if_exists , chunk_size = chunk_size , ** upload_args , ) logger . success ( \" {object} {object_id} was {action} !\" , object_id = self . table_id , object = \"Table\" , action = \"appended\" , ) create ( self , path = None , source_format = 'csv' , csv_delimiter = ',' , csv_skip_leading_rows = 1 , csv_allow_jagged_rows = False , if_table_exists = 'raise' , if_storage_data_exists = 'raise' , if_dataset_exists = 'pass' , dataset_is_public = True , location = None , chunk_size = None , biglake_table = False , set_biglake_connection_permissions = True ) Creates a BigQuery table in the staging dataset. If a path is provided, data is automatically saved in storage, and a datasets folder and BigQuery location are created, in addition to creating the table and its configuration files. The new table is located at <dataset_id>_staging.<table_id> in BigQuery. Data can be found in Storage at <bucket_name>/staging/<dataset_id>/<table_id>/* and is used to build the table. The following data types are supported: Comma-Delimited CSV Apache Avro Apache Parquet Data can also be partitioned following the Hive partitioning scheme <key1>=<value1>/<key2>=<value2> ; for example, year=2012/country=BR . The partition is automatically detected by searching for partitions in the table_config.yaml file. Parameters: Name Type Description Default path str or pathlib.PosixPath The path to the file to be uploaded to create the table. None source_format str Optional. The format of the data source. Only 'csv', 'avro', and 'parquet' are supported. Defaults to 'csv'. 'csv' csv_delimiter str Optional. The separator for fields in a CSV file. The separator can be any ISO-8859-1 single-byte character. Defaults to ','. ',' csv_skip_leading_rows(int) Optional. The number of rows at the top of a CSV file that BigQuery will skip when loading the data. Defaults to 1. required csv_allow_jagged_rows bool Optional. Indicates if BigQuery should allow extra values that are not represented in the table schema. Defaults to False. False if_table_exists str Optional. Determines what to do if the table already exists: 'raise' : Raises a Conflict exception 'replace' : Replaces the table 'pass' : Does nothing 'raise' if_storage_data_exists str Optional. Determines what to do if the data already exists on your bucket: 'raise' : Raises a Conflict exception 'replace' : Replaces the table 'pass' : Does nothing 'raise' if_dataset_exists str Optional. Determines what to do if the dataset already exists: 'raise' : Raises a Conflict exception 'replace' : Replaces the dataset 'pass' : Does nothing 'pass' dataset_is_public bool Optional. Controls if the prod dataset is public or not. By default, staging datasets like dataset_id_staging are not public. True location str Optional. The location of the dataset data. List of possible region names locations: https://cloud.google.com/bigquery/docs/locations None chunk_size int Optional. The size of a chunk of data whenever iterating (in bytes). This must be a multiple of 256 KB per the API specification. If not specified, the chunk_size of the blob itself is used. If that is not specified, a default value of 40 MB is used. None biglake_table bool Optional. Sets this as a BigLake table. BigLake tables allow end-users to query from external data (such as GCS) even if they don't have access to the source data. IAM is managed like any other BigQuery native table. See https://cloud.google.com/bigquery/docs/biglake-intro for more on BigLake. False set_biglake_connection_permissions bool Optional. If set to True , attempts to grant the BigLake connection service account access to the table's data in GCS. True Source code in basedosdados/upload/table.py def create ( self , path = None , source_format = \"csv\" , csv_delimiter = \",\" , csv_skip_leading_rows = 1 , csv_allow_jagged_rows = False , if_table_exists = \"raise\" , if_storage_data_exists = \"raise\" , if_dataset_exists = \"pass\" , dataset_is_public = True , location = None , chunk_size = None , biglake_table = False , set_biglake_connection_permissions = True , ): \"\"\"Creates a BigQuery table in the staging dataset. If a path is provided, data is automatically saved in storage, and a datasets folder and BigQuery location are created, in addition to creating the table and its configuration files. The new table is located at `<dataset_id>_staging.<table_id>` in BigQuery. Data can be found in Storage at `<bucket_name>/staging/<dataset_id>/<table_id>/*` and is used to build the table. The following data types are supported: - Comma-Delimited CSV - Apache Avro - Apache Parquet Data can also be partitioned following the Hive partitioning scheme `<key1>=<value1>/<key2>=<value2>`; for example, `year=2012/country=BR`. The partition is automatically detected by searching for `partitions` in the `table_config.yaml` file. Args: path (str or pathlib.PosixPath): The path to the file to be uploaded to create the table. source_format (str): Optional. The format of the data source. Only 'csv', 'avro', and 'parquet' are supported. Defaults to 'csv'. csv_delimiter (str): Optional. The separator for fields in a CSV file. The separator can be any ISO-8859-1 single-byte character. Defaults to ','. csv_skip_leading_rows(int): Optional. The number of rows at the top of a CSV file that BigQuery will skip when loading the data. Defaults to 1. csv_allow_jagged_rows (bool): Optional. Indicates if BigQuery should allow extra values that are not represented in the table schema. Defaults to False. if_table_exists (str): Optional. Determines what to do if the table already exists: * 'raise' : Raises a Conflict exception * 'replace' : Replaces the table * 'pass' : Does nothing if_storage_data_exists (str): Optional. Determines what to do if the data already exists on your bucket: * 'raise' : Raises a Conflict exception * 'replace' : Replaces the table * 'pass' : Does nothing if_dataset_exists (str): Optional. Determines what to do if the dataset already exists: * 'raise' : Raises a Conflict exception * 'replace' : Replaces the dataset * 'pass' : Does nothing dataset_is_public (bool): Optional. Controls if the prod dataset is public or not. By default, staging datasets like `dataset_id_staging` are not public. location (str): Optional. The location of the dataset data. List of possible region names locations: https://cloud.google.com/bigquery/docs/locations chunk_size (int): Optional. The size of a chunk of data whenever iterating (in bytes). This must be a multiple of 256 KB per the API specification. If not specified, the chunk_size of the blob itself is used. If that is not specified, a default value of 40 MB is used. biglake_table (bool): Optional. Sets this as a BigLake table. BigLake tables allow end-users to query from external data (such as GCS) even if they don't have access to the source data. IAM is managed like any other BigQuery native table. See https://cloud.google.com/bigquery/docs/biglake-intro for more on BigLake. set_biglake_connection_permissions (bool): Optional. If set to `True`, attempts to grant the BigLake connection service account access to the table's data in GCS. \"\"\" if path is None : # Look if table data already exists at Storage data = self . client [ \"storage_staging\" ] . list_blobs ( self . bucket_name , prefix = f \"staging/ { self . dataset_id } / { self . table_id } \" ) # Raise: Cannot create table without external data if not data : raise BaseDosDadosException ( \"You must provide a path for uploading data\" ) # Add data to storage if isinstance ( path , ( str , Path , ), ): Storage ( dataset_id = self . dataset_id , table_id = self . table_id , config_path = self . config_path , bucket_name = self . bucket_name , ) . upload ( path = path , mode = \"staging\" , if_exists = if_storage_data_exists , chunk_size = chunk_size , ) # Create Dataset if it doesn't exist dataset_obj = Dataset ( self . dataset_id , ) dataset_obj . create ( if_exists = if_dataset_exists , mode = \"all\" , location = location , dataset_is_public = dataset_is_public , ) if biglake_table : biglake_connection = self . _get_biglake_connection ( set_biglake_connection_permissions = set_biglake_connection_permissions , location = location , mode = \"staging\" , ) biglake_connection_id = biglake_connection . connection_id table = bigquery . Table ( self . table_full_name [ \"staging\" ]) table . description = self . _get_table_description ( mode = \"staging\" ) table . external_data_configuration = Datatype ( dataset_id = self . dataset_id , table_id = self . table_id , schema = self . _load_staging_schema_from_data ( data_sample_path = path , source_format = source_format , csv_delimiter = csv_delimiter , ), source_format = source_format , csv_skip_leading_rows = csv_skip_leading_rows , csv_delimiter = csv_delimiter , csv_allow_jagged_rows = csv_allow_jagged_rows , mode = \"staging\" , bucket_name = self . bucket_name , partitioned = self . _is_partitioned ( data_sample_path = path , source_format = source_format , csv_delimiter = csv_delimiter , ), biglake_connection_id = biglake_connection_id if biglake_table else None , ) . external_config # When using BigLake tables, schema must be provided to the `Table` object if biglake_table : table . schema = self . _load_staging_schema_from_data ( data_sample_path = path , source_format = source_format , csv_delimiter = csv_delimiter , ) logger . info ( f \"Using BigLake connection { biglake_connection_id } \" ) # Lookup if table alreay exists table_ref = None with contextlib . suppress ( google . api_core . exceptions . NotFound ): table_ref = self . client [ \"bigquery_staging\" ] . get_table ( self . table_full_name [ \"staging\" ] ) if isinstance ( table_ref , google . cloud . bigquery . table . Table ): if if_table_exists == \"pass\" : return None if if_table_exists == \"raise\" : raise FileExistsError ( \"Table already exists, choose replace if you want to overwrite it\" ) if if_table_exists == \"replace\" and self . table_exists ( mode = \"staging\" ): self . delete ( mode = \"staging\" ) try : self . client [ \"bigquery_staging\" ] . create_table ( table ) except google . api_core . exceptions . Forbidden as exc : if biglake_table : raise BaseDosDadosException ( \"Permission denied. The service account used to create the BigLake connection\" \" does not have permission to read data from the source bucket. Please grant\" f \" the service account { biglake_connection . service_account } the Storage Object Viewer\" \" (roles/storage.objectViewer) role on the source bucket (or on the project).\" \" Or, you can try running this again with set_biglake_connection_permissions=True.\" ) from exc raise BaseDosDadosException ( \"Something went wrong when creating the table. Please check the logs for more information.\" ) from exc except Exception as exc : raise BaseDosDadosException ( \"Something went wrong when creating the table. Please check the logs for more information.\" ) from exc logger . success ( \" {object} {object_id} was {action} in {mode} !\" , object_id = self . table_id , mode = \"staging\" , object = \"Table\" , action = \"created\" , ) # return None delete ( self , mode = 'all' ) Deletes table in BigQuery. Parameters: Name Type Description Default mode str Table of which table to delete [prod|staging] 'all' Source code in basedosdados/upload/table.py def delete ( self , mode = \"all\" ): \"\"\"Deletes table in BigQuery. Args: mode (str): Table of which table to delete [prod|staging] \"\"\" self . _check_mode ( mode ) if mode == \"all\" : for m , n in self . table_full_name [ mode ] . items (): self . client [ f \"bigquery_ { m } \" ] . delete_table ( n , not_found_ok = True ) logger . info ( \" {object} {object_id} _ {mode} was {action} !\" , object_id = self . table_id , mode = m , object = \"Table\" , action = \"deleted\" , ) else : self . client [ f \"bigquery_ { mode } \" ] . delete_table ( self . table_full_name [ mode ], not_found_ok = True ) logger . info ( \" {object} {object_id} _ {mode} was {action} !\" , object_id = self . table_id , mode = mode , object = \"Table\" , action = \"deleted\" , ) publish ( self , if_exists = 'raise' , custon_publish_sql = None , custom_schema = None ) Creates BigQuery table at production dataset. Table should be located at <dataset_id>.<table_id> . It creates a view that uses the query from <metadata_path>/<dataset_id>/<table_id>/publish.sql . Make sure that all columns from the query also exists at <metadata_path>/<dataset_id>/<table_id>/table_config.sql , including the partitions. Parameters: Name Type Description Default if_exists str Optional. What to do if table exists. 'raise' : Raises Conflict exception 'replace' : Replace table 'pass' : Do nothing 'raise' Todo: * Check if all required fields are filled Source code in basedosdados/upload/table.py def publish ( self , if_exists = \"raise\" , custon_publish_sql = None , custom_schema = None ): \"\"\"Creates BigQuery table at production dataset. Table should be located at `<dataset_id>.<table_id>`. It creates a view that uses the query from `<metadata_path>/<dataset_id>/<table_id>/publish.sql`. Make sure that all columns from the query also exists at `<metadata_path>/<dataset_id>/<table_id>/table_config.sql`, including the partitions. Args: if_exists (str): Optional. What to do if table exists. * 'raise' : Raises Conflict exception * 'replace' : Replace table * 'pass' : Do nothing Todo: * Check if all required fields are filled \"\"\" # TODO: review this method if if_exists == \"replace\" and self . table_exists ( mode = \"prod\" ): self . delete ( mode = \"prod\" ) publish_sql = self . _make_publish_sql () # create view using API metadata if custon_publish_sql is None : self . client [ \"bigquery_prod\" ] . query ( publish_sql ) . result () self . update ( mode = \"prod\" ) # create view using custon query if custon_publish_sql is not None : self . client [ \"bigquery_prod\" ] . query ( custon_publish_sql ) . result () # update schema using a custom schema if custom_schema is not None : self . update ( custom_schema = custom_schema ) logger . success ( \" {object} {object_id} was {action} !\" , object_id = self . table_id , object = \"Table\" , action = \"published\" , ) table_exists ( self , mode ) Check if table exists in BigQuery. Parameters: Name Type Description Default mode str Which dataset to check [prod|staging]. required Source code in basedosdados/upload/table.py def table_exists ( self , mode ): \"\"\"Check if table exists in BigQuery. Args: mode (str): Which dataset to check [prod|staging]. \"\"\" try : ref = self . _get_table_obj ( mode = mode ) except google . api_core . exceptions . NotFound : ref = None return bool ( ref ) update ( self , mode = 'prod' , custom_schema = None ) Updates BigQuery schema and description. Parameters: Name Type Description Default mode str Optional. Table of which table to update [prod] 'prod' not_found_ok bool Optional. What to do if table is not found required Source code in basedosdados/upload/table.py def update ( self , mode = \"prod\" , custom_schema = None ): \"\"\"Updates BigQuery schema and description. Args: mode (str): Optional. Table of which table to update [prod] not_found_ok (bool): Optional. What to do if table is not found \"\"\" self . _check_mode ( mode ) table = self . _get_table_obj ( mode ) table . description = self . _get_table_description () # when mode is staging the table schema already exists if mode == \"prod\" and custom_schema is None : table . schema = self . _load_schema_from_json ( columns = self . _get_cross_columns_from_bq_api () ) if mode == \"prod\" and custom_schema is not None : table . schema = self . _load_schema_from_json ( custom_schema ) fields = [ \"description\" , \"schema\" ] self . client [ \"bigquery_prod\" ] . update_table ( table , fields = fields ) logger . success ( \" {object} {object_id} was {action} in {mode} !\" , object_id = self . table_id , mode = mode , object = \"Table\" , action = \"updated\" , )","title":"Python"},{"location":"api_reference_python/#python","text":"Esta API \u00e9 composta por fun\u00e7\u00f5es com 2 tipos de funcionalidade: M\u00f3dulos para requisi\u00e7\u00e3o de dados : para aquele(as) que desejam somente consultar os dados e metadados do nosso projeto. Classes para gerenciamento de dados no Google Cloud: para aqueles(as) que desejam subir dados no nosso projeto (ou qualquer outro projeto no Google Cloud, seguindo a nossa metodologia e infraestrutura). Toda documenta\u00e7\u00e3o do c\u00f3digo abaixo est\u00e1 em ingl\u00eas","title":"Python"},{"location":"api_reference_python/#modulos-requisicao-de-dados","text":"Functions to get metadata from BD's API","title":"M\u00f3dulos (Requisi\u00e7\u00e3o de dados)"},{"location":"api_reference_python/#basedosdados.download.metadata.check_input","text":"Checks if the number of inputs is valid Source code in basedosdados/download/metadata.py def check_input ( f ): \"\"\"Checks if the number of inputs is valid\"\"\" @wraps ( f ) def wrapper ( * args , ** kwargs ): if sum ([ a is not None for a in args ]) > 1 : raise ValueError ( \"At most one of the inputs must be non null\" ) return f ( * args , ** kwargs ) return wrapper","title":"check_input()"},{"location":"api_reference_python/#basedosdados.download.metadata.get_columns","text":"Get a list of available columns, either by table_id , column_id or column_name Parameters: Name Type Description Default table_id(str) table slug in google big query (gbq). required column_id(str) column slug in google big query (gbq). required column_name(str) table name in base dos dados metadata. required page(int) page for pagination. required page_size(int) page size for pagination. required backend(Backend) backend instance, injected automatically. required Returns: Type Description dict List of tables. Source code in basedosdados/download/metadata.py @check_input @inject_backend def get_columns ( table_id : str = None , column_id : str = None , columns_name : str = None , page : int = 1 , page_size : int = 10 , backend : Backend = None , ) -> list [ dict ]: \"\"\" Get a list of available columns, either by `table_id`, `column_id` or `column_name` Args: table_id(str): table slug in google big query (gbq). column_id(str): column slug in google big query (gbq). column_name(str): table name in base dos dados metadata. page(int): page for pagination. page_size(int): page size for pagination. backend(Backend): backend instance, injected automatically. Returns: dict: List of tables. \"\"\" result = backend . get_columns ( table_id , column_id , columns_name , page , page_size ) for item in result . get ( \"items\" , []) or []: item [ \"bigquery_type\" ] = item . pop ( \"bigqueryType\" , {}) . get ( \"name\" ) return result","title":"get_columns()"},{"location":"api_reference_python/#basedosdados.download.metadata.get_datasets","text":"Get a list of available datasets, either by dataset_id or dataset_name Parameters: Name Type Description Default dataset_id(str) dataset slug in google big query (gbq). required dataset_name(str) dataset name in base dos dados metadata. required page(int) page for pagination. required page_size(int) page size for pagination. required backend(Backend) backend instance, injected automatically. required Returns: Type Description dict List of datasets. Source code in basedosdados/download/metadata.py @check_input @inject_backend def get_datasets ( dataset_id : str = None , dataset_name : str = None , page : int = 1 , page_size : int = 10 , backend : Backend = None , ) -> list [ dict ]: \"\"\" Get a list of available datasets, either by `dataset_id` or `dataset_name` Args: dataset_id(str): dataset slug in google big query (gbq). dataset_name(str): dataset name in base dos dados metadata. page(int): page for pagination. page_size(int): page size for pagination. backend(Backend): backend instance, injected automatically. Returns: dict: List of datasets. \"\"\" result = backend . get_datasets ( dataset_id , dataset_name , page , page_size ) for item in result . get ( \"items\" , []) or []: item [ \"organization\" ] = item . get ( \"organization\" , {}) . get ( \"name\" ) item [ \"tags\" ] = [ i . get ( \"name\" ) for i in item . get ( \"tags\" , {}) . get ( \"items\" )] item [ \"themes\" ] = [ i . get ( \"name\" ) for i in item . get ( \"themes\" , {}) . get ( \"items\" )] return result","title":"get_datasets()"},{"location":"api_reference_python/#basedosdados.download.metadata.get_tables","text":"Get a list of available tables, either by dataset_id , table_id or table_name Parameters: Name Type Description Default dataset_id(str) dataset slug in google big query (gbq). required table_id(str) table slug in google big query (gbq). required table_name(str) table name in base dos dados metadata. required page(int) page for pagination. required page_size(int) page size for pagination. required backend(Backend) backend instance, injected automatically. required Returns: Type Description dict List of tables. Source code in basedosdados/download/metadata.py @check_input @inject_backend def get_tables ( dataset_id : str = None , table_id : str = None , table_name : str = None , page : int = 1 , page_size : int = 10 , backend : Backend = None , ) -> list [ dict ]: \"\"\" Get a list of available tables, either by `dataset_id`, `table_id` or `table_name` Args: dataset_id(str): dataset slug in google big query (gbq). table_id(str): table slug in google big query (gbq). table_name(str): table name in base dos dados metadata. page(int): page for pagination. page_size(int): page size for pagination. backend(Backend): backend instance, injected automatically. Returns: dict: List of tables. \"\"\" return backend . get_tables ( dataset_id , table_id , table_name , page , page_size )","title":"get_tables()"},{"location":"api_reference_python/#basedosdados.download.metadata.inject_backend","text":"Inject backend instance if doesn't exists Source code in basedosdados/download/metadata.py def inject_backend ( f ): \"\"\"Inject backend instance if doesn't exists\"\"\" @wraps ( f ) def wrapper ( * args , ** kwargs ): if \"backend\" not in kwargs : kwargs [ \"backend\" ] = Backend () return f ( * args , ** kwargs ) return wrapper","title":"inject_backend()"},{"location":"api_reference_python/#basedosdados.download.metadata.search","text":"Search for datasets, querying all available metadata for the term q Parameters: Name Type Description Default q(str) search term. required page(int) page for pagination. required page_size(int) page size for pagination. required backend(Backend) backend instance, injected automatically. required Returns: Type Description dict List of datasets and metadata. Source code in basedosdados/download/metadata.py @check_input @inject_backend def search ( q : str = None , page : int = 1 , page_size : int = 10 , backend : Backend = None , ) -> list [ dict ]: \"\"\" Search for datasets, querying all available metadata for the term `q` Args: q(str): search term. page(int): page for pagination. page_size(int): page size for pagination. backend(Backend): backend instance, injected automatically. Returns: dict: List of datasets and metadata. \"\"\" items = [] for item in backend . search ( q , page , page_size ) . get ( \"results\" , []): items . append ( { \"slug\" : item . get ( \"slug\" ), \"name\" : item . get ( \"name\" ), \"description\" : item . get ( \"description\" ), \"n_tables\" : item . get ( \"n_tables\" ), \"n_raw_data_sources\" : item . get ( \"n_raw_data_sources\" ), \"n_information_requests\" : item . get ( \"n_information_requests\" ), \"organization\" : { \"slug\" : item . get ( \"organizations\" , [{}])[ 0 ] . get ( \"slug\" ), \"name\" : item . get ( \"organizations\" , [{}])[ 0 ] . get ( \"name\" ), }, } ) return items Functions for managing downloads","title":"search()"},{"location":"api_reference_python/#basedosdados.download.download.download","text":"Download table or query result from basedosdados BigQuery (or other). Using a query : download('select * from basedosdados.br_suporte.diretorio_municipios limit 10') Using dataset_id & table_id : download(dataset_id='br_suporte', table_id='diretorio_municipios') You can also add arguments to modify save parameters: download(dataset_id='br_suporte', table_id='diretorio_municipios', index=False, sep='|') Parameters: Name Type Description Default savepath str, pathlib.PosixPath savepath must be a file path. Only supports .csv . required query str Optional. Valid SQL Standard Query to basedosdados. If query is available, dataset_id and table_id are not required. None dataset_id str Optional. Dataset id available in basedosdados. It should always come with table_id. None table_id str Optional. Table id available in basedosdados.dataset_id. It should always come with dataset_id. None billing_project_id str Optional. Project that will be billed. Find your Project ID here https://console.cloud.google.com/projectselector2/home/dashboard None query_project_id str Optional. Which project the table lives. You can change this you want to query different projects. 'basedosdados' limit int Optional Number of rows. None from_file boolean Optional. Uses the credentials from file, located in `~/.basedosdados/credentials/ False reauth boolean Optional. Re-authorize Google Cloud Project in case you need to change user or reset configurations. False compression str Optional. Compression type. Only GZIP is available for now. 'GZIP' Exceptions: Type Description Exception If either table_id, dataset_id or query are empty. Source code in basedosdados/download/download.py def download ( savepath , query = None , dataset_id = None , table_id = None , billing_project_id = None , query_project_id = \"basedosdados\" , limit = None , from_file = False , reauth = False , compression = \"GZIP\" , ): \"\"\"Download table or query result from basedosdados BigQuery (or other). * Using a **query**: `download('select * from `basedosdados.br_suporte.diretorio_municipios` limit 10')` * Using **dataset_id & table_id**: `download(dataset_id='br_suporte', table_id='diretorio_municipios')` You can also add arguments to modify save parameters: `download(dataset_id='br_suporte', table_id='diretorio_municipios', index=False, sep='|')` Args: savepath (str, pathlib.PosixPath): savepath must be a file path. Only supports `.csv`. query (str): Optional. Valid SQL Standard Query to basedosdados. If query is available, dataset_id and table_id are not required. dataset_id (str): Optional. Dataset id available in basedosdados. It should always come with table_id. table_id (str): Optional. Table id available in basedosdados.dataset_id. It should always come with dataset_id. billing_project_id (str): Optional. Project that will be billed. Find your Project ID here https://console.cloud.google.com/projectselector2/home/dashboard query_project_id (str): Optional. Which project the table lives. You can change this you want to query different projects. limit (int): Optional Number of rows. from_file (boolean): Optional. Uses the credentials from file, located in `~/.basedosdados/credentials/ reauth (boolean): Optional. Re-authorize Google Cloud Project in case you need to change user or reset configurations. compression (str): Optional. Compression type. Only `GZIP` is available for now. Raises: Exception: If either table_id, dataset_id or query are empty. \"\"\" billing_project_id , from_file = _set_config_variables ( billing_project_id = billing_project_id , from_file = from_file ) if ( query is None ) and (( table_id is None ) or ( dataset_id is None )): raise BaseDosDadosException ( \"Either table_id, dataset_id or query should be filled.\" ) client = _google_client ( billing_project_id , from_file , reauth ) # makes sure that savepath is a filepath and not a folder savepath = _sets_savepath ( savepath ) # if query is not defined (so it won't be overwritten) and if # table is a view or external or if limit is specified, # convert it to a query. if not query and ( not _is_table ( client , dataset_id , table_id , query_project_id ) or limit ): query = f \"\"\" SELECT * FROM { query_project_id } . { dataset_id } . { table_id } \"\"\" if limit is not None : query += f \" limit { limit } \" if query : # sql queries produces anonymous tables, whose names # can be found within `job._properties` job = client [ \"bigquery\" ] . query ( query ) # views may take longer: wait for job to finish. _wait_for ( job ) dest_table = job . _properties [ \"configuration\" ][ \"query\" ][ \"destinationTable\" ] project_id = dest_table [ \"projectId\" ] dataset_id = dest_table [ \"datasetId\" ] table_id = dest_table [ \"tableId\" ] _direct_download ( client , dataset_id , table_id , savepath , project_id , compression )","title":"download()"},{"location":"api_reference_python/#basedosdados.download.download.read_sql","text":"Load data from BigQuery using a query. Just a wrapper around pandas.read_gbq Parameters: Name Type Description Default query sql Valid SQL Standard Query to basedosdados required billing_project_id str Optional. Project that will be billed. Find your Project ID here https://console.cloud.google.com/projectselector2/home/dashboard None from_file boolean Optional. Uses the credentials from file, located in `~/.basedosdados/credentials/ False reauth boolean Optional. Re-authorize Google Cloud Project in case you need to change user or reset configurations. False use_bqstorage_api boolean Optional. Use the BigQuery Storage API to download query results quickly, but at an increased cost(https://cloud.google.com/bigquery/docs/reference/storage/). To use this API, first enable it in the Cloud Console(https://console.cloud.google.com/apis/library/bigquerystorage.googleapis.com). You must also have the bigquery.readsessions.create permission on the project you are billing queries to. False Returns: Type Description pd.DataFrame Query result Source code in basedosdados/download/download.py def read_sql ( query , billing_project_id = None , from_file = False , reauth = False , use_bqstorage_api = False , ): \"\"\"Load data from BigQuery using a query. Just a wrapper around pandas.read_gbq Args: query (sql): Valid SQL Standard Query to basedosdados billing_project_id (str): Optional. Project that will be billed. Find your Project ID here https://console.cloud.google.com/projectselector2/home/dashboard from_file (boolean): Optional. Uses the credentials from file, located in `~/.basedosdados/credentials/ reauth (boolean): Optional. Re-authorize Google Cloud Project in case you need to change user or reset configurations. use_bqstorage_api (boolean): Optional. Use the BigQuery Storage API to download query results quickly, but at an increased cost(https://cloud.google.com/bigquery/docs/reference/storage/). To use this API, first enable it in the Cloud Console(https://console.cloud.google.com/apis/library/bigquerystorage.googleapis.com). You must also have the bigquery.readsessions.create permission on the project you are billing queries to. Returns: pd.DataFrame: Query result \"\"\" billing_project_id , from_file = _set_config_variables ( billing_project_id = billing_project_id , from_file = from_file ) try : # Set a two hours timeout bigquery_storage_v1 . client . BigQueryReadClient . read_rows = partialmethod ( bigquery_storage_v1 . client . BigQueryReadClient . read_rows , timeout = 3600 * 2 , ) return read_gbq ( query , project_id = config . billing_project_id , use_bqstorage_api = use_bqstorage_api , credentials = _credentials ( from_file = config . from_file , reauth = reauth ), ) except GenericGBQException as e : if \"Reason: 403\" in str ( e ): raise BaseDosDadosAccessDeniedException from e if re . match ( \"Reason: 400 POST .* [Pp]roject[ ]*I[Dd]\" , str ( e )): raise BaseDosDadosInvalidProjectIDException from e raise except PyDataCredentialsError as e : raise BaseDosDadosAuthorizationException from e except ( OSError , ValueError ) as e : no_billing_id = \"Could not determine project ID\" in str ( e ) no_billing_id |= \"reading from stdin while output is captured\" in str ( e ) if no_billing_id : raise BaseDosDadosNoBillingProjectIDException from e raise","title":"read_sql()"},{"location":"api_reference_python/#basedosdados.download.download.read_table","text":"Load data from BigQuery using dataset_id and table_id. Parameters: Name Type Description Default dataset_id str Optional. Dataset id available in basedosdados. It should always come with table_id. required table_id str Optional. Table id available in basedosdados.dataset_id. It should always come with dataset_id. required billing_project_id str Optional. Project that will be billed. Find your Project ID here https://console.cloud.google.com/projectselector2/home/dashboard None query_project_id str Optional. Which project the table lives. You can change this you want to query different projects. 'basedosdados' limit int Optional. Number of rows to read from table. None from_file boolean Optional. Uses the credentials from file, located in `~/.basedosdados/credentials/ False reauth boolean Optional. Re-authorize Google Cloud Project in case you need to change user or reset configurations. False use_bqstorage_api boolean Optional. Use the BigQuery Storage API to download query results quickly, but at an increased cost(https://cloud.google.com/bigquery/docs/reference/storage/). To use this API, first enable it in the Cloud Console(https://console.cloud.google.com/apis/library/bigquerystorage.googleapis.com). You must also have the bigquery.readsessions.create permission on the project you are billing queries to. False Returns: Type Description pd.DataFrame Query result Source code in basedosdados/download/download.py def read_table ( dataset_id , table_id , billing_project_id = None , query_project_id = \"basedosdados\" , limit = None , from_file = False , reauth = False , use_bqstorage_api = False , ): \"\"\"Load data from BigQuery using dataset_id and table_id. Args: dataset_id (str): Optional. Dataset id available in basedosdados. It should always come with table_id. table_id (str): Optional. Table id available in basedosdados.dataset_id. It should always come with dataset_id. billing_project_id (str): Optional. Project that will be billed. Find your Project ID here https://console.cloud.google.com/projectselector2/home/dashboard query_project_id (str): Optional. Which project the table lives. You can change this you want to query different projects. limit (int): Optional. Number of rows to read from table. from_file (boolean): Optional. Uses the credentials from file, located in `~/.basedosdados/credentials/ reauth (boolean): Optional. Re-authorize Google Cloud Project in case you need to change user or reset configurations. use_bqstorage_api (boolean): Optional. Use the BigQuery Storage API to download query results quickly, but at an increased cost(https://cloud.google.com/bigquery/docs/reference/storage/). To use this API, first enable it in the Cloud Console(https://console.cloud.google.com/apis/library/bigquerystorage.googleapis.com). You must also have the bigquery.readsessions.create permission on the project you are billing queries to. Returns: pd.DataFrame: Query result \"\"\" billing_project_id , from_file = _set_config_variables ( billing_project_id = billing_project_id , from_file = from_file ) if ( dataset_id is not None ) and ( table_id is not None ): query = f \"\"\" SELECT * FROM ` { query_project_id } . { dataset_id } . { table_id } `\"\"\" if limit is not None : query += f \" LIMIT { limit } \" else : raise BaseDosDadosException ( \"Both table_id and dataset_id should be filled.\" ) return read_sql ( query , billing_project_id = billing_project_id , from_file = from_file , reauth = reauth , use_bqstorage_api = use_bqstorage_api , )","title":"read_table()"},{"location":"api_reference_python/#classes-gerenciamento-de-dados","text":"Class for managing the files in cloud storage.","title":"Classes (Gerenciamento de dados)"},{"location":"api_reference_python/#basedosdados.upload.storage.Storage","text":"Manage files on Google Cloud Storage. Source code in basedosdados/upload/storage.py class Storage ( Base ): \"\"\" Manage files on Google Cloud Storage. \"\"\" def __init__ ( self , dataset_id , table_id , ** kwargs ): super () . __init__ ( ** kwargs ) self . bucket = self . client [ \"storage_staging\" ] . bucket ( self . bucket_name ) self . dataset_id = dataset_id . replace ( \"-\" , \"_\" ) self . table_id = table_id . replace ( \"-\" , \"_\" ) @staticmethod def _resolve_partitions ( partitions ): if isinstance ( partitions , dict ): return \"/\" . join ( f \" { k } = { v } \" for k , v in partitions . items ()) + \"/\" if isinstance ( partitions , str ): if partitions . endswith ( \"/\" ): partitions = partitions [: - 1 ] # If there is no partition if len ( partitions ) == 0 : return \"\" # It should fail if there is folder which is not a partition try : # check if it fits rule { b . split ( \"=\" )[ 0 ]: b . split ( \"=\" )[ 1 ] for b in partitions . split ( \"/\" )} except IndexError as e : raise Exception ( f \"The path { partitions } is not a valid partition\" ) from e return partitions + \"/\" raise Exception ( f \"Partitions format or type not accepted: { partitions } \" ) def _build_blob_name ( self , filename , mode , partitions = None ): \"\"\" Builds the blob name. \"\"\" # table folder blob_name = f \" { mode } / { self . dataset_id } / { self . table_id } /\" # add partition folder if partitions is not None : blob_name += self . _resolve_partitions ( partitions ) # add file name blob_name += filename return blob_name def init ( self , replace = False , very_sure = False ): \"\"\"Initializes bucket and folders. Folder should be: * `raw` : that contains really raw data * `staging` : preprocessed data ready to upload to BigQuery Args: replace (bool): Optional. Whether to replace if bucket already exists very_sure (bool): Optional. Are you aware that everything is going to be erased if you replace the bucket? Raises: Warning: very_sure argument is still False. \"\"\" if replace : if not very_sure : raise Warning ( \" \\n ********************************************************\" \" \\n You are trying to replace all the data that you have \" f \"in bucket { self . bucket_name } . \\n Are you sure? \\n \" \"If yes, add the flag --very_sure \\n \" \"********************************************************\" ) self . bucket . delete ( force = True ) self . client [ \"storage_staging\" ] . create_bucket ( self . bucket ) for folder in [ \"staging/\" , \"raw/\" ]: self . bucket . blob ( folder ) . upload_from_string ( \"\" ) def upload ( self , path , mode = \"all\" , partitions = None , if_exists = \"raise\" , chunk_size = None , ** upload_args , ): \"\"\"Upload to storage at `<bucket_name>/<mode>/<dataset_id>/<table_id>`. You can: * Add a single **file** setting `path = <file_path>`. * Add a **folder** with multiple files setting `path = <folder_path>`. *The folder should just contain the files and no folders.* * Add **partitioned files** setting `path = <folder_path>`. This folder must follow the hive partitioning scheme i.e. `<table_id>/<key>=<value>/<key2>=<value2>/<partition>.csv` (ex: `mytable/country=brasil/year=2020/mypart.csv`). *Remember all files must follow a single schema.* Otherwise, things might fail in the future. There are 6 modes: * `raw` : should contain raw files from datasource * `staging` : should contain pre-treated files ready to upload to BiqQuery * `header`: should contain the header of the tables * `auxiliary_files`: should contain auxiliary files from eache table * `architecture`: should contain the architecture sheet of the tables * `all`: if no treatment is needed, use `all`. Args: path (str or pathlib.PosixPath): Where to find the file or folder that you want to upload to storage mode (str): Folder of which dataset to update [raw|staging|header|auxiliary_files|architecture|all] partitions (str, pathlib.PosixPath, or dict): Optional. *If adding a single file*, use this to add it to a specific partition. * str : `<key>=<value>/<key2>=<value2>` * dict: `dict(key=value, key2=value2)` if_exists (str): Optional. What to do if data exists * 'raise' : Raises Conflict exception * 'replace' : Replace table * 'pass' : Do nothing chunk_size (int): Optional The size of a chunk of data whenever iterating (in bytes). This must be a multiple of 256 KB per the API specification. If not specified, the chunk_size of the blob itself is used. If that is not specified, a default value of 40 MB is used. upload_args (): Extra arguments accepted by [`google.cloud.storage.blob.Blob.upload_from_file`](https://googleapis.dev/python/storage/latest/blobs.html?highlight=upload_from_filename#google.cloud.storage.blob.Blob.upload_from_filename) \"\"\" if ( self . dataset_id is None ) or ( self . table_id is None ): raise Exception ( \"You need to pass dataset_id and table_id\" ) path = Path ( path ) if path . is_dir (): paths = [ f for f in path . glob ( \"**/*\" ) if f . is_file () and f . suffix in [ \".csv\" , \".parquet\" , \"parquet.gzip\" ] ] parts = [ ( filepath . as_posix () . replace ( path . as_posix () + \"/\" , \"\" ) . replace ( str ( filepath . name ), \"\" ) ) for filepath in paths ] else : paths = [ path ] parts = [ partitions or None ] self . _check_mode ( mode ) mode = ( [ \"raw\" , \"staging\" , \"header\" , \"auxiliary_files\" , \"architecture\" ] if mode == \"all\" else [ mode ] ) for m in mode : for filepath , part in tqdm ( list ( zip ( paths , parts )), desc = \"Uploading files\" ): blob_name = self . _build_blob_name ( filepath . name , m , part ) blob = self . bucket . blob ( blob_name , chunk_size = chunk_size ) if not blob . exists () or if_exists == \"replace\" : upload_args [ \"timeout\" ] = upload_args . get ( \"timeout\" , None ) blob . upload_from_filename ( str ( filepath ), ** upload_args ) elif if_exists == \"pass\" : pass else : raise BaseDosDadosException ( f \"Data already exists at { self . bucket_name } / { blob_name } . \" \"If you are using Storage.upload then set if_exists to \" \"'replace' to overwrite data \\n \" \"If you are using Table.create then set if_storage_data_exists \" \"to 'replace' to overwrite data.\" ) logger . success ( \" {object} {filename} _ {mode} was {action} !\" , filename = filepath . name , mode = m , object = \"File\" , action = \"uploaded\" , ) def download ( self , filename = \"*\" , savepath = \".\" , partitions = None , mode = \"staging\" , if_not_exists = \"raise\" , ): \"\"\"Download files from Google Storage from path `mode`/`dataset_id`/`table_id`/`partitions`/`filename` and replicate folder hierarchy on save, There are 5 modes: * `raw` : should contain raw files from datasource * `staging` : should contain pre-treated files ready to upload to BiqQuery * `header`: should contain the header of the tables * `auxiliary_files`: should contain auxiliary files from eache table * `architecture`: should contain the architecture sheet of the tables You can also use the `partitions` argument to choose files from a partition Args: filename (str): Optional Specify which file to download. If \"*\" , downloads all files within the bucket folder. Defaults to \"*\". savepath (str): Where you want to save the data on your computer. Must be a path to a directory. partitions (str, dict): Optional If downloading a single file, use this to specify the partition path from which to download. * str : `<key>=<value>/<key2>=<value2>` * dict: `dict(key=value, key2=value2)` mode (str): Optional Folder of which dataset to update.[raw|staging|header|auxiliary_files|architecture] if_not_exists (str): Optional. What to do if data not found. * 'raise' : Raises FileNotFoundError. * 'pass' : Do nothing and exit the function Raises: FileNotFoundError: If the given path `<mode>/<dataset_id>/<table_id>/<partitions>/<filename>` could not be found or there are no files to download. \"\"\" # Prefix to locate files within the bucket prefix = f \" { mode } / { self . dataset_id } / { self . table_id } /\" # Add specific partition to search prefix if partitions : prefix += self . _resolve_partitions ( partitions ) # if no filename is passed, list all blobs within a given table if filename != \"*\" : prefix += filename blob_list = list ( self . bucket . list_blobs ( prefix = prefix )) # if there are no blobs matching the search raise FileNotFoundError or return if not blob_list : if if_not_exists == \"raise\" : raise FileNotFoundError ( f \"Could not locate files at { prefix } \" ) return # download all blobs matching the search to given savepath for blob in tqdm ( blob_list , desc = \"Download Blob\" ): # parse blob.name and get the csv file name csv_name = blob . name . split ( \"/\" )[ - 1 ] # build folder path replicating storage hierarchy blob_folder = blob . name . replace ( csv_name , \"\" ) # replicate folder hierarchy savepath = Path ( savepath ) ( savepath / blob_folder ) . mkdir ( parents = True , exist_ok = True ) # download blob to savepath save_file_path = savepath / blob . name blob . download_to_filename ( filename = save_file_path ) logger . success ( \" {object} {object_id} _ {mode} was {action} at: {path} !\" , object_id = self . dataset_id , mode = mode , object = \"File\" , action = \"downloaded\" , path = { str ( savepath )}, ) def delete_file ( self , filename , mode , partitions = None , not_found_ok = False ): \"\"\"Deletes file from path `<bucket_name>/<mode>/<dataset_id>/<table_id>/<partitions>/<filename>`. Args: filename (str): Name of the file to be deleted mode (str): Folder of which dataset to update [raw|staging|header|auxiliary_files|architecture|all] partitions (str, pathlib.PosixPath, or dict): Optional. Hive structured partition as a string or dict * str : `<key>=<value>/<key2>=<value2>` * dict: `dict(key=value, key2=value2)` not_found_ok (bool): Optional. What to do if file not found \"\"\" self . _check_mode ( mode ) mode = ( [ \"raw\" , \"staging\" , \"header\" , \"auxiliary_files\" , \"architecture\" ] if mode == \"all\" else [ mode ] ) for m in mode : blob = self . bucket . blob ( self . _build_blob_name ( filename , m , partitions )) if blob . exists () or not blob . exists () and not not_found_ok : blob . delete () else : return logger . success ( \" {object} {filename} _ {mode} was {action} !\" , filename = filename , mode = mode , object = \"File\" , action = \"deleted\" , ) def delete_table ( self , mode = \"staging\" , bucket_name = None , not_found_ok = False ): \"\"\"Deletes a table from storage, sends request in batches. Args: mode (str): Folder of which dataset to update [raw|staging|header|auxiliary_files|architecture] Folder of which dataset to update. Defaults to \"staging\". bucket_name (str): The bucket name from which to delete the table. If None, defaults to the bucket initialized when instantiating the Storage object. (You can check it with the Storage().bucket property) not_found_ok (bool): Optional. What to do if table not found \"\"\" prefix = f \" { mode } / { self . dataset_id } / { self . table_id } /\" if bucket_name is not None : table_blobs = list ( self . client [ \"storage_staging\" ] . bucket ( f \" { bucket_name } \" ) . list_blobs ( prefix = prefix ) ) else : table_blobs = list ( self . bucket . list_blobs ( prefix = prefix )) if not table_blobs : if not_found_ok : return raise FileNotFoundError ( f \"Could not find the requested table { self . dataset_id } . { self . table_id } \" ) # Divides table_blobs list for maximum batch request size table_blobs_chunks = [ table_blobs [ i : i + 999 ] for i in range ( 0 , len ( table_blobs ), 999 ) # noqa ] for i , source_table in enumerate ( tqdm ( table_blobs_chunks , desc = \"Delete Table Chunk\" ) ): counter = 0 while counter < 10 : try : with self . client [ \"storage_staging\" ] . batch (): for blob in source_table : blob . delete () break except Exception : print ( f \"Delete Table Chunk { i } | Attempt { counter } : delete operation starts again in 5 seconds...\" , ) time . sleep ( 5 ) counter += 1 traceback . print_exc ( file = sys . stderr ) logger . success ( \" {object} {object_id} _ {mode} was {action} !\" , object_id = self . table_id , mode = mode , object = \"Table\" , action = \"deleted\" , ) def copy_table ( self , source_bucket_name = \"basedosdados\" , destination_bucket_name = None , mode = \"staging\" , new_table_id = None , ): \"\"\"Copies table from a source bucket to your bucket, sends request in batches. Args: source_bucket_name (str): The bucket name from which to copy data. You can change it to copy from other external bucket. destination_bucket_name (str): Optional The bucket name where data will be copied to. If None, defaults to the bucket initialized when instantiating the Storage object (You can check it with the Storage().bucket property) mode (str): Folder of which dataset to update [raw|staging|header|auxiliary_files|architecture] Folder of which dataset to update. Defaults to \"staging\". new_table_id (str): Optional. New table id to be copied to. If None, defaults to the table id initialized when instantiating the Storage object. \"\"\" source_table_ref = list ( self . client [ \"storage_staging\" ] . bucket ( source_bucket_name ) . list_blobs ( prefix = f \" { mode } / { self . dataset_id } / { self . table_id } /\" ) ) if not source_table_ref : raise FileNotFoundError ( f \"Could not find the requested table { self . dataset_id } . { self . table_id } \" ) if destination_bucket_name is None : destination_bucket = self . bucket else : destination_bucket = self . client [ \"storage_staging\" ] . bucket ( destination_bucket_name ) # Divides source_table_ref list for maximum batch request size source_table_ref_chunks = [ source_table_ref [ i : i + 999 ] # noqa for i in range ( 0 , len ( source_table_ref ), 999 ) # noqa ] for i , source_table in enumerate ( tqdm ( source_table_ref_chunks , desc = \"Copy Table Chunk\" ) ): counter = 0 while counter < 10 : try : with self . client [ \"storage_staging\" ] . batch (): for blob in source_table : new_name = None if new_table_id : new_name = blob . name . replace ( self . table_id , new_table_id ) self . bucket . copy_blob ( blob , destination_bucket = destination_bucket , new_name = new_name , ) break except Exception : print ( f \"Copy Table Chunk { i } | Attempt { counter } : copy operation starts again in 5 seconds...\" , ) counter += 1 time . sleep ( 5 ) traceback . print_exc ( file = sys . stderr ) logger . success ( \" {object} {object_id} _ {mode} was {action} to {new_object_id} _ {mode} !\" , object_id = self . table_id , new_object_id = new_table_id if new_table_id else self . table_id , mode = mode , object = \"Table\" , action = \"copied\" , )","title":"Storage"},{"location":"api_reference_python/#basedosdados.upload.storage.Storage.copy_table","text":"Copies table from a source bucket to your bucket, sends request in batches. Parameters: Name Type Description Default source_bucket_name str The bucket name from which to copy data. You can change it to copy from other external bucket. 'basedosdados' destination_bucket_name str Optional The bucket name where data will be copied to. If None, defaults to the bucket initialized when instantiating the Storage object (You can check it with the Storage().bucket property) None mode str Folder of which dataset to update [raw|staging|header|auxiliary_files|architecture] Folder of which dataset to update. Defaults to \"staging\". 'staging' new_table_id str Optional. New table id to be copied to. If None, defaults to the table id initialized when instantiating the Storage object. None Source code in basedosdados/upload/storage.py def copy_table ( self , source_bucket_name = \"basedosdados\" , destination_bucket_name = None , mode = \"staging\" , new_table_id = None , ): \"\"\"Copies table from a source bucket to your bucket, sends request in batches. Args: source_bucket_name (str): The bucket name from which to copy data. You can change it to copy from other external bucket. destination_bucket_name (str): Optional The bucket name where data will be copied to. If None, defaults to the bucket initialized when instantiating the Storage object (You can check it with the Storage().bucket property) mode (str): Folder of which dataset to update [raw|staging|header|auxiliary_files|architecture] Folder of which dataset to update. Defaults to \"staging\". new_table_id (str): Optional. New table id to be copied to. If None, defaults to the table id initialized when instantiating the Storage object. \"\"\" source_table_ref = list ( self . client [ \"storage_staging\" ] . bucket ( source_bucket_name ) . list_blobs ( prefix = f \" { mode } / { self . dataset_id } / { self . table_id } /\" ) ) if not source_table_ref : raise FileNotFoundError ( f \"Could not find the requested table { self . dataset_id } . { self . table_id } \" ) if destination_bucket_name is None : destination_bucket = self . bucket else : destination_bucket = self . client [ \"storage_staging\" ] . bucket ( destination_bucket_name ) # Divides source_table_ref list for maximum batch request size source_table_ref_chunks = [ source_table_ref [ i : i + 999 ] # noqa for i in range ( 0 , len ( source_table_ref ), 999 ) # noqa ] for i , source_table in enumerate ( tqdm ( source_table_ref_chunks , desc = \"Copy Table Chunk\" ) ): counter = 0 while counter < 10 : try : with self . client [ \"storage_staging\" ] . batch (): for blob in source_table : new_name = None if new_table_id : new_name = blob . name . replace ( self . table_id , new_table_id ) self . bucket . copy_blob ( blob , destination_bucket = destination_bucket , new_name = new_name , ) break except Exception : print ( f \"Copy Table Chunk { i } | Attempt { counter } : copy operation starts again in 5 seconds...\" , ) counter += 1 time . sleep ( 5 ) traceback . print_exc ( file = sys . stderr ) logger . success ( \" {object} {object_id} _ {mode} was {action} to {new_object_id} _ {mode} !\" , object_id = self . table_id , new_object_id = new_table_id if new_table_id else self . table_id , mode = mode , object = \"Table\" , action = \"copied\" , )","title":"copy_table()"},{"location":"api_reference_python/#basedosdados.upload.storage.Storage.delete_file","text":"Deletes file from path <bucket_name>/<mode>/<dataset_id>/<table_id>/<partitions>/<filename> . Parameters: Name Type Description Default filename str Name of the file to be deleted required mode str Folder of which dataset to update [raw|staging|header|auxiliary_files|architecture|all] required partitions str, pathlib.PosixPath, or dict Optional. Hive structured partition as a string or dict str : <key>=<value>/<key2>=<value2> dict: dict(key=value, key2=value2) None not_found_ok bool Optional. What to do if file not found False Source code in basedosdados/upload/storage.py def delete_file ( self , filename , mode , partitions = None , not_found_ok = False ): \"\"\"Deletes file from path `<bucket_name>/<mode>/<dataset_id>/<table_id>/<partitions>/<filename>`. Args: filename (str): Name of the file to be deleted mode (str): Folder of which dataset to update [raw|staging|header|auxiliary_files|architecture|all] partitions (str, pathlib.PosixPath, or dict): Optional. Hive structured partition as a string or dict * str : `<key>=<value>/<key2>=<value2>` * dict: `dict(key=value, key2=value2)` not_found_ok (bool): Optional. What to do if file not found \"\"\" self . _check_mode ( mode ) mode = ( [ \"raw\" , \"staging\" , \"header\" , \"auxiliary_files\" , \"architecture\" ] if mode == \"all\" else [ mode ] ) for m in mode : blob = self . bucket . blob ( self . _build_blob_name ( filename , m , partitions )) if blob . exists () or not blob . exists () and not not_found_ok : blob . delete () else : return logger . success ( \" {object} {filename} _ {mode} was {action} !\" , filename = filename , mode = mode , object = \"File\" , action = \"deleted\" , )","title":"delete_file()"},{"location":"api_reference_python/#basedosdados.upload.storage.Storage.delete_table","text":"Deletes a table from storage, sends request in batches. Parameters: Name Type Description Default mode str Folder of which dataset to update [raw|staging|header|auxiliary_files|architecture] Folder of which dataset to update. Defaults to \"staging\". 'staging' bucket_name str The bucket name from which to delete the table. If None, defaults to the bucket initialized when instantiating the Storage object. (You can check it with the Storage().bucket property) None not_found_ok bool Optional. What to do if table not found False Source code in basedosdados/upload/storage.py def delete_table ( self , mode = \"staging\" , bucket_name = None , not_found_ok = False ): \"\"\"Deletes a table from storage, sends request in batches. Args: mode (str): Folder of which dataset to update [raw|staging|header|auxiliary_files|architecture] Folder of which dataset to update. Defaults to \"staging\". bucket_name (str): The bucket name from which to delete the table. If None, defaults to the bucket initialized when instantiating the Storage object. (You can check it with the Storage().bucket property) not_found_ok (bool): Optional. What to do if table not found \"\"\" prefix = f \" { mode } / { self . dataset_id } / { self . table_id } /\" if bucket_name is not None : table_blobs = list ( self . client [ \"storage_staging\" ] . bucket ( f \" { bucket_name } \" ) . list_blobs ( prefix = prefix ) ) else : table_blobs = list ( self . bucket . list_blobs ( prefix = prefix )) if not table_blobs : if not_found_ok : return raise FileNotFoundError ( f \"Could not find the requested table { self . dataset_id } . { self . table_id } \" ) # Divides table_blobs list for maximum batch request size table_blobs_chunks = [ table_blobs [ i : i + 999 ] for i in range ( 0 , len ( table_blobs ), 999 ) # noqa ] for i , source_table in enumerate ( tqdm ( table_blobs_chunks , desc = \"Delete Table Chunk\" ) ): counter = 0 while counter < 10 : try : with self . client [ \"storage_staging\" ] . batch (): for blob in source_table : blob . delete () break except Exception : print ( f \"Delete Table Chunk { i } | Attempt { counter } : delete operation starts again in 5 seconds...\" , ) time . sleep ( 5 ) counter += 1 traceback . print_exc ( file = sys . stderr ) logger . success ( \" {object} {object_id} _ {mode} was {action} !\" , object_id = self . table_id , mode = mode , object = \"Table\" , action = \"deleted\" , )","title":"delete_table()"},{"location":"api_reference_python/#basedosdados.upload.storage.Storage.download","text":"Download files from Google Storage from path mode / dataset_id / table_id / partitions / filename and replicate folder hierarchy on save, There are 5 modes: * raw : should contain raw files from datasource * staging : should contain pre-treated files ready to upload to BiqQuery * header : should contain the header of the tables * auxiliary_files : should contain auxiliary files from eache table * architecture : should contain the architecture sheet of the tables You can also use the partitions argument to choose files from a partition Parameters: Name Type Description Default filename str Optional Specify which file to download. If \" \" , downloads all files within the bucket folder. Defaults to \" \". '*' savepath str Where you want to save the data on your computer. Must be a path to a directory. '.' partitions str, dict Optional If downloading a single file, use this to specify the partition path from which to download. str : <key>=<value>/<key2>=<value2> dict: dict(key=value, key2=value2) None mode str Optional Folder of which dataset to update.[raw|staging|header|auxiliary_files|architecture] 'staging' if_not_exists str Optional. What to do if data not found. 'raise' : Raises FileNotFoundError. 'pass' : Do nothing and exit the function 'raise' Exceptions: Type Description FileNotFoundError If the given path <mode>/<dataset_id>/<table_id>/<partitions>/<filename> could not be found or there are no files to download. Source code in basedosdados/upload/storage.py def download ( self , filename = \"*\" , savepath = \".\" , partitions = None , mode = \"staging\" , if_not_exists = \"raise\" , ): \"\"\"Download files from Google Storage from path `mode`/`dataset_id`/`table_id`/`partitions`/`filename` and replicate folder hierarchy on save, There are 5 modes: * `raw` : should contain raw files from datasource * `staging` : should contain pre-treated files ready to upload to BiqQuery * `header`: should contain the header of the tables * `auxiliary_files`: should contain auxiliary files from eache table * `architecture`: should contain the architecture sheet of the tables You can also use the `partitions` argument to choose files from a partition Args: filename (str): Optional Specify which file to download. If \"*\" , downloads all files within the bucket folder. Defaults to \"*\". savepath (str): Where you want to save the data on your computer. Must be a path to a directory. partitions (str, dict): Optional If downloading a single file, use this to specify the partition path from which to download. * str : `<key>=<value>/<key2>=<value2>` * dict: `dict(key=value, key2=value2)` mode (str): Optional Folder of which dataset to update.[raw|staging|header|auxiliary_files|architecture] if_not_exists (str): Optional. What to do if data not found. * 'raise' : Raises FileNotFoundError. * 'pass' : Do nothing and exit the function Raises: FileNotFoundError: If the given path `<mode>/<dataset_id>/<table_id>/<partitions>/<filename>` could not be found or there are no files to download. \"\"\" # Prefix to locate files within the bucket prefix = f \" { mode } / { self . dataset_id } / { self . table_id } /\" # Add specific partition to search prefix if partitions : prefix += self . _resolve_partitions ( partitions ) # if no filename is passed, list all blobs within a given table if filename != \"*\" : prefix += filename blob_list = list ( self . bucket . list_blobs ( prefix = prefix )) # if there are no blobs matching the search raise FileNotFoundError or return if not blob_list : if if_not_exists == \"raise\" : raise FileNotFoundError ( f \"Could not locate files at { prefix } \" ) return # download all blobs matching the search to given savepath for blob in tqdm ( blob_list , desc = \"Download Blob\" ): # parse blob.name and get the csv file name csv_name = blob . name . split ( \"/\" )[ - 1 ] # build folder path replicating storage hierarchy blob_folder = blob . name . replace ( csv_name , \"\" ) # replicate folder hierarchy savepath = Path ( savepath ) ( savepath / blob_folder ) . mkdir ( parents = True , exist_ok = True ) # download blob to savepath save_file_path = savepath / blob . name blob . download_to_filename ( filename = save_file_path ) logger . success ( \" {object} {object_id} _ {mode} was {action} at: {path} !\" , object_id = self . dataset_id , mode = mode , object = \"File\" , action = \"downloaded\" , path = { str ( savepath )}, )","title":"download()"},{"location":"api_reference_python/#basedosdados.upload.storage.Storage.init","text":"Initializes bucket and folders. Folder should be: raw : that contains really raw data staging : preprocessed data ready to upload to BigQuery Parameters: Name Type Description Default replace bool Optional. Whether to replace if bucket already exists False very_sure bool Optional. Are you aware that everything is going to be erased if you replace the bucket? False Exceptions: Type Description Warning very_sure argument is still False. Source code in basedosdados/upload/storage.py def init ( self , replace = False , very_sure = False ): \"\"\"Initializes bucket and folders. Folder should be: * `raw` : that contains really raw data * `staging` : preprocessed data ready to upload to BigQuery Args: replace (bool): Optional. Whether to replace if bucket already exists very_sure (bool): Optional. Are you aware that everything is going to be erased if you replace the bucket? Raises: Warning: very_sure argument is still False. \"\"\" if replace : if not very_sure : raise Warning ( \" \\n ********************************************************\" \" \\n You are trying to replace all the data that you have \" f \"in bucket { self . bucket_name } . \\n Are you sure? \\n \" \"If yes, add the flag --very_sure \\n \" \"********************************************************\" ) self . bucket . delete ( force = True ) self . client [ \"storage_staging\" ] . create_bucket ( self . bucket ) for folder in [ \"staging/\" , \"raw/\" ]: self . bucket . blob ( folder ) . upload_from_string ( \"\" )","title":"init()"},{"location":"api_reference_python/#basedosdados.upload.storage.Storage.upload","text":"Upload to storage at <bucket_name>/<mode>/<dataset_id>/<table_id> . You can: Add a single file setting path = <file_path> . Add a folder with multiple files setting path = <folder_path> . The folder should just contain the files and no folders. Add partitioned files setting path = <folder_path> . This folder must follow the hive partitioning scheme i.e. <table_id>/<key>=<value>/<key2>=<value2>/<partition>.csv (ex: mytable/country=brasil/year=2020/mypart.csv ). Remember all files must follow a single schema. Otherwise, things might fail in the future. There are 6 modes: raw : should contain raw files from datasource staging : should contain pre-treated files ready to upload to BiqQuery header : should contain the header of the tables auxiliary_files : should contain auxiliary files from eache table architecture : should contain the architecture sheet of the tables all : if no treatment is needed, use all . Parameters: Name Type Description Default path str or pathlib.PosixPath Where to find the file or folder that you want to upload to storage required mode str Folder of which dataset to update [raw|staging|header|auxiliary_files|architecture|all] 'all' partitions str, pathlib.PosixPath, or dict Optional. If adding a single file , use this to add it to a specific partition. str : <key>=<value>/<key2>=<value2> dict: dict(key=value, key2=value2) None if_exists str Optional. What to do if data exists 'raise' : Raises Conflict exception 'replace' : Replace table 'pass' : Do nothing 'raise' chunk_size int Optional The size of a chunk of data whenever iterating (in bytes). This must be a multiple of 256 KB per the API specification. If not specified, the chunk_size of the blob itself is used. If that is not specified, a default value of 40 MB is used. None upload_args Extra arguments accepted by google.cloud.storage.blob.Blob.upload_from_file {} Source code in basedosdados/upload/storage.py def upload ( self , path , mode = \"all\" , partitions = None , if_exists = \"raise\" , chunk_size = None , ** upload_args , ): \"\"\"Upload to storage at `<bucket_name>/<mode>/<dataset_id>/<table_id>`. You can: * Add a single **file** setting `path = <file_path>`. * Add a **folder** with multiple files setting `path = <folder_path>`. *The folder should just contain the files and no folders.* * Add **partitioned files** setting `path = <folder_path>`. This folder must follow the hive partitioning scheme i.e. `<table_id>/<key>=<value>/<key2>=<value2>/<partition>.csv` (ex: `mytable/country=brasil/year=2020/mypart.csv`). *Remember all files must follow a single schema.* Otherwise, things might fail in the future. There are 6 modes: * `raw` : should contain raw files from datasource * `staging` : should contain pre-treated files ready to upload to BiqQuery * `header`: should contain the header of the tables * `auxiliary_files`: should contain auxiliary files from eache table * `architecture`: should contain the architecture sheet of the tables * `all`: if no treatment is needed, use `all`. Args: path (str or pathlib.PosixPath): Where to find the file or folder that you want to upload to storage mode (str): Folder of which dataset to update [raw|staging|header|auxiliary_files|architecture|all] partitions (str, pathlib.PosixPath, or dict): Optional. *If adding a single file*, use this to add it to a specific partition. * str : `<key>=<value>/<key2>=<value2>` * dict: `dict(key=value, key2=value2)` if_exists (str): Optional. What to do if data exists * 'raise' : Raises Conflict exception * 'replace' : Replace table * 'pass' : Do nothing chunk_size (int): Optional The size of a chunk of data whenever iterating (in bytes). This must be a multiple of 256 KB per the API specification. If not specified, the chunk_size of the blob itself is used. If that is not specified, a default value of 40 MB is used. upload_args (): Extra arguments accepted by [`google.cloud.storage.blob.Blob.upload_from_file`](https://googleapis.dev/python/storage/latest/blobs.html?highlight=upload_from_filename#google.cloud.storage.blob.Blob.upload_from_filename) \"\"\" if ( self . dataset_id is None ) or ( self . table_id is None ): raise Exception ( \"You need to pass dataset_id and table_id\" ) path = Path ( path ) if path . is_dir (): paths = [ f for f in path . glob ( \"**/*\" ) if f . is_file () and f . suffix in [ \".csv\" , \".parquet\" , \"parquet.gzip\" ] ] parts = [ ( filepath . as_posix () . replace ( path . as_posix () + \"/\" , \"\" ) . replace ( str ( filepath . name ), \"\" ) ) for filepath in paths ] else : paths = [ path ] parts = [ partitions or None ] self . _check_mode ( mode ) mode = ( [ \"raw\" , \"staging\" , \"header\" , \"auxiliary_files\" , \"architecture\" ] if mode == \"all\" else [ mode ] ) for m in mode : for filepath , part in tqdm ( list ( zip ( paths , parts )), desc = \"Uploading files\" ): blob_name = self . _build_blob_name ( filepath . name , m , part ) blob = self . bucket . blob ( blob_name , chunk_size = chunk_size ) if not blob . exists () or if_exists == \"replace\" : upload_args [ \"timeout\" ] = upload_args . get ( \"timeout\" , None ) blob . upload_from_filename ( str ( filepath ), ** upload_args ) elif if_exists == \"pass\" : pass else : raise BaseDosDadosException ( f \"Data already exists at { self . bucket_name } / { blob_name } . \" \"If you are using Storage.upload then set if_exists to \" \"'replace' to overwrite data \\n \" \"If you are using Table.create then set if_storage_data_exists \" \"to 'replace' to overwrite data.\" ) logger . success ( \" {object} {filename} _ {mode} was {action} !\" , filename = filepath . name , mode = m , object = \"File\" , action = \"uploaded\" , ) Module for manage dataset to the server.","title":"upload()"},{"location":"api_reference_python/#basedosdados.upload.dataset.Dataset","text":"Manage datasets in BigQuery. Source code in basedosdados/upload/dataset.py class Dataset ( Base ): \"\"\" Manage datasets in BigQuery. \"\"\" def __init__ ( self , dataset_id , ** kwargs ): super () . __init__ ( ** kwargs ) self . dataset_id = dataset_id . replace ( \"-\" , \"_\" ) @property @lru_cache def dataset_config ( self ): \"\"\" Dataset config file. \"\"\" return self . backend . get_dataset_config ( self . dataset_id ) def _loop_modes ( self , mode = \"all\" ): \"\"\" Loop modes. \"\"\" def dataset_tag ( m ): return f \"_ { m } \" if m == \"staging\" else \"\" mode = [ \"prod\" , \"staging\" ] if mode == \"all\" else [ mode ] return ( { \"client\" : self . client [ f \"bigquery_ { m } \" ], \"id\" : f \" { self . client [ f 'bigquery_ { m } ' ] . project } . { self . dataset_id }{ dataset_tag ( m ) } \" , \"mode\" : m , } for m in mode ) def _setup_dataset_object ( self , dataset_id , location = None , mode = \"staging\" ): \"\"\" Setup dataset object. \"\"\" dataset = bigquery . Dataset ( dataset_id ) if mode == \"staging\" : dataset_path = dataset_id . replace ( \"_staging\" , \"\" ) description = f \"staging dataset for ` { dataset_path } `\" labels = { \"staging\" : True } else : try : description = self . dataset_config . get ( \"descriptionPt\" , \"\" ) labels = { tag . get ( \"namePt\" ): True for tag in self . dataset_config . get ( \"tags\" ) } except BaseException : logger . warning ( f \"dataset { dataset_id } does not have a description in the API.\" ) description = \"description not available in the API.\" labels = {} dataset . description = description dataset . labels = labels dataset . location = location return dataset def publicize ( self , mode = \"all\" , dataset_is_public = True ): \"\"\"Changes IAM configuration to turn BigQuery dataset public. Args: mode (bool): Which dataset to create [prod|staging|all]. dataset_is_public (bool): Control if prod dataset is public or not. By default staging datasets like `dataset_id_staging` are not public. \"\"\" for m in self . _loop_modes ( mode ): dataset = m [ \"client\" ] . get_dataset ( m [ \"id\" ]) entries = dataset . access_entries # TODO https://github.com/basedosdados/mais/pull/1020 # TODO if staging dataset is private, the prod view can't acess it: if dataset_is_public and \"staging\" not in dataset.dataset_id: if dataset_is_public : if \"staging\" not in dataset . dataset_id : entries . extend ( [ bigquery . AccessEntry ( role = \"roles/bigquery.dataViewer\" , entity_type = \"iamMember\" , entity_id = \"allUsers\" , ), bigquery . AccessEntry ( role = \"roles/bigquery.metadataViewer\" , entity_type = \"iamMember\" , entity_id = \"allUsers\" , ), bigquery . AccessEntry ( role = \"roles/bigquery.user\" , entity_type = \"iamMember\" , entity_id = \"allUsers\" , ), ] ) else : entries . extend ( [ bigquery . AccessEntry ( role = \"roles/bigquery.dataViewer\" , entity_type = \"iamMember\" , entity_id = \"allUsers\" , ), ] ) dataset . access_entries = entries m [ \"client\" ] . update_dataset ( dataset , [ \"access_entries\" ]) logger . success ( \" {object} {object_id} _ {mode} was {action} !\" , object_id = self . dataset_id , mode = m [ \"mode\" ], object = \"Dataset\" , action = \"publicized\" , ) def exists ( self , mode = \"staging\" ): \"\"\" Check if dataset exists. \"\"\" ref_dataset_id = ( self . dataset_id if mode == \"prod\" else self . dataset_id + \"_staging\" ) try : ref = self . client [ f \"bigquery_ { mode } \" ] . get_dataset ( ref_dataset_id ) except Exception : ref = None return bool ( ref ) def create ( self , mode = \"all\" , if_exists = \"raise\" , dataset_is_public = True , location = None ): \"\"\"Creates BigQuery datasets given `dataset_id`. It can create two datasets: * `<dataset_id>` (mode = 'prod') * `<dataset_id>_staging` (mode = 'staging') If `mode` is all, it creates both. Args: mode (str): Optional. Which dataset to create [prod|staging|all]. if_exists (str): Optional. What to do if dataset exists * raise : Raises Conflict exception * replace : Drop all tables and replace dataset * update : Update dataset description * pass : Do nothing dataset_is_public (bool): Control if prod dataset is public or not. By default staging datasets like `dataset_id_staging` are not public. location (str): Optional. Location of dataset data. List of possible region names locations: https://cloud.google.com/bigquery/docs/locations Raises: Warning: Dataset already exists and if_exists is set to `raise` \"\"\" # Set dataset_id to the ID of the dataset to create. for m in self . _loop_modes ( mode ): if if_exists == \"replace\" : self . delete ( mode = m [ \"mode\" ]) elif if_exists == \"update\" : self . update ( mode = m [ \"mode\" ]) continue # Send the dataset to the API for creation, with an explicit timeout. # Raises google.api_core.exceptions.Conflict if the Dataset already # exists within the project. try : if not self . exists ( mode = m [ \"mode\" ]): # Construct a full Dataset object to send to the API. dataset_obj = self . _setup_dataset_object ( dataset_id = m [ \"id\" ], location = location , mode = m [ \"mode\" ] ) m [ \"client\" ] . create_dataset ( dataset_obj ) # Make an API request. logger . success ( \" {object} {object_id} _ {mode} was {action} !\" , object_id = self . dataset_id , mode = m [ \"mode\" ], object = \"Dataset\" , action = \"created\" , ) # Make prod dataset public self . publicize ( dataset_is_public = dataset_is_public , mode = m [ \"mode\" ]) except Conflict as e : if if_exists == \"pass\" : continue raise Conflict ( f \"Dataset { self . dataset_id } already exists\" ) from e def delete ( self , mode = \"all\" ): \"\"\"Deletes dataset in BigQuery. Toogle mode to choose which dataset to delete. Args: mode (str): Optional. Which dataset to delete [prod|staging|all] \"\"\" for m in self . _loop_modes ( mode ): m [ \"client\" ] . delete_dataset ( m [ \"id\" ], delete_contents = True , not_found_ok = True ) logger . info ( \" {object} {object_id} _ {mode} was {action} !\" , object_id = self . dataset_id , mode = m [ \"mode\" ], object = \"Dataset\" , action = \"deleted\" , ) def update ( self , mode = \"all\" , location = None ): \"\"\"Update dataset description. Toogle mode to choose which dataset to update. Args: mode (str): Optional. Which dataset to update [prod|staging|all] location (str): Optional. Location of dataset data. List of possible region names locations: https://cloud.google.com/bigquery/docs/locations \"\"\" for m in self . _loop_modes ( mode ): # Send the dataset to the API to update, with an explicit timeout. # Raises google.api_core.exceptions.Conflict if the Dataset already # exists within the project. m [ \"client\" ] . update_dataset ( self . _setup_dataset_object ( m [ \"id\" ], location = location , mode = m [ \"mode\" ]), fields = [ \"description\" ], ) # Make an API request. logger . success ( \" {object} {object_id} _ {mode} was {action} !\" , object_id = self . dataset_id , mode = m [ \"mode\" ], object = \"Dataset\" , action = \"updated\" , )","title":"Dataset"},{"location":"api_reference_python/#basedosdados.upload.dataset.Dataset.dataset_config","text":"Dataset config file.","title":"dataset_config"},{"location":"api_reference_python/#basedosdados.upload.dataset.Dataset.create","text":"Creates BigQuery datasets given dataset_id . It can create two datasets: <dataset_id> (mode = 'prod') <dataset_id>_staging (mode = 'staging') If mode is all, it creates both. Parameters: Name Type Description Default mode str Optional. Which dataset to create [prod|staging|all]. 'all' if_exists str Optional. What to do if dataset exists raise : Raises Conflict exception replace : Drop all tables and replace dataset update : Update dataset description pass : Do nothing 'raise' dataset_is_public bool Control if prod dataset is public or not. By default staging datasets like dataset_id_staging are not public. True location str Optional. Location of dataset data. List of possible region names locations: https://cloud.google.com/bigquery/docs/locations None Exceptions: Type Description Warning Dataset already exists and if_exists is set to raise Source code in basedosdados/upload/dataset.py def create ( self , mode = \"all\" , if_exists = \"raise\" , dataset_is_public = True , location = None ): \"\"\"Creates BigQuery datasets given `dataset_id`. It can create two datasets: * `<dataset_id>` (mode = 'prod') * `<dataset_id>_staging` (mode = 'staging') If `mode` is all, it creates both. Args: mode (str): Optional. Which dataset to create [prod|staging|all]. if_exists (str): Optional. What to do if dataset exists * raise : Raises Conflict exception * replace : Drop all tables and replace dataset * update : Update dataset description * pass : Do nothing dataset_is_public (bool): Control if prod dataset is public or not. By default staging datasets like `dataset_id_staging` are not public. location (str): Optional. Location of dataset data. List of possible region names locations: https://cloud.google.com/bigquery/docs/locations Raises: Warning: Dataset already exists and if_exists is set to `raise` \"\"\" # Set dataset_id to the ID of the dataset to create. for m in self . _loop_modes ( mode ): if if_exists == \"replace\" : self . delete ( mode = m [ \"mode\" ]) elif if_exists == \"update\" : self . update ( mode = m [ \"mode\" ]) continue # Send the dataset to the API for creation, with an explicit timeout. # Raises google.api_core.exceptions.Conflict if the Dataset already # exists within the project. try : if not self . exists ( mode = m [ \"mode\" ]): # Construct a full Dataset object to send to the API. dataset_obj = self . _setup_dataset_object ( dataset_id = m [ \"id\" ], location = location , mode = m [ \"mode\" ] ) m [ \"client\" ] . create_dataset ( dataset_obj ) # Make an API request. logger . success ( \" {object} {object_id} _ {mode} was {action} !\" , object_id = self . dataset_id , mode = m [ \"mode\" ], object = \"Dataset\" , action = \"created\" , ) # Make prod dataset public self . publicize ( dataset_is_public = dataset_is_public , mode = m [ \"mode\" ]) except Conflict as e : if if_exists == \"pass\" : continue raise Conflict ( f \"Dataset { self . dataset_id } already exists\" ) from e","title":"create()"},{"location":"api_reference_python/#basedosdados.upload.dataset.Dataset.delete","text":"Deletes dataset in BigQuery. Toogle mode to choose which dataset to delete. Parameters: Name Type Description Default mode str Optional. Which dataset to delete [prod|staging|all] 'all' Source code in basedosdados/upload/dataset.py def delete ( self , mode = \"all\" ): \"\"\"Deletes dataset in BigQuery. Toogle mode to choose which dataset to delete. Args: mode (str): Optional. Which dataset to delete [prod|staging|all] \"\"\" for m in self . _loop_modes ( mode ): m [ \"client\" ] . delete_dataset ( m [ \"id\" ], delete_contents = True , not_found_ok = True ) logger . info ( \" {object} {object_id} _ {mode} was {action} !\" , object_id = self . dataset_id , mode = m [ \"mode\" ], object = \"Dataset\" , action = \"deleted\" , )","title":"delete()"},{"location":"api_reference_python/#basedosdados.upload.dataset.Dataset.exists","text":"Check if dataset exists. Source code in basedosdados/upload/dataset.py def exists ( self , mode = \"staging\" ): \"\"\" Check if dataset exists. \"\"\" ref_dataset_id = ( self . dataset_id if mode == \"prod\" else self . dataset_id + \"_staging\" ) try : ref = self . client [ f \"bigquery_ { mode } \" ] . get_dataset ( ref_dataset_id ) except Exception : ref = None return bool ( ref )","title":"exists()"},{"location":"api_reference_python/#basedosdados.upload.dataset.Dataset.publicize","text":"Changes IAM configuration to turn BigQuery dataset public. Parameters: Name Type Description Default mode bool Which dataset to create [prod|staging|all]. 'all' dataset_is_public bool Control if prod dataset is public or not. By default staging datasets like dataset_id_staging are not public. True Source code in basedosdados/upload/dataset.py def publicize ( self , mode = \"all\" , dataset_is_public = True ): \"\"\"Changes IAM configuration to turn BigQuery dataset public. Args: mode (bool): Which dataset to create [prod|staging|all]. dataset_is_public (bool): Control if prod dataset is public or not. By default staging datasets like `dataset_id_staging` are not public. \"\"\" for m in self . _loop_modes ( mode ): dataset = m [ \"client\" ] . get_dataset ( m [ \"id\" ]) entries = dataset . access_entries # TODO https://github.com/basedosdados/mais/pull/1020 # TODO if staging dataset is private, the prod view can't acess it: if dataset_is_public and \"staging\" not in dataset.dataset_id: if dataset_is_public : if \"staging\" not in dataset . dataset_id : entries . extend ( [ bigquery . AccessEntry ( role = \"roles/bigquery.dataViewer\" , entity_type = \"iamMember\" , entity_id = \"allUsers\" , ), bigquery . AccessEntry ( role = \"roles/bigquery.metadataViewer\" , entity_type = \"iamMember\" , entity_id = \"allUsers\" , ), bigquery . AccessEntry ( role = \"roles/bigquery.user\" , entity_type = \"iamMember\" , entity_id = \"allUsers\" , ), ] ) else : entries . extend ( [ bigquery . AccessEntry ( role = \"roles/bigquery.dataViewer\" , entity_type = \"iamMember\" , entity_id = \"allUsers\" , ), ] ) dataset . access_entries = entries m [ \"client\" ] . update_dataset ( dataset , [ \"access_entries\" ]) logger . success ( \" {object} {object_id} _ {mode} was {action} !\" , object_id = self . dataset_id , mode = m [ \"mode\" ], object = \"Dataset\" , action = \"publicized\" , )","title":"publicize()"},{"location":"api_reference_python/#basedosdados.upload.dataset.Dataset.update","text":"Update dataset description. Toogle mode to choose which dataset to update. Parameters: Name Type Description Default mode str Optional. Which dataset to update [prod|staging|all] 'all' location str Optional. Location of dataset data. List of possible region names locations: https://cloud.google.com/bigquery/docs/locations None Source code in basedosdados/upload/dataset.py def update ( self , mode = \"all\" , location = None ): \"\"\"Update dataset description. Toogle mode to choose which dataset to update. Args: mode (str): Optional. Which dataset to update [prod|staging|all] location (str): Optional. Location of dataset data. List of possible region names locations: https://cloud.google.com/bigquery/docs/locations \"\"\" for m in self . _loop_modes ( mode ): # Send the dataset to the API to update, with an explicit timeout. # Raises google.api_core.exceptions.Conflict if the Dataset already # exists within the project. m [ \"client\" ] . update_dataset ( self . _setup_dataset_object ( m [ \"id\" ], location = location , mode = m [ \"mode\" ]), fields = [ \"description\" ], ) # Make an API request. logger . success ( \" {object} {object_id} _ {mode} was {action} !\" , object_id = self . dataset_id , mode = m [ \"mode\" ], object = \"Dataset\" , action = \"updated\" , ) Class for manage tables in Storage and Big Query","title":"update()"},{"location":"api_reference_python/#basedosdados.upload.table.Table","text":"Manage tables in Google Cloud Storage and BigQuery. Source code in basedosdados/upload/table.py class Table ( Base ): \"\"\" Manage tables in Google Cloud Storage and BigQuery. \"\"\" def __init__ ( self , dataset_id , table_id , ** kwargs ): super () . __init__ ( ** kwargs ) self . table_id = table_id . replace ( \"-\" , \"_\" ) self . dataset_id = dataset_id . replace ( \"-\" , \"_\" ) self . table_full_name = dict ( prod = f \" { self . client [ 'bigquery_prod' ] . project } . { self . dataset_id } . { self . table_id } \" , staging = f \" { self . client [ 'bigquery_staging' ] . project } . { self . dataset_id } _staging. { self . table_id } \" , ) self . table_full_name . update ( dict ( all = deepcopy ( self . table_full_name ))) @property @lru_cache ( 256 ) def table_config ( self ): \"\"\" Load table config \"\"\" # return self._load_yaml(self.table_folder / \"table_config.yaml\") return self . backend . get_table_config ( self . dataset_id , self . table_id ) def _get_table_obj ( self , mode ): \"\"\" Get table object from BigQuery \"\"\" return self . client [ f \"bigquery_ { mode } \" ] . get_table ( self . table_full_name [ mode ]) def _is_partitioned ( self , data_sample_path = None , source_format = None , csv_delimiter = None ): if data_sample_path is not None : table_columns = self . _get_columns_from_data ( data_sample_path = data_sample_path , source_format = source_format , csv_delimiter = csv_delimiter , mode = \"staging\" , ) else : table_columns = self . _get_columns_metadata_from_api () return bool ( table_columns . get ( \"partition_columns\" , [])) def _load_schema_from_json ( self , columns = None , ): schema = [] for col in columns : # ref: https://cloud.google.com/python/docs/reference/bigquery/latest/google.cloud.bigquery.schema.SchemaField if col . get ( \"name\" ) is None : msg = \"Columns must have a name! Check your data files for columns without name\" raise BaseDosDadosException ( msg ) schema . append ( SchemaField ( name = col . get ( \"name\" ), field_type = col . get ( \"type\" ), description = col . get ( \"description\" , None ), ) ) return schema def _load_staging_schema_from_data ( self , data_sample_path = None , source_format = \"csv\" , csv_delimiter = \",\" ): \"\"\" Generate schema from columns metadata in data sample \"\"\" if self . table_exists ( mode = \"staging\" ): logger . warning ( \" {object} {object_id} allready exists, replacing schema!\" , object_id = self . table_id , object = \"Table\" , ) table_columns = self . _get_columns_from_data ( data_sample_path = data_sample_path , source_format = source_format , csv_delimiter = csv_delimiter , mode = \"staging\" , ) return self . _load_schema_from_json ( columns = table_columns . get ( \"columns\" )) def _load_schema_from_bq ( self , mode = \"staging\" ): \"\"\"Load schema from table config Args: mode (bool): Which dataset to create [prod|staging]. \"\"\" table_columns = self . _get_columns_from_bq () columns = table_columns . get ( \"partition_columns\" ) + table_columns . get ( \"columns\" ) return self . _load_schema_from_json ( columns = columns ) def _load_schema_from_api ( self , mode = \"staging\" ): \"\"\"Load schema from table config Args: mode (bool): Which dataset to create [prod|staging]. \"\"\" if self . table_exists ( mode = mode ): logger . warning ( \" {object} {object_id} allready exists, replacing schema!\" , object_id = self . table_id , object = \"Table\" , ) table_columns = self . _get_columns_metadata_from_api () columns = table_columns . get ( \"partition_columns\" ) + table_columns . get ( \"columns\" ) return self . _load_schema_from_json ( columns = columns ) def _get_columns_from_data ( self , data_sample_path = None , source_format = \"csv\" , csv_delimiter = \",\" , mode = \"staging\" , ): # sourcery skip: low-code-quality \"\"\" Get the partition columns from the structure of data_sample_path. Args: data_sample_path (str, pathlib.PosixPath): Optional. Data sample path to auto complete columns names It supports Comma Delimited CSV, Apache Avro and Apache Parquet. source_format (str): Optional Data source format. Only 'csv', 'avro' and 'parquet' are supported. Defaults to 'csv'. \"\"\" partition_columns = [] if isinstance ( data_sample_path , ( str , Path , ), ): # Check if partitioned and get data sample and partition columns data_sample_path = Path ( data_sample_path ) if data_sample_path . is_dir (): data_sample_path = [ f for f in data_sample_path . glob ( \"**/*\" ) if f . is_file () and f . suffix == f \". { source_format } \" ][ 0 ] partition_columns = [ k . split ( \"=\" )[ 0 ] for k in data_sample_path . as_posix () . split ( \"/\" ) if \"=\" in k ] columns = Datatype ( source_format = source_format ) . header ( data_sample_path = data_sample_path , csv_delimiter = csv_delimiter ) return { \"columns\" : [{ \"name\" : col , \"type\" : \"STRING\" } for col in columns ], \"partition_columns\" : [ { \"name\" : col , \"type\" : \"STRING\" } for col in partition_columns ], } def _get_columns_metadata_from_api ( self , ): \"\"\" Get columns and partition columns from API. \"\"\" table_columns = self . table_config . get ( \"columns\" , {}) columns = [ col for col in table_columns if col . get ( \"isPartition\" , {}) is False ] partition_columns = [ col for col in table_columns if col . get ( \"isPartition\" , {}) is True ] return { \"columns\" : [ { \"name\" : col . get ( \"name\" ), \"type\" : col . get ( \"bigqueryType\" ) . get ( \"name\" ), \"description\" : col . get ( \"descriptionPt\" ), } for col in columns ], \"partition_columns\" : [ { \"name\" : col . get ( \"name\" ), \"type\" : col . get ( \"bigqueryType\" ) . get ( \"name\" ), \"description\" : col . get ( \"descriptionPt\" ), } for col in partition_columns ], } def _parser_blobs_to_partition_dict ( self ) -> dict : \"\"\" Extracts the partition information from the blobs. \"\"\" if not self . table_exists ( mode = \"staging\" ): return blobs = ( self . client [ \"storage_staging\" ] . bucket ( self . bucket_name ) . list_blobs ( prefix = f \"staging/ { self . dataset_id } / { self . table_id } /\" ) ) partitions_dict = {} # only needs the first bloob for blob in blobs : for folder in blob . name . split ( \"/\" ): if \"=\" in folder : key = folder . split ( \"=\" )[ 0 ] value = folder . split ( \"=\" ) try : partitions_dict [ key ] . append ( value ) except KeyError : partitions_dict [ key ] = [ value ] return partitions_dict def _get_columns_from_bq ( self , mode = \"staging\" ): if not self . table_exists ( mode = mode ): msg = f \"Table { self . dataset_id } . { self . table_id } does not exist in { mode } , please create first!\" raise logger . error ( msg ) else : schema = self . _get_table_obj ( mode = mode ) . schema partition_dict = self . _parser_blobs_to_partition_dict () if partition_dict : partition_columns = list ( partition_dict . keys ()) else : partition_columns = [] return { \"columns\" : [ { \"name\" : col . name , \"type\" : col . field_type , \"description\" : col . description , } for col in schema if col . name not in partition_columns ], \"partition_columns\" : [ { \"name\" : col . name , \"type\" : col . field_type , \"description\" : col . description , } for col in schema if col . name in partition_columns ], } def _get_cross_columns_from_bq_api ( self ): bq = self . _get_columns_from_bq ( mode = \"staging\" ) bq_columns = bq . get ( \"partition_columns\" ) + bq . get ( \"columns\" ) api = self . _get_columns_metadata_from_api () api_columns = api . get ( \"partition_columns\" ) + api . get ( \"columns\" ) if api_columns != []: for bq_col in bq_columns : for api_col in api_columns : if bq_col . get ( \"name\" ) == api_col . get ( \"name\" ): bq_col [ \"type\" ] = api_col . get ( \"type\" ) bq_col [ \"description\" ] = api_col . get ( \"description\" ) return bq_columns def _make_publish_sql ( self ): \"\"\"Create publish.sql with columns and bigquery_type\"\"\" # publish.sql header and instructions publish_txt = \"\"\" /* Query para publicar a tabela. Esse \u00e9 o lugar para: - modificar nomes, ordem e tipos de colunas - dar join com outras tabelas - criar colunas extras (e.g. logs, propor\u00e7\u00f5es, etc.) Qualquer coluna definida aqui deve tamb\u00e9m existir em `table_config.yaml`. # Al\u00e9m disso, sinta-se \u00e0 vontade para alterar alguns nomes obscuros # para algo um pouco mais expl\u00edcito. TIPOS: - Para modificar tipos de colunas, basta substituir STRING por outro tipo v\u00e1lido. - Exemplo: `SAFE_CAST(column_name AS NUMERIC) column_name` - Mais detalhes: https://cloud.google.com/bigquery/docs/reference/standard-sql/data-types */ \"\"\" # table_columns = self._get_columns_from_api(mode=\"staging\") columns = self . _get_cross_columns_from_bq_api () # remove triple quotes extra space publish_txt = inspect . cleandoc ( publish_txt ) publish_txt = textwrap . dedent ( publish_txt ) # add create table statement project_id_prod = self . client [ \"bigquery_prod\" ] . project publish_txt += f \" \\n\\n CREATE OR REPLACE VIEW { project_id_prod } . { self . dataset_id } . { self . table_id } AS \\n SELECT \\n \" # sort columns by is_partition, partitions_columns come first # add columns in publish.sql for col in columns : name = col . get ( \"name\" ) bigquery_type = ( \"STRING\" if col . get ( \"type\" ) is None else col . get ( \"type\" ) . upper () ) publish_txt += f \"SAFE_CAST( { name } AS { bigquery_type } ) { name } , \\n \" # remove last comma publish_txt = publish_txt [: - 2 ] + \" \\n \" # add from statement project_id_staging = self . client [ \"bigquery_staging\" ] . project publish_txt += ( f \"FROM { project_id_staging } . { self . dataset_id } _staging. { self . table_id } AS t\" ) return publish_txt def table_exists ( self , mode ): \"\"\"Check if table exists in BigQuery. Args: mode (str): Which dataset to check [prod|staging]. \"\"\" try : ref = self . _get_table_obj ( mode = mode ) except google . api_core . exceptions . NotFound : ref = None return bool ( ref ) def _get_biglake_connection ( self , set_biglake_connection_permissions = True , location = None , mode = \"staging\" ): connection = Connection ( name = \"biglake\" , location = location , mode = \"staging\" ) if not connection . exists : try : logger . info ( \"Creating BigLake connection...\" ) connection . create () logger . success ( \"BigLake connection created!\" ) except google . api_core . exceptions . Forbidden as exc : logger . error ( \"You don't have permission to create a BigLake connection. \" \"Please contact an admin to create one for you.\" ) raise BaseDosDadosException ( \"You don't have permission to create a BigLake connection. \" \"Please contact an admin to create one for you.\" ) from exc except Exception as exc : logger . error ( \"Something went wrong while creating the BigLake connection. \" \"Please contact an admin to create one for you.\" ) raise BaseDosDadosException ( \"Something went wrong while creating the BigLake connection. \" \"Please contact an admin to create one for you.\" ) from exc if set_biglake_connection_permissions : try : logger . info ( \"Setting permissions for BigLake service account...\" ) connection . set_biglake_permissions () logger . success ( \"Permissions set successfully!\" ) except google . api_core . exceptions . Forbidden as exc : logger . error ( \"Could not set permissions for BigLake service account. \" \"Please make sure you have permissions to grant roles/storage.objectViewer\" f \" to the BigLake service account. ( { connection . service_account } ).\" \" If you don't, please ask an admin to do it for you or set \" \"set_biglake_connection_permissions=False.\" ) raise BaseDosDadosException ( \"Could not set permissions for BigLake service account. \" \"Please make sure you have permissions to grant roles/storage.objectViewer\" f \" to the BigLake service account. ( { connection . service_account } ).\" \" If you don't, please ask an admin to do it for you or set \" \"set_biglake_connection_permissions=False.\" ) from exc except Exception as exc : logger . error ( \"Something went wrong while setting permissions for BigLake service account. \" \"Please make sure you have permissions to grant roles/storage.objectViewer\" f \" to the BigLake service account. ( { connection . service_account } ).\" \" If you don't, please ask an admin to do it for you or set \" \"set_biglake_connection_permissions=False.\" ) raise BaseDosDadosException ( \"Something went wrong while setting permissions for BigLake service account. \" \"Please make sure you have permissions to grant roles/storage.objectViewer\" f \" to the BigLake service account. ( { connection . service_account } ).\" \" If you don't, please ask an admin to do it for you or set \" \"set_biglake_connection_permissions=False.\" ) from exc return connection def _get_table_description ( self , mode = \"staging\" ): \"\"\"Adds table description to BigQuery table. Args: table_obj (google.cloud.bigquery.table.Table): Table object. mode (str): Which dataset to check [prod|staging]. \"\"\" table_path = self . table_full_name [ \"prod\" ] if mode == \"staging\" : description = f \"staging table for ` { table_path } `\" else : try : description = self . table_config . get ( \"descriptionPt\" , \"\" ) except BaseException : logger . warning ( f \"table { self . table_id } does not have a description in the API.\" ) description = \"description not available in the API.\" return description def create ( self , path = None , source_format = \"csv\" , csv_delimiter = \",\" , csv_skip_leading_rows = 1 , csv_allow_jagged_rows = False , if_table_exists = \"raise\" , if_storage_data_exists = \"raise\" , if_dataset_exists = \"pass\" , dataset_is_public = True , location = None , chunk_size = None , biglake_table = False , set_biglake_connection_permissions = True , ): \"\"\"Creates a BigQuery table in the staging dataset. If a path is provided, data is automatically saved in storage, and a datasets folder and BigQuery location are created, in addition to creating the table and its configuration files. The new table is located at `<dataset_id>_staging.<table_id>` in BigQuery. Data can be found in Storage at `<bucket_name>/staging/<dataset_id>/<table_id>/*` and is used to build the table. The following data types are supported: - Comma-Delimited CSV - Apache Avro - Apache Parquet Data can also be partitioned following the Hive partitioning scheme `<key1>=<value1>/<key2>=<value2>`; for example, `year=2012/country=BR`. The partition is automatically detected by searching for `partitions` in the `table_config.yaml` file. Args: path (str or pathlib.PosixPath): The path to the file to be uploaded to create the table. source_format (str): Optional. The format of the data source. Only 'csv', 'avro', and 'parquet' are supported. Defaults to 'csv'. csv_delimiter (str): Optional. The separator for fields in a CSV file. The separator can be any ISO-8859-1 single-byte character. Defaults to ','. csv_skip_leading_rows(int): Optional. The number of rows at the top of a CSV file that BigQuery will skip when loading the data. Defaults to 1. csv_allow_jagged_rows (bool): Optional. Indicates if BigQuery should allow extra values that are not represented in the table schema. Defaults to False. if_table_exists (str): Optional. Determines what to do if the table already exists: * 'raise' : Raises a Conflict exception * 'replace' : Replaces the table * 'pass' : Does nothing if_storage_data_exists (str): Optional. Determines what to do if the data already exists on your bucket: * 'raise' : Raises a Conflict exception * 'replace' : Replaces the table * 'pass' : Does nothing if_dataset_exists (str): Optional. Determines what to do if the dataset already exists: * 'raise' : Raises a Conflict exception * 'replace' : Replaces the dataset * 'pass' : Does nothing dataset_is_public (bool): Optional. Controls if the prod dataset is public or not. By default, staging datasets like `dataset_id_staging` are not public. location (str): Optional. The location of the dataset data. List of possible region names locations: https://cloud.google.com/bigquery/docs/locations chunk_size (int): Optional. The size of a chunk of data whenever iterating (in bytes). This must be a multiple of 256 KB per the API specification. If not specified, the chunk_size of the blob itself is used. If that is not specified, a default value of 40 MB is used. biglake_table (bool): Optional. Sets this as a BigLake table. BigLake tables allow end-users to query from external data (such as GCS) even if they don't have access to the source data. IAM is managed like any other BigQuery native table. See https://cloud.google.com/bigquery/docs/biglake-intro for more on BigLake. set_biglake_connection_permissions (bool): Optional. If set to `True`, attempts to grant the BigLake connection service account access to the table's data in GCS. \"\"\" if path is None : # Look if table data already exists at Storage data = self . client [ \"storage_staging\" ] . list_blobs ( self . bucket_name , prefix = f \"staging/ { self . dataset_id } / { self . table_id } \" ) # Raise: Cannot create table without external data if not data : raise BaseDosDadosException ( \"You must provide a path for uploading data\" ) # Add data to storage if isinstance ( path , ( str , Path , ), ): Storage ( dataset_id = self . dataset_id , table_id = self . table_id , config_path = self . config_path , bucket_name = self . bucket_name , ) . upload ( path = path , mode = \"staging\" , if_exists = if_storage_data_exists , chunk_size = chunk_size , ) # Create Dataset if it doesn't exist dataset_obj = Dataset ( self . dataset_id , ) dataset_obj . create ( if_exists = if_dataset_exists , mode = \"all\" , location = location , dataset_is_public = dataset_is_public , ) if biglake_table : biglake_connection = self . _get_biglake_connection ( set_biglake_connection_permissions = set_biglake_connection_permissions , location = location , mode = \"staging\" , ) biglake_connection_id = biglake_connection . connection_id table = bigquery . Table ( self . table_full_name [ \"staging\" ]) table . description = self . _get_table_description ( mode = \"staging\" ) table . external_data_configuration = Datatype ( dataset_id = self . dataset_id , table_id = self . table_id , schema = self . _load_staging_schema_from_data ( data_sample_path = path , source_format = source_format , csv_delimiter = csv_delimiter , ), source_format = source_format , csv_skip_leading_rows = csv_skip_leading_rows , csv_delimiter = csv_delimiter , csv_allow_jagged_rows = csv_allow_jagged_rows , mode = \"staging\" , bucket_name = self . bucket_name , partitioned = self . _is_partitioned ( data_sample_path = path , source_format = source_format , csv_delimiter = csv_delimiter , ), biglake_connection_id = biglake_connection_id if biglake_table else None , ) . external_config # When using BigLake tables, schema must be provided to the `Table` object if biglake_table : table . schema = self . _load_staging_schema_from_data ( data_sample_path = path , source_format = source_format , csv_delimiter = csv_delimiter , ) logger . info ( f \"Using BigLake connection { biglake_connection_id } \" ) # Lookup if table alreay exists table_ref = None with contextlib . suppress ( google . api_core . exceptions . NotFound ): table_ref = self . client [ \"bigquery_staging\" ] . get_table ( self . table_full_name [ \"staging\" ] ) if isinstance ( table_ref , google . cloud . bigquery . table . Table ): if if_table_exists == \"pass\" : return None if if_table_exists == \"raise\" : raise FileExistsError ( \"Table already exists, choose replace if you want to overwrite it\" ) if if_table_exists == \"replace\" and self . table_exists ( mode = \"staging\" ): self . delete ( mode = \"staging\" ) try : self . client [ \"bigquery_staging\" ] . create_table ( table ) except google . api_core . exceptions . Forbidden as exc : if biglake_table : raise BaseDosDadosException ( \"Permission denied. The service account used to create the BigLake connection\" \" does not have permission to read data from the source bucket. Please grant\" f \" the service account { biglake_connection . service_account } the Storage Object Viewer\" \" (roles/storage.objectViewer) role on the source bucket (or on the project).\" \" Or, you can try running this again with set_biglake_connection_permissions=True.\" ) from exc raise BaseDosDadosException ( \"Something went wrong when creating the table. Please check the logs for more information.\" ) from exc except Exception as exc : raise BaseDosDadosException ( \"Something went wrong when creating the table. Please check the logs for more information.\" ) from exc logger . success ( \" {object} {object_id} was {action} in {mode} !\" , object_id = self . table_id , mode = \"staging\" , object = \"Table\" , action = \"created\" , ) # return None def update ( self , mode = \"prod\" , custom_schema = None ): \"\"\"Updates BigQuery schema and description. Args: mode (str): Optional. Table of which table to update [prod] not_found_ok (bool): Optional. What to do if table is not found \"\"\" self . _check_mode ( mode ) table = self . _get_table_obj ( mode ) table . description = self . _get_table_description () # when mode is staging the table schema already exists if mode == \"prod\" and custom_schema is None : table . schema = self . _load_schema_from_json ( columns = self . _get_cross_columns_from_bq_api () ) if mode == \"prod\" and custom_schema is not None : table . schema = self . _load_schema_from_json ( custom_schema ) fields = [ \"description\" , \"schema\" ] self . client [ \"bigquery_prod\" ] . update_table ( table , fields = fields ) logger . success ( \" {object} {object_id} was {action} in {mode} !\" , object_id = self . table_id , mode = mode , object = \"Table\" , action = \"updated\" , ) def publish ( self , if_exists = \"raise\" , custon_publish_sql = None , custom_schema = None ): \"\"\"Creates BigQuery table at production dataset. Table should be located at `<dataset_id>.<table_id>`. It creates a view that uses the query from `<metadata_path>/<dataset_id>/<table_id>/publish.sql`. Make sure that all columns from the query also exists at `<metadata_path>/<dataset_id>/<table_id>/table_config.sql`, including the partitions. Args: if_exists (str): Optional. What to do if table exists. * 'raise' : Raises Conflict exception * 'replace' : Replace table * 'pass' : Do nothing Todo: * Check if all required fields are filled \"\"\" # TODO: review this method if if_exists == \"replace\" and self . table_exists ( mode = \"prod\" ): self . delete ( mode = \"prod\" ) publish_sql = self . _make_publish_sql () # create view using API metadata if custon_publish_sql is None : self . client [ \"bigquery_prod\" ] . query ( publish_sql ) . result () self . update ( mode = \"prod\" ) # create view using custon query if custon_publish_sql is not None : self . client [ \"bigquery_prod\" ] . query ( custon_publish_sql ) . result () # update schema using a custom schema if custom_schema is not None : self . update ( custom_schema = custom_schema ) logger . success ( \" {object} {object_id} was {action} !\" , object_id = self . table_id , object = \"Table\" , action = \"published\" , ) def delete ( self , mode = \"all\" ): \"\"\"Deletes table in BigQuery. Args: mode (str): Table of which table to delete [prod|staging] \"\"\" self . _check_mode ( mode ) if mode == \"all\" : for m , n in self . table_full_name [ mode ] . items (): self . client [ f \"bigquery_ { m } \" ] . delete_table ( n , not_found_ok = True ) logger . info ( \" {object} {object_id} _ {mode} was {action} !\" , object_id = self . table_id , mode = m , object = \"Table\" , action = \"deleted\" , ) else : self . client [ f \"bigquery_ { mode } \" ] . delete_table ( self . table_full_name [ mode ], not_found_ok = True ) logger . info ( \" {object} {object_id} _ {mode} was {action} !\" , object_id = self . table_id , mode = mode , object = \"Table\" , action = \"deleted\" , ) def append ( self , filepath , partitions = None , if_exists = \"replace\" , chunk_size = None , ** upload_args , ): \"\"\"Appends new data to existing BigQuery table. As long as the data has the same schema. It appends the data in the filepath to the existing table. Args: filepath (str or pathlib.PosixPath): Where to find the file that you want to upload to create a table with partitions (str, pathlib.PosixPath, dict): Optional. Hive structured partition as a string or dict * str : `<key>=<value>/<key2>=<value2>` * dict: `dict(key=value, key2=value2)` if_exists (str): 0ptional. What to do if data with same name exists in storage * 'raise' : Raises Conflict exception * 'replace' : Replace table * 'pass' : Do nothing chunk_size (int): Optional The size of a chunk of data whenever iterating (in bytes). This must be a multiple of 256 KB per the API specification. If not specified, the chunk_size of the blob itself is used. If that is not specified, a default value of 40 MB is used. \"\"\" if not self . table_exists ( \"staging\" ): raise BaseDosDadosException ( \"You cannot append to a table that does not exist\" ) Storage ( self . dataset_id , self . table_id , ) . upload ( filepath , mode = \"staging\" , partitions = partitions , if_exists = if_exists , chunk_size = chunk_size , ** upload_args , ) logger . success ( \" {object} {object_id} was {action} !\" , object_id = self . table_id , object = \"Table\" , action = \"appended\" , )","title":"Table"},{"location":"api_reference_python/#basedosdados.upload.table.Table.table_config","text":"Load table config","title":"table_config"},{"location":"api_reference_python/#basedosdados.upload.table.Table.append","text":"Appends new data to existing BigQuery table. As long as the data has the same schema. It appends the data in the filepath to the existing table. Parameters: Name Type Description Default filepath str or pathlib.PosixPath Where to find the file that you want to upload to create a table with required partitions str, pathlib.PosixPath, dict Optional. Hive structured partition as a string or dict str : <key>=<value>/<key2>=<value2> dict: dict(key=value, key2=value2) None if_exists str 0ptional. What to do if data with same name exists in storage 'raise' : Raises Conflict exception 'replace' : Replace table 'pass' : Do nothing 'replace' chunk_size int Optional The size of a chunk of data whenever iterating (in bytes). This must be a multiple of 256 KB per the API specification. If not specified, the chunk_size of the blob itself is used. If that is not specified, a default value of 40 MB is used. None Source code in basedosdados/upload/table.py def append ( self , filepath , partitions = None , if_exists = \"replace\" , chunk_size = None , ** upload_args , ): \"\"\"Appends new data to existing BigQuery table. As long as the data has the same schema. It appends the data in the filepath to the existing table. Args: filepath (str or pathlib.PosixPath): Where to find the file that you want to upload to create a table with partitions (str, pathlib.PosixPath, dict): Optional. Hive structured partition as a string or dict * str : `<key>=<value>/<key2>=<value2>` * dict: `dict(key=value, key2=value2)` if_exists (str): 0ptional. What to do if data with same name exists in storage * 'raise' : Raises Conflict exception * 'replace' : Replace table * 'pass' : Do nothing chunk_size (int): Optional The size of a chunk of data whenever iterating (in bytes). This must be a multiple of 256 KB per the API specification. If not specified, the chunk_size of the blob itself is used. If that is not specified, a default value of 40 MB is used. \"\"\" if not self . table_exists ( \"staging\" ): raise BaseDosDadosException ( \"You cannot append to a table that does not exist\" ) Storage ( self . dataset_id , self . table_id , ) . upload ( filepath , mode = \"staging\" , partitions = partitions , if_exists = if_exists , chunk_size = chunk_size , ** upload_args , ) logger . success ( \" {object} {object_id} was {action} !\" , object_id = self . table_id , object = \"Table\" , action = \"appended\" , )","title":"append()"},{"location":"api_reference_python/#basedosdados.upload.table.Table.create","text":"Creates a BigQuery table in the staging dataset. If a path is provided, data is automatically saved in storage, and a datasets folder and BigQuery location are created, in addition to creating the table and its configuration files. The new table is located at <dataset_id>_staging.<table_id> in BigQuery. Data can be found in Storage at <bucket_name>/staging/<dataset_id>/<table_id>/* and is used to build the table. The following data types are supported: Comma-Delimited CSV Apache Avro Apache Parquet Data can also be partitioned following the Hive partitioning scheme <key1>=<value1>/<key2>=<value2> ; for example, year=2012/country=BR . The partition is automatically detected by searching for partitions in the table_config.yaml file. Parameters: Name Type Description Default path str or pathlib.PosixPath The path to the file to be uploaded to create the table. None source_format str Optional. The format of the data source. Only 'csv', 'avro', and 'parquet' are supported. Defaults to 'csv'. 'csv' csv_delimiter str Optional. The separator for fields in a CSV file. The separator can be any ISO-8859-1 single-byte character. Defaults to ','. ',' csv_skip_leading_rows(int) Optional. The number of rows at the top of a CSV file that BigQuery will skip when loading the data. Defaults to 1. required csv_allow_jagged_rows bool Optional. Indicates if BigQuery should allow extra values that are not represented in the table schema. Defaults to False. False if_table_exists str Optional. Determines what to do if the table already exists: 'raise' : Raises a Conflict exception 'replace' : Replaces the table 'pass' : Does nothing 'raise' if_storage_data_exists str Optional. Determines what to do if the data already exists on your bucket: 'raise' : Raises a Conflict exception 'replace' : Replaces the table 'pass' : Does nothing 'raise' if_dataset_exists str Optional. Determines what to do if the dataset already exists: 'raise' : Raises a Conflict exception 'replace' : Replaces the dataset 'pass' : Does nothing 'pass' dataset_is_public bool Optional. Controls if the prod dataset is public or not. By default, staging datasets like dataset_id_staging are not public. True location str Optional. The location of the dataset data. List of possible region names locations: https://cloud.google.com/bigquery/docs/locations None chunk_size int Optional. The size of a chunk of data whenever iterating (in bytes). This must be a multiple of 256 KB per the API specification. If not specified, the chunk_size of the blob itself is used. If that is not specified, a default value of 40 MB is used. None biglake_table bool Optional. Sets this as a BigLake table. BigLake tables allow end-users to query from external data (such as GCS) even if they don't have access to the source data. IAM is managed like any other BigQuery native table. See https://cloud.google.com/bigquery/docs/biglake-intro for more on BigLake. False set_biglake_connection_permissions bool Optional. If set to True , attempts to grant the BigLake connection service account access to the table's data in GCS. True Source code in basedosdados/upload/table.py def create ( self , path = None , source_format = \"csv\" , csv_delimiter = \",\" , csv_skip_leading_rows = 1 , csv_allow_jagged_rows = False , if_table_exists = \"raise\" , if_storage_data_exists = \"raise\" , if_dataset_exists = \"pass\" , dataset_is_public = True , location = None , chunk_size = None , biglake_table = False , set_biglake_connection_permissions = True , ): \"\"\"Creates a BigQuery table in the staging dataset. If a path is provided, data is automatically saved in storage, and a datasets folder and BigQuery location are created, in addition to creating the table and its configuration files. The new table is located at `<dataset_id>_staging.<table_id>` in BigQuery. Data can be found in Storage at `<bucket_name>/staging/<dataset_id>/<table_id>/*` and is used to build the table. The following data types are supported: - Comma-Delimited CSV - Apache Avro - Apache Parquet Data can also be partitioned following the Hive partitioning scheme `<key1>=<value1>/<key2>=<value2>`; for example, `year=2012/country=BR`. The partition is automatically detected by searching for `partitions` in the `table_config.yaml` file. Args: path (str or pathlib.PosixPath): The path to the file to be uploaded to create the table. source_format (str): Optional. The format of the data source. Only 'csv', 'avro', and 'parquet' are supported. Defaults to 'csv'. csv_delimiter (str): Optional. The separator for fields in a CSV file. The separator can be any ISO-8859-1 single-byte character. Defaults to ','. csv_skip_leading_rows(int): Optional. The number of rows at the top of a CSV file that BigQuery will skip when loading the data. Defaults to 1. csv_allow_jagged_rows (bool): Optional. Indicates if BigQuery should allow extra values that are not represented in the table schema. Defaults to False. if_table_exists (str): Optional. Determines what to do if the table already exists: * 'raise' : Raises a Conflict exception * 'replace' : Replaces the table * 'pass' : Does nothing if_storage_data_exists (str): Optional. Determines what to do if the data already exists on your bucket: * 'raise' : Raises a Conflict exception * 'replace' : Replaces the table * 'pass' : Does nothing if_dataset_exists (str): Optional. Determines what to do if the dataset already exists: * 'raise' : Raises a Conflict exception * 'replace' : Replaces the dataset * 'pass' : Does nothing dataset_is_public (bool): Optional. Controls if the prod dataset is public or not. By default, staging datasets like `dataset_id_staging` are not public. location (str): Optional. The location of the dataset data. List of possible region names locations: https://cloud.google.com/bigquery/docs/locations chunk_size (int): Optional. The size of a chunk of data whenever iterating (in bytes). This must be a multiple of 256 KB per the API specification. If not specified, the chunk_size of the blob itself is used. If that is not specified, a default value of 40 MB is used. biglake_table (bool): Optional. Sets this as a BigLake table. BigLake tables allow end-users to query from external data (such as GCS) even if they don't have access to the source data. IAM is managed like any other BigQuery native table. See https://cloud.google.com/bigquery/docs/biglake-intro for more on BigLake. set_biglake_connection_permissions (bool): Optional. If set to `True`, attempts to grant the BigLake connection service account access to the table's data in GCS. \"\"\" if path is None : # Look if table data already exists at Storage data = self . client [ \"storage_staging\" ] . list_blobs ( self . bucket_name , prefix = f \"staging/ { self . dataset_id } / { self . table_id } \" ) # Raise: Cannot create table without external data if not data : raise BaseDosDadosException ( \"You must provide a path for uploading data\" ) # Add data to storage if isinstance ( path , ( str , Path , ), ): Storage ( dataset_id = self . dataset_id , table_id = self . table_id , config_path = self . config_path , bucket_name = self . bucket_name , ) . upload ( path = path , mode = \"staging\" , if_exists = if_storage_data_exists , chunk_size = chunk_size , ) # Create Dataset if it doesn't exist dataset_obj = Dataset ( self . dataset_id , ) dataset_obj . create ( if_exists = if_dataset_exists , mode = \"all\" , location = location , dataset_is_public = dataset_is_public , ) if biglake_table : biglake_connection = self . _get_biglake_connection ( set_biglake_connection_permissions = set_biglake_connection_permissions , location = location , mode = \"staging\" , ) biglake_connection_id = biglake_connection . connection_id table = bigquery . Table ( self . table_full_name [ \"staging\" ]) table . description = self . _get_table_description ( mode = \"staging\" ) table . external_data_configuration = Datatype ( dataset_id = self . dataset_id , table_id = self . table_id , schema = self . _load_staging_schema_from_data ( data_sample_path = path , source_format = source_format , csv_delimiter = csv_delimiter , ), source_format = source_format , csv_skip_leading_rows = csv_skip_leading_rows , csv_delimiter = csv_delimiter , csv_allow_jagged_rows = csv_allow_jagged_rows , mode = \"staging\" , bucket_name = self . bucket_name , partitioned = self . _is_partitioned ( data_sample_path = path , source_format = source_format , csv_delimiter = csv_delimiter , ), biglake_connection_id = biglake_connection_id if biglake_table else None , ) . external_config # When using BigLake tables, schema must be provided to the `Table` object if biglake_table : table . schema = self . _load_staging_schema_from_data ( data_sample_path = path , source_format = source_format , csv_delimiter = csv_delimiter , ) logger . info ( f \"Using BigLake connection { biglake_connection_id } \" ) # Lookup if table alreay exists table_ref = None with contextlib . suppress ( google . api_core . exceptions . NotFound ): table_ref = self . client [ \"bigquery_staging\" ] . get_table ( self . table_full_name [ \"staging\" ] ) if isinstance ( table_ref , google . cloud . bigquery . table . Table ): if if_table_exists == \"pass\" : return None if if_table_exists == \"raise\" : raise FileExistsError ( \"Table already exists, choose replace if you want to overwrite it\" ) if if_table_exists == \"replace\" and self . table_exists ( mode = \"staging\" ): self . delete ( mode = \"staging\" ) try : self . client [ \"bigquery_staging\" ] . create_table ( table ) except google . api_core . exceptions . Forbidden as exc : if biglake_table : raise BaseDosDadosException ( \"Permission denied. The service account used to create the BigLake connection\" \" does not have permission to read data from the source bucket. Please grant\" f \" the service account { biglake_connection . service_account } the Storage Object Viewer\" \" (roles/storage.objectViewer) role on the source bucket (or on the project).\" \" Or, you can try running this again with set_biglake_connection_permissions=True.\" ) from exc raise BaseDosDadosException ( \"Something went wrong when creating the table. Please check the logs for more information.\" ) from exc except Exception as exc : raise BaseDosDadosException ( \"Something went wrong when creating the table. Please check the logs for more information.\" ) from exc logger . success ( \" {object} {object_id} was {action} in {mode} !\" , object_id = self . table_id , mode = \"staging\" , object = \"Table\" , action = \"created\" , ) # return None","title":"create()"},{"location":"api_reference_python/#basedosdados.upload.table.Table.delete","text":"Deletes table in BigQuery. Parameters: Name Type Description Default mode str Table of which table to delete [prod|staging] 'all' Source code in basedosdados/upload/table.py def delete ( self , mode = \"all\" ): \"\"\"Deletes table in BigQuery. Args: mode (str): Table of which table to delete [prod|staging] \"\"\" self . _check_mode ( mode ) if mode == \"all\" : for m , n in self . table_full_name [ mode ] . items (): self . client [ f \"bigquery_ { m } \" ] . delete_table ( n , not_found_ok = True ) logger . info ( \" {object} {object_id} _ {mode} was {action} !\" , object_id = self . table_id , mode = m , object = \"Table\" , action = \"deleted\" , ) else : self . client [ f \"bigquery_ { mode } \" ] . delete_table ( self . table_full_name [ mode ], not_found_ok = True ) logger . info ( \" {object} {object_id} _ {mode} was {action} !\" , object_id = self . table_id , mode = mode , object = \"Table\" , action = \"deleted\" , )","title":"delete()"},{"location":"api_reference_python/#basedosdados.upload.table.Table.publish","text":"Creates BigQuery table at production dataset. Table should be located at <dataset_id>.<table_id> . It creates a view that uses the query from <metadata_path>/<dataset_id>/<table_id>/publish.sql . Make sure that all columns from the query also exists at <metadata_path>/<dataset_id>/<table_id>/table_config.sql , including the partitions. Parameters: Name Type Description Default if_exists str Optional. What to do if table exists. 'raise' : Raises Conflict exception 'replace' : Replace table 'pass' : Do nothing 'raise' Todo: * Check if all required fields are filled Source code in basedosdados/upload/table.py def publish ( self , if_exists = \"raise\" , custon_publish_sql = None , custom_schema = None ): \"\"\"Creates BigQuery table at production dataset. Table should be located at `<dataset_id>.<table_id>`. It creates a view that uses the query from `<metadata_path>/<dataset_id>/<table_id>/publish.sql`. Make sure that all columns from the query also exists at `<metadata_path>/<dataset_id>/<table_id>/table_config.sql`, including the partitions. Args: if_exists (str): Optional. What to do if table exists. * 'raise' : Raises Conflict exception * 'replace' : Replace table * 'pass' : Do nothing Todo: * Check if all required fields are filled \"\"\" # TODO: review this method if if_exists == \"replace\" and self . table_exists ( mode = \"prod\" ): self . delete ( mode = \"prod\" ) publish_sql = self . _make_publish_sql () # create view using API metadata if custon_publish_sql is None : self . client [ \"bigquery_prod\" ] . query ( publish_sql ) . result () self . update ( mode = \"prod\" ) # create view using custon query if custon_publish_sql is not None : self . client [ \"bigquery_prod\" ] . query ( custon_publish_sql ) . result () # update schema using a custom schema if custom_schema is not None : self . update ( custom_schema = custom_schema ) logger . success ( \" {object} {object_id} was {action} !\" , object_id = self . table_id , object = \"Table\" , action = \"published\" , )","title":"publish()"},{"location":"api_reference_python/#basedosdados.upload.table.Table.table_exists","text":"Check if table exists in BigQuery. Parameters: Name Type Description Default mode str Which dataset to check [prod|staging]. required Source code in basedosdados/upload/table.py def table_exists ( self , mode ): \"\"\"Check if table exists in BigQuery. Args: mode (str): Which dataset to check [prod|staging]. \"\"\" try : ref = self . _get_table_obj ( mode = mode ) except google . api_core . exceptions . NotFound : ref = None return bool ( ref )","title":"table_exists()"},{"location":"api_reference_python/#basedosdados.upload.table.Table.update","text":"Updates BigQuery schema and description. Parameters: Name Type Description Default mode str Optional. Table of which table to update [prod] 'prod' not_found_ok bool Optional. What to do if table is not found required Source code in basedosdados/upload/table.py def update ( self , mode = \"prod\" , custom_schema = None ): \"\"\"Updates BigQuery schema and description. Args: mode (str): Optional. Table of which table to update [prod] not_found_ok (bool): Optional. What to do if table is not found \"\"\" self . _check_mode ( mode ) table = self . _get_table_obj ( mode ) table . description = self . _get_table_description () # when mode is staging the table schema already exists if mode == \"prod\" and custom_schema is None : table . schema = self . _load_schema_from_json ( columns = self . _get_cross_columns_from_bq_api () ) if mode == \"prod\" and custom_schema is not None : table . schema = self . _load_schema_from_json ( custom_schema ) fields = [ \"description\" , \"schema\" ] self . client [ \"bigquery_prod\" ] . update_table ( table , fields = fields ) logger . success ( \" {object} {object_id} was {action} in {mode} !\" , object_id = self . table_id , mode = mode , object = \"Table\" , action = \"updated\" , )","title":"update()"},{"location":"api_reference_r/","text":"R Esta API \u00e9 composta somente de m\u00f3dulos para requisi\u00e7\u00e3o de dados , ou seja, download e/ou carregamento de dados do projeto no seu ambiente de an\u00e1lise). Para fazer gerenciamento de dados no Google Cloud, busque as fun\u00e7\u00f5es na API de linha de comando ou em Python . A documenta\u00e7\u00e3o completa encontra-se na p\u00e1gina do CRAN do projeto, e segue baixo. Toda documenta\u00e7\u00e3o do c\u00f3digo abaixo est\u00e1 em ingl\u00eas This browser does not support PDFs. Please download the PDF to view it: Download PDF . Ih rapaz, deu erro! E agora? Os principais erros encontrados do pacote da Base dos Dados no Rstudio s\u00e3o derivados de dois fatores: * Autentica\u00e7\u00e3o * Vers\u00e3o do pacote `dbplyr` Portanto, se algum erro aparecer para voc\u00ea, por favor, tente primeiro checar se ele est\u00e1 relacionado a esses dois fatores. Autentica\u00e7\u00e3o A maioria dos erros do nosso pacote est\u00e3o relacionados a problemas de autentica\u00e7\u00e3o. O pacote basedosdados requer que o usu\u00e1rio forne\u00e7a todas as autentica\u00e7\u00f5es solicitadas pela fun\u00e7\u00e3o basedosdados::set_billing_id , inclusive aquelas que aparecem como optativas. Por isso, \u00e9 necess\u00e1rio estar atento se voc\u00ea marcou todas as caixinhas de sele\u00e7\u00e3o quando o Rstudio disponibiliza essa tela no navegador: Note que \u00e9 preciso marcar inclusive as duas \u00faltimas \"caixinhas\", que aparecem como opcionais . Caso voc\u00ea tenha esquecido de marc\u00e1-las, todas as outras fun\u00e7\u00f5es do pacote n\u00e3o ir\u00e3o funcionar posteriormente. Caso voc\u00ea j\u00e1 tenha autenticado com autoriza\u00e7\u00e3o incompleta, \u00e9 preciso repetir o processo de autentica\u00e7\u00e3o. Voc\u00ea pode fazer isso rodando gargle::gargle_oauth_sitrep() . Voc\u00ea dever\u00e1 checar a pasta em que est\u00e3o salvas as autentica\u00e7\u00f5es do seu R, entrar nesta pasta e deletar aquela referente ao Google Cloud/Bigquery. Feito isso, ao rodar basedosdados::set_billing_id voc\u00ea poder\u00e1 autenticar novamente. Veja como \u00e9 simples: Realizados todos esses procedimentos, \u00e9 bem prov\u00e1vel que os erros anteriores n\u00e3o ocorram mais. Vers\u00e3o do pacote dbplyr Outro erro comum est\u00e1 relacionado ao uso da fun\u00e7\u00e3o basedosdados::bdplyr . Nosso pacote em R foi constru\u00eddo utilizando outros pacotes dispon\u00edveis na comunidade. Isso significa que atualiza\u00e7\u00f5es destes pacotes podem alterar o funcionamento destes e gerar efeitos em cascata a outros pacotes desenvolvidos em cima deles. Neste contexto, o nosso pacote funciona apenas com a vers\u00e3o 2.1.1 do pacote dbplyr , e n\u00e3o funciona com vers\u00f5es posteriores. Voc\u00ea pode checar a sua vers\u00e3o do dbplyr rodando utils::packageVersion(\"dbplyr\") no seu R. Caso ela seja superior \u00e0 vers\u00e3o 2.1.1, voc\u00ea precisa dar um downgrade para a vers\u00e3o correta. Para isso, voc\u00ea pode rodar devtools::install_version(\"dbplyr\", version = \"2.1.1\", repos = \"http://cran.us.r-project.org\") . Outros erros Caso os erros persistam, voc\u00ea pode abrir uma issue no nosso Github clicando aqui . Voc\u00ea tamb\u00e9m visitar as issues que j\u00e1 foram resolvidas e est\u00e3o atribu\u00eddas com o a etiqueta R em nosso Github aqui .","title":"R"},{"location":"api_reference_r/#r","text":"Esta API \u00e9 composta somente de m\u00f3dulos para requisi\u00e7\u00e3o de dados , ou seja, download e/ou carregamento de dados do projeto no seu ambiente de an\u00e1lise). Para fazer gerenciamento de dados no Google Cloud, busque as fun\u00e7\u00f5es na API de linha de comando ou em Python . A documenta\u00e7\u00e3o completa encontra-se na p\u00e1gina do CRAN do projeto, e segue baixo. Toda documenta\u00e7\u00e3o do c\u00f3digo abaixo est\u00e1 em ingl\u00eas This browser does not support PDFs. Please download the PDF to view it: Download PDF .","title":"R"},{"location":"api_reference_r/#ih-rapaz-deu-erro-e-agora","text":"Os principais erros encontrados do pacote da Base dos Dados no Rstudio s\u00e3o derivados de dois fatores: * Autentica\u00e7\u00e3o * Vers\u00e3o do pacote `dbplyr` Portanto, se algum erro aparecer para voc\u00ea, por favor, tente primeiro checar se ele est\u00e1 relacionado a esses dois fatores.","title":"Ih rapaz, deu erro! E agora?"},{"location":"api_reference_r/#autenticacao","text":"A maioria dos erros do nosso pacote est\u00e3o relacionados a problemas de autentica\u00e7\u00e3o. O pacote basedosdados requer que o usu\u00e1rio forne\u00e7a todas as autentica\u00e7\u00f5es solicitadas pela fun\u00e7\u00e3o basedosdados::set_billing_id , inclusive aquelas que aparecem como optativas. Por isso, \u00e9 necess\u00e1rio estar atento se voc\u00ea marcou todas as caixinhas de sele\u00e7\u00e3o quando o Rstudio disponibiliza essa tela no navegador: Note que \u00e9 preciso marcar inclusive as duas \u00faltimas \"caixinhas\", que aparecem como opcionais . Caso voc\u00ea tenha esquecido de marc\u00e1-las, todas as outras fun\u00e7\u00f5es do pacote n\u00e3o ir\u00e3o funcionar posteriormente. Caso voc\u00ea j\u00e1 tenha autenticado com autoriza\u00e7\u00e3o incompleta, \u00e9 preciso repetir o processo de autentica\u00e7\u00e3o. Voc\u00ea pode fazer isso rodando gargle::gargle_oauth_sitrep() . Voc\u00ea dever\u00e1 checar a pasta em que est\u00e3o salvas as autentica\u00e7\u00f5es do seu R, entrar nesta pasta e deletar aquela referente ao Google Cloud/Bigquery. Feito isso, ao rodar basedosdados::set_billing_id voc\u00ea poder\u00e1 autenticar novamente. Veja como \u00e9 simples: Realizados todos esses procedimentos, \u00e9 bem prov\u00e1vel que os erros anteriores n\u00e3o ocorram mais.","title":"Autentica\u00e7\u00e3o"},{"location":"api_reference_r/#versao-do-pacote-dbplyr","text":"Outro erro comum est\u00e1 relacionado ao uso da fun\u00e7\u00e3o basedosdados::bdplyr . Nosso pacote em R foi constru\u00eddo utilizando outros pacotes dispon\u00edveis na comunidade. Isso significa que atualiza\u00e7\u00f5es destes pacotes podem alterar o funcionamento destes e gerar efeitos em cascata a outros pacotes desenvolvidos em cima deles. Neste contexto, o nosso pacote funciona apenas com a vers\u00e3o 2.1.1 do pacote dbplyr , e n\u00e3o funciona com vers\u00f5es posteriores. Voc\u00ea pode checar a sua vers\u00e3o do dbplyr rodando utils::packageVersion(\"dbplyr\") no seu R. Caso ela seja superior \u00e0 vers\u00e3o 2.1.1, voc\u00ea precisa dar um downgrade para a vers\u00e3o correta. Para isso, voc\u00ea pode rodar devtools::install_version(\"dbplyr\", version = \"2.1.1\", repos = \"http://cran.us.r-project.org\") .","title":"Vers\u00e3o do pacote dbplyr"},{"location":"api_reference_r/#outros-erros","text":"Caso os erros persistam, voc\u00ea pode abrir uma issue no nosso Github clicando aqui . Voc\u00ea tamb\u00e9m visitar as issues que j\u00e1 foram resolvidas e est\u00e3o atribu\u00eddas com o a etiqueta R em nosso Github aqui .","title":"Outros erros"},{"location":"api_reference_stata/","text":"Stata Esta API \u00e9 composta por m\u00f3dulos para requisi\u00e7\u00e3o de dados : para aquele(as) que desejam somente consultar os dados e metadados do nosso projeto (ou qualquer outro projeto no Google Cloud). Toda documenta\u00e7\u00e3o do c\u00f3digo abaixo est\u00e1 em ingl\u00eas M\u00f3dulos (Requisi\u00e7\u00e3o de dados) Se \u00e9 a sua primeira vez utilizando o pacote, digite db basedosdados e confirme novamente se as etapas acima foram conclu\u00eddas com sucesso. O pacote cont\u00e9m 7 comandos, conforme suas funcionalidades descritas abaixo: Comando Descri\u00e7\u00e3o bd_download baixa dados da Base dos Dados (BD+). bd_read_sql baixa tabelas da BD+ usando consultas espec\u00edficas. bd_read_table baixa tabelas da BD+ usando dataset_id e table_id . bd_list_datasets lista o dataset_id dos conjuntos de dados dispon\u00edveis em query_project_id . bd_list_dataset_tables lista table_id para tabelas dispon\u00edveis no dataset_id especificado. bd_get_table_description mostra a descri\u00e7\u00e3o completa da tabela BD+. bd_get_table_columns mostra os nomes, tipos e descri\u00e7\u00f5es das colunas na tabela especificada. Cada comando tem um help file de apoio, bastando abrir o help e seguir as instru\u00e7\u00f5es: help [comando]","title":"Stata"},{"location":"api_reference_stata/#stata","text":"Esta API \u00e9 composta por m\u00f3dulos para requisi\u00e7\u00e3o de dados : para aquele(as) que desejam somente consultar os dados e metadados do nosso projeto (ou qualquer outro projeto no Google Cloud). Toda documenta\u00e7\u00e3o do c\u00f3digo abaixo est\u00e1 em ingl\u00eas","title":"Stata"},{"location":"api_reference_stata/#modulos-requisicao-de-dados","text":"Se \u00e9 a sua primeira vez utilizando o pacote, digite db basedosdados e confirme novamente se as etapas acima foram conclu\u00eddas com sucesso. O pacote cont\u00e9m 7 comandos, conforme suas funcionalidades descritas abaixo: Comando Descri\u00e7\u00e3o bd_download baixa dados da Base dos Dados (BD+). bd_read_sql baixa tabelas da BD+ usando consultas espec\u00edficas. bd_read_table baixa tabelas da BD+ usando dataset_id e table_id . bd_list_datasets lista o dataset_id dos conjuntos de dados dispon\u00edveis em query_project_id . bd_list_dataset_tables lista table_id para tabelas dispon\u00edveis no dataset_id especificado. bd_get_table_description mostra a descri\u00e7\u00e3o completa da tabela BD+. bd_get_table_columns mostra os nomes, tipos e descri\u00e7\u00f5es das colunas na tabela especificada. Cada comando tem um help file de apoio, bastando abrir o help e seguir as instru\u00e7\u00f5es: help [comando]","title":"M\u00f3dulos (Requisi\u00e7\u00e3o de dados)"},{"location":"colab_checks/","text":"Colaborando com testes na BD+ Para manter a qualidade dos bases de dados presentes na BD+, n\u00f3s contamos com um conjunto de checagens autom\u00e1ticas que s\u00e3o realizadas durante a inser\u00e7\u00e3o e atualiza\u00e7\u00e3o de cada base. Essas checagens s\u00e3o necess\u00e1rias, mas n\u00e3o suficientes para garantir a qualidade dos dados. Elas realizam consultas basicas, como se a tabela existe ou se tem colunas totalmente nulas. Voc\u00ea pode colaborar com a BD aumentando a cobertura dos testes, diminuindo assim o trabalho de revis\u00e3o dos dados. Para isso basta criar consultas que testem a qualidade dos dados em SQL, como as seguintes: Verificar se colunas com propor\u00e7\u00e3o possuem valores entre 0 e 100 Verificar se colunas com datas seguem o padr\u00e3o YYYY-MM-DD HH:MM:SS Qual o procedimento? Incluir testes de dados deve seguir o fluxo de trabalho: Colaborando com testes na BD+ Qual o procedimento? 1. Informe seu interesse 2. Escreva sua consulta 3. Submeta sua consulta Sugerimos que entre em nosso canal no Discord para tirar d\u00favidas e interagir com outros(as) colaboradores(as)! :) 1. Informe seu interesse Converse conosco no bate-papo da infra ou reuni\u00f5es \u00e0s 19h da segunda-feira, ambos no Discord. Caso n\u00e3o tenha uma sugest\u00e3o de melhoria podemos procurar alguma consulta que ainda n\u00e3o foi escrita. 2. Escreva sua consulta Fa\u00e7a um fork do reposit\u00f3rio da Base dos Dados+ . Em seguida adicione novas consultas e suas respectivas fun\u00e7\u00f5es de execu\u00e7\u00e3o nos arquivos checks.yaml e test_data.py . As consultas s\u00e3o escritas em um arquivo YAML com Jinja e SQL, da forma: test_select_all_works : name : Check if select query in {{ table_id }} works query : | SELECT NOT EXISTS ( SELECT * FROM `{{ project_id_staging }}.{{ dataset_id }}.{{ table_id }}` ) AS failure E executadas como testes do pacote pytest : def test_select_all_works ( configs ): result = fetch_data ( \"test_select_all_works\" , configs ) assert result . failure . values == False N\u00e3o se assuste caso n\u00e3o conhe\u00e7a algo da sintaxe acima, podemos lhe ajudar durante o processo. Note que os valores entre chaves s\u00e3o vari\u00e1veis contidas em arquivos table_config.yaml , que cont\u00e9m metadados das tabelas. Logo a escrita de consulta \u00e9 limitada pelos metadados existentes. Recomendamos consultar estes arquivos no diret\u00f3rio das bases . 3. Submeta sua consulta Por fim realize um pull request para o reposit\u00f3rio principal para que seja realizada uma revis\u00e3o da consulta.","title":"Colaborando com testes na BD+"},{"location":"colab_checks/#colaborando-com-testes-na-bd","text":"Para manter a qualidade dos bases de dados presentes na BD+, n\u00f3s contamos com um conjunto de checagens autom\u00e1ticas que s\u00e3o realizadas durante a inser\u00e7\u00e3o e atualiza\u00e7\u00e3o de cada base. Essas checagens s\u00e3o necess\u00e1rias, mas n\u00e3o suficientes para garantir a qualidade dos dados. Elas realizam consultas basicas, como se a tabela existe ou se tem colunas totalmente nulas. Voc\u00ea pode colaborar com a BD aumentando a cobertura dos testes, diminuindo assim o trabalho de revis\u00e3o dos dados. Para isso basta criar consultas que testem a qualidade dos dados em SQL, como as seguintes: Verificar se colunas com propor\u00e7\u00e3o possuem valores entre 0 e 100 Verificar se colunas com datas seguem o padr\u00e3o YYYY-MM-DD HH:MM:SS","title":"Colaborando com testes na BD+"},{"location":"colab_checks/#qual-o-procedimento","text":"Incluir testes de dados deve seguir o fluxo de trabalho: Colaborando com testes na BD+ Qual o procedimento? 1. Informe seu interesse 2. Escreva sua consulta 3. Submeta sua consulta Sugerimos que entre em nosso canal no Discord para tirar d\u00favidas e interagir com outros(as) colaboradores(as)! :)","title":"Qual o procedimento?"},{"location":"colab_checks/#1-informe-seu-interesse","text":"Converse conosco no bate-papo da infra ou reuni\u00f5es \u00e0s 19h da segunda-feira, ambos no Discord. Caso n\u00e3o tenha uma sugest\u00e3o de melhoria podemos procurar alguma consulta que ainda n\u00e3o foi escrita.","title":"1. Informe seu interesse"},{"location":"colab_checks/#2-escreva-sua-consulta","text":"Fa\u00e7a um fork do reposit\u00f3rio da Base dos Dados+ . Em seguida adicione novas consultas e suas respectivas fun\u00e7\u00f5es de execu\u00e7\u00e3o nos arquivos checks.yaml e test_data.py . As consultas s\u00e3o escritas em um arquivo YAML com Jinja e SQL, da forma: test_select_all_works : name : Check if select query in {{ table_id }} works query : | SELECT NOT EXISTS ( SELECT * FROM `{{ project_id_staging }}.{{ dataset_id }}.{{ table_id }}` ) AS failure E executadas como testes do pacote pytest : def test_select_all_works ( configs ): result = fetch_data ( \"test_select_all_works\" , configs ) assert result . failure . values == False N\u00e3o se assuste caso n\u00e3o conhe\u00e7a algo da sintaxe acima, podemos lhe ajudar durante o processo. Note que os valores entre chaves s\u00e3o vari\u00e1veis contidas em arquivos table_config.yaml , que cont\u00e9m metadados das tabelas. Logo a escrita de consulta \u00e9 limitada pelos metadados existentes. Recomendamos consultar estes arquivos no diret\u00f3rio das bases .","title":"2. Escreva sua consulta"},{"location":"colab_checks/#3-submeta-sua-consulta","text":"Por fim realize um pull request para o reposit\u00f3rio principal para que seja realizada uma revis\u00e3o da consulta.","title":"3. Submeta sua consulta"},{"location":"colab_data/","text":"Suba dados na BD Por que minha organiza\u00e7\u00e3o deve subir dados na BD? Capacidade de cruzar suas bases com dados de diferentes organiza\u00e7\u00f5es de forma simples e f\u00e1cil. J\u00e1 s\u00e3o centenas de conjuntos de dados p\u00fablicos das maiores organiza\u00e7\u00f5es do Brasil e do mundo presentes no nosso datalake . Compromisso com a transpar\u00eancia, qualidade dos dados e desenvolvimento de melhores pesquisas, an\u00e1lises e solu\u00e7\u00f5es para a sociedade. N\u00e3o s\u00f3 democratizamos o acesso a dados abertos, mas tamb\u00e9m dados de qualidade. Temos um time especializado que revisa e garante a qualidade dos dados adicionados ao datalake . Participa\u00e7\u00e3o de uma comunidade que cresce cada vez mais : milhares de jornalistas, pesquisadores(as), desenvolvedores(as), j\u00e1 utilizam e acompanham a Base dos Dados. Passo a passo para subir dados Quer subir dados na BD e nos ajudar a construir esse reposit\u00f3rio? Maravilha! Organizamos tudo o que voc\u00ea precisa no manual abaixo em 8 passos Para facilitar a explica\u00e7\u00e3o, vamos seguir um exemplo j\u00e1 pronto com dados da RAIS . Voc\u00ea pode navegar pelas etapas no menu \u00e0 esquerda. Sugerimos fortemente que entre em nosso canal no Discord para tirar d\u00favidas e interagir com a equipe e outros(as) colaboradores(as)! \ud83d\ude09 Antes de come\u00e7ar Alguns conhecimentos s\u00e3o necess\u00e1rias para realizar esse processo: Python, R, SQL e/ou Stata : para criar os c\u00f3digos de captura e limpeza dos dados. Linha de comando : para configurar seu ambiente local e conex\u00e3o com o Google Cloud. Github : para subir seu c\u00f3digo para revis\u00e3o da nossa equipe. N\u00e3o tem alguma dessas habilidades, mas quer colaborar? Temos um time de dados que pode te ajudar, basta entrar no nosso Discord e mandar uma mensagem em #quero-contribuir. Como funciona o processo? 1. Escolher a base e entender mais dos dados - primeiro precisamos conhecer o que estamos tratando. 2. Baixar nossa pasta template - \u00e9 hora estruturar o trabalho a ser feito 3. Preencher as tabelas de arquitetura - \u00e9 primordial definir a estrutura dos dados antes de iniciarmos o tratamento 4. Escrever codigo de captura e limpeza de dados - hora de botar a m\u00e3o na massa! 5. (Caso necess\u00e1rio) Organizar arquivos auxiliares - porque at\u00e9 dados precisam de guias 6. (Caso necess\u00e1rio) Criar tabela dicion\u00e1rio - momento de montar os dicion\u00e1rios 7. Subir tudo no Google Cloud - afinal, \u00e9 por l\u00e1 que ficam os dados da BD 8. Enviar tudo para revis\u00e3o - um olhar da nossa equipe para garantir que tudo est\u00e1 pronto para ir pra produ\u00e7\u00e3o! 1. Escolher a base e entender mais dos dados Mantemos a lista de conjuntos para volunt\u00e1rios no nosso Github . Para come\u00e7ar a subir uma base do seu interesse, basta abrir uma nova issue de dados. Caso sua base (conjunto) j\u00e1 esteja listada, basta marcar seu usu\u00e1rio do Github como assignee Seu primeiro trabalho \u00e9 preencher as informa\u00e7\u00f5es na issue. Essas informa\u00e7\u00f5es v\u00e3o te ajudar a entender melhor os dados e ser\u00e3o muito \u00fateis para o tratamento e o preenchimento de metadados. Quando finalizar essa etapa, chame algu\u00e9m da equipe dados para que as informa\u00e7\u00f5es que voc\u00ea mapeou sobre o conjunto j\u00e1 entrem pro nosso site! 2. Baixar nossa pasta template Baixe aqui a pasta template e renomeie para o <dataset_id> (definido na issue do passo 1 ). Essa pasta template facilita e organiza todos os passos daqui pra frente. Sua estrutura \u00e9 a seguinte: <dataset_id>/ code/ : C\u00f3digos necess\u00e1rios para captura e limpeza dos dados ( vamos ver mais no passo 4 ). input/ : Cont\u00e9m todos os arquivos com dados originais, exatamente como baixados da fonte prim\u00e1ria. ( vamos ver mais no passo 4 ). output/ : Arquivos finais, j\u00e1 no formato pronto para subir na BD ( vamos ver mais no passo 4 ). tmp/ : Quaisquer arquivos tempor\u00e1rios criados pelo c\u00f3digo em /code no processo de limpeza e tratamento ( vamos ver mais no passo 4 ). extra/ architecture/ : Tabelas de arquitetura ( vamos ver mais no passo 3 ). auxiliary_files/ : Arquivos auxiliares aos dados ( vamos ver mais no passo 5 ). dicionario.csv : Tabela dicion\u00e1rio de todo o conjunto de dados ( vamos ver mais no passo 6 ). Apenas a pasta code ser\u00e1 commitada para o seu projeto, os demais arquivos existir\u00e3o apenas localmente ou no Google Cloud. 3. Preencher as tabelas de arquitetura As tabelas de arquitetura determinam qual a estrutura de cada tabela do seu conjunto de dados . Elas definem, por exemplo, o nome, ordem e metadados das vari\u00e1veis, al\u00e9m de compatibiliza\u00e7\u00f5es quando h\u00e1 mudan\u00e7as em vers\u00f5es (por exemplo, se uma vari\u00e1vel muda de nome de um ano para o outro). Cada tabela do conjunto de dados deve ter sua pr\u00f3pria tabela de arquitetura (planilha), que deve ser preenchida no Google Drive para permitir a corre\u00e7\u00e3o pela nossa equipe de dados. Exemplo: RAIS - Tabelas de arquitetura As tabelas de arquitetura da RAIS podem ser consultadas aqui . Elas s\u00e3o uma \u00f3tima refer\u00eancia para voc\u00ea come\u00e7ar seu trabalho j\u00e1 que tem muitas vari\u00e1veis e exemplos de diversas situa\u00e7\u00f5es que voc\u00ea pode acabar encontrando. Para o preenchimento de cada tabela do seu conjunto siga esse passo a passo: A cada in\u00edcio e final de etapa consulte nosso manual de estilo para garantir que voc\u00ea est\u00e1 seguindo a padroniza\u00e7\u00e3o da BD Listar todas as vari\u00e1veis dos dados na coluna original_name Obs: Caso a base mude o nome das vari\u00e1veis ao longo dos anos (como a RAIS), \u00e9 necess\u00e1rio fazer a compatibiliza\u00e7\u00e3o entre anos para todas as vari\u00e1veis preenchendo a coluna de original_name_YYYY para cada ano ou m\u00eas dispon\u00edvel Renomear as vari\u00e1veis conforme nosso manual na coluna name Entender o tipo da vari\u00e1vel e preencher a coluna bigquery_type Preencher a descri\u00e7\u00e3o em description conforme o manual A partir da compatibiliza\u00e7\u00e3o entre anos e/ou consultas aos dados brutos, preencher a cobertura temporal em temporal_coverage de cada vari\u00e1vel Obs: Caso a as vari\u00e1veis tenham a mesma cobertura temporal da tabela preencher apenas com '(1)' Indicar com 'yes' ou 'no' se h\u00e1 dicion\u00e1rio para as vari\u00e1veis em covered_by_dictionary Verificar se as vari\u00e1veis representam alguma entidade presente nos diret\u00f3rios para preencher o directory_column 8 Para as vari\u00e1veis do tipo int64 ou float64 verificar se \u00e9 necess\u00e1rio incluir uma unidade de medida Reordernar as vari\u00e1veis conforme o manual Quando terminar de preencher as tabelas de arquitetura, entre em contato com a equipe da Base dos Dados para validar tudo. \u00c9 necess\u00e1rio que esteja claro o formato final que os dados devem ficar antes de come\u00e7ar a escrever o c\u00f3digo. Assim a gente evita o retrabalho. 4. Escrever codigo de captura e limpeza de dados Ap\u00f3s validadas as tabelas de arquitetura, podemos escrever os c\u00f3digos de captura e limpeza dos dados. Captura : C\u00f3digo que baixa automaticamente todos os dados originais e os salva em /input . Esses dados podem estar dispon\u00edveis em portais ou links FTP, podem ser raspados de sites, entre outros. Limpeza : C\u00f3digo que transforma os dados originais salvos em /input em dados limpos, salva na pasta /output , para, posteriormente, serem subidos na BD. Cada tabela limpa para produ\u00e7\u00e3o pode ser salva como um arquivo \u00fanico ou, caso seja muito grande (e.g. acima de 200 mb), ser particionada no formato Hive em v\u00e1rios sub-arquivos. Os formatos aceitos s\u00e3o .csv ou .parquet . Nossa recomenda\u00e7\u00e3o \u00e9 particionar tabelas por ano , mes e sigla_uf . O particionamento \u00e9 feito atrav\u00e9s da estrutura de pastas, veja o exemplo a baixo para visualizar como. Exemplo: RAIS - Particionamento A tabela microdados_vinculos da RAIS, por exemplo, \u00e9 uma tabela muito grande (+250GB) por isso n\u00f3s particionamos por ano e sigla_uf . O particionamento foi feito usando a estrutura de pastas /microdados_vinculos/ano=YYYY/sigla_uf=XX . Padr\u00f5es necess\u00e1rios no c\u00f3digo Devem ser escritos em Python , R ou Stata - para que a revis\u00e3o possa ser realizada pela equipe. Pode estar em script ( .py , .R , ...) ou notebooks (Google Colab, Jupyter, Rmarkdown, etc). Os caminhos de arquivos devem ser atalhos relativos \u00e0 pasta ra\u00edz ( <dataset_id> ), ou seja, n\u00e3o devem depender dos caminhos do seu computador. A limpeza deve seguir nosso manual de estilo e as melhores pr\u00e1ticas de programa\u00e7\u00e3o . Exemplo: PNAD Cont\u00ednua - C\u00f3digo de limpeza O c\u00f3digo de limpeza foi constru\u00eddo em R e pode ser consultado aqui . Exemplo: Atividade na C\u00e2mara Legislativa - C\u00f3digo de download e limpeza O c\u00f3digo de limpeza foi constru\u00eddo em Python pode ser consultado aqui 5. (Caso necess\u00e1rio) Organizar arquivos auxiliares \u00c9 comum bases de dados serem disponibilizadas com arquivos auxiliares. Esses podem incluir notas t\u00e9cnicas, descri\u00e7\u00f5es de coleta e amostragem, etc. Para ajudar usu\u00e1rios da Base dos Dados terem mais contexto e entenderem melhor os dados, organize todos esses arquivos auxiliares em /extra/auxiliary_files . Fique \u00e0 vontade para estruturar sub-pastas como quiser l\u00e1 dentro. O que importa \u00e9 que fique claro o que s\u00e3o esses arquivos. 6. (Caso necess\u00e1rio) Criar tabela dicion\u00e1rio Muitas vezes, especialmente com bases antigas, h\u00e1 m\u00faltiplos dicion\u00e1rios em formatos Excel ou outros. Na Base dos Dados n\u00f3s unificamos tudo em um \u00fanico arquivo em formato .csv - um \u00fanico dicion\u00e1rio para todas as colunas de todas as tabelas do seu conjunto. Detalhes importantes de como construir seu dicion\u00e1rio est\u00e3o no nosso manual de estilo . Exemplo: RAIS - Dicion\u00e1rio O dicion\u00e1rio completo pode ser consultado aqui . Ele j\u00e1 possui a estrutura padr\u00e3o que utilizamos para dicion\u00e1rios. 7. Subir tudo no Google Cloud Tudo pronto! Agora s\u00f3 falta subir para o Google Cloud e enviar para revis\u00e3o. Para isso, vamos usar o cliente basedosdados (dispon\u00edvel em Python) que facilita as configura\u00e7\u00f5es e etapas do processo. Como existe um custo para o armazenamento no storage, para finalizar essa etapa vamos precisar te disponibilizar uma api_key especifica para volunt\u00e1rios para subir os dados em nosso ambiente de desenvolvimento. Assim, entre em nosso canal no Discord e nos chame em 'quero-contribuir' Configure suas credenciais localmente 7.1 No seu terminal instale nosso cliente: pip install basedosdados . 7.2 Rode import basedosdados as bd no python e siga o passo a passo para configurar localmente com as credenciais de seu projeto no Google Cloud. Preencha as informa\u00e7\u00f5es conforme a seguir: * STEP 1: y * STEP 2: basedosdados-dev (colocar o .json passado pela equipe da bd na pasta credentials) * STEP 3: y * STEP 4: basedosdados-dev * STEP 5: https://api.basedosdados.org/api/v1/graphql Suba os arquivos na Cloud Os dados v\u00e3o passar por 3 lugares no Google Cloud: Storage : tamb\u00e9m chamado de GCS \u00e9 o local onde ser\u00e3o armazenados o arquivos \"frios\" (arquiteturas, dados, arquivos auxiliares). BigQuery-DEV-Staging : tabela que conecta os dados do storage ao projeto basedosdados-dev no bigquery BigQuery-DEV-Produ\u00e7\u00e3o : tabela utilizada paras teste e tratamento via SQL do conjunto de dados 7.3 Crie a tabela no bucket do GCS e BigQuey-DEV-staging , usando a API do Python, da seguinte forma: ```python import basedosdados as bd tb = bd.Table( dataset_id='<dataset_id>', table_id='<table_id>') tb.create( path='<caminho_para_os_dados>', if_table_exists='raise', if_storage_data_exists='raise', ) ``` Os seguintes par\u00e2metros podem ser usados: - `path` (obrigat\u00f3rio): o caminho completo do arquivo no seu computador, como: `/Users/<seu_usuario>/projetos/basedosdados/mais/bases/[DATASET_ID]/output/microdados.csv`. !!! Tip \"Caso seus dados sejam particionados, o caminho deve apontar para a pasta onde est\u00e3o as parti\u00e7\u00f5es. No contr\u00e1rio, deve apontar para um arquivo `.csv` (por exemplo, microdados.csv).\" - `force_dataset`: comando que cria os arquivos de configura\u00e7\u00e3o do dataset no BigQuery. - _True_: os arquivos de configura\u00e7\u00e3o do dataset ser\u00e3o criados no seu projeto e, caso ele n\u00e3o exista no BigQuery, ser\u00e1 criado automaticamente. **Se voc\u00ea j\u00e1 tiver criado e configurado o dataset, n\u00e3o use esta op\u00e7\u00e3o, pois ir\u00e1 sobrescrever arquivos**. - _False_: o dataset n\u00e3o ser\u00e1 recriado e, se n\u00e3o existir, ser\u00e1 criado automaticamente. - `if_table_exists` : comando utilizado caso a **tabela j\u00e1 exista no BQ**: - _raise_: retorna mensagem de erro. - _replace_: substitui a tabela. - _pass_: n\u00e3o faz nada. - `if_storage_data_exists`: comando utilizado caso os **dados j\u00e1 existam no Google Cloud Storage**: - _raise_: retorna mensagem de erro - _replace_: substitui os dados existentes. - _pass_: n\u00e3o faz nada. !!! Info \"Se o projeto n\u00e3o existir no BigQuery, ele ser\u00e1 automaticamente criado\" Consulte tamb\u00e9m nossa API para mais detalhes de cada m\u00e9todo. 7.4 Crie os arquivos .sql e schema.yml a partir da tabela de arquitetura seguindo essa documenta\u00e7\u00e3o Caso voc\u00ea precise, nesse momento voc\u00ea pode alterar a consulta em SQL para realizar tratamentos finais a partir da tabela staging , pode incluir coluna, remover coluna, fazer opera\u00e7\u00f5es alg\u00e9bricas, substituir strings, etc. O SQL \u00e9 o limite! 7.5 Rode e teste os modelos localmente seguindo essa documenta\u00e7\u00e3o 7.6 Suba os metadados da tabela no site: Por enquanto apenas a equipe dados tem permiss\u00f5es de subir os metadados da tabela no site, por isso ser\u00e1 necess\u00e1rio entrar em contato conosco. J\u00e1 estamos trabalhando para que, num futuro pr\u00f3ximo, os volunt\u00e1rios tamb\u00e9m possam atualizar dados no site. 7.7 Suba os arquivos auxiliares: st = bd . Storage ( dataset_id = < dataset_id > , table_id = < table_id > ) st . upload ( path = 'caminho_para_os_arquivos_auxiliares' , mode = 'auxiliary_files' , if_exists = 'raise' ) 8. Enviar tudo para revis\u00e3o Ufa, \u00e9 isso! Agora s\u00f3 resta enviar tudo para revis\u00e3o no reposit\u00f3rio da Base dos Dados. Clone o nosso reposit\u00f3rio localmente. D\u00ea um cd para a pasta local do reposit\u00f3rio e abra uma nova branch com git checkout -b [dataset_id] . Todas as adi\u00e7\u00f5es e modifica\u00e7\u00f5es ser\u00e3o inclu\u00eddas nessa branch . Para cada tabela nova incluir o arquivo com nome table_id.sql na pasta queries-basedosdados/models/dataset_id/ copiando as queries que voc\u00ea desenvolveu no passo 7. Incluir o arquivo schema.yaml desenvolvido no passo 7 Caso seja um dataset novo, incluir o dataset conforme as instru\u00e7\u00f5es do arquivo queries-basedosdados/dbt_project.yaml (n\u00e3o se esque\u00e7a de seguir a ordem alfab\u00e9tica pra n\u00e3o bagun\u00e7ar a organiza\u00e7\u00e3o) Inclua o seu c\u00f3digo de captura e limpeza em na pasta queries-basedosdados/models/dataset_id/code Agora \u00e9 s\u00f3 publicar a branch, abrir o PR com as labels 'table-approve' e marcar a equipe dados para corre\u00e7\u00e3o E agora? Nossa equipe ir\u00e1 revisar os dados e metadados submetidos via Github. Podemos entrar em contato para tirar d\u00favidas ou solicitar mudan\u00e7as no c\u00f3digo. Quando tudo estiver OK, fazemos um merge do seu pull request e os dados s\u00e3o automaticamente publicados na nossa plataforma!","title":"Dados"},{"location":"colab_data/#suba-dados-na-bd","text":"","title":"Suba dados na BD"},{"location":"colab_data/#por-que-minha-organizacao-deve-subir-dados-na-bd","text":"Capacidade de cruzar suas bases com dados de diferentes organiza\u00e7\u00f5es de forma simples e f\u00e1cil. J\u00e1 s\u00e3o centenas de conjuntos de dados p\u00fablicos das maiores organiza\u00e7\u00f5es do Brasil e do mundo presentes no nosso datalake . Compromisso com a transpar\u00eancia, qualidade dos dados e desenvolvimento de melhores pesquisas, an\u00e1lises e solu\u00e7\u00f5es para a sociedade. N\u00e3o s\u00f3 democratizamos o acesso a dados abertos, mas tamb\u00e9m dados de qualidade. Temos um time especializado que revisa e garante a qualidade dos dados adicionados ao datalake . Participa\u00e7\u00e3o de uma comunidade que cresce cada vez mais : milhares de jornalistas, pesquisadores(as), desenvolvedores(as), j\u00e1 utilizam e acompanham a Base dos Dados.","title":"Por que minha organiza\u00e7\u00e3o deve subir dados na BD?"},{"location":"colab_data/#passo-a-passo-para-subir-dados","text":"Quer subir dados na BD e nos ajudar a construir esse reposit\u00f3rio? Maravilha! Organizamos tudo o que voc\u00ea precisa no manual abaixo em 8 passos Para facilitar a explica\u00e7\u00e3o, vamos seguir um exemplo j\u00e1 pronto com dados da RAIS . Voc\u00ea pode navegar pelas etapas no menu \u00e0 esquerda. Sugerimos fortemente que entre em nosso canal no Discord para tirar d\u00favidas e interagir com a equipe e outros(as) colaboradores(as)! \ud83d\ude09","title":"Passo a passo para subir dados"},{"location":"colab_data/#antes-de-comecar","text":"Alguns conhecimentos s\u00e3o necess\u00e1rias para realizar esse processo: Python, R, SQL e/ou Stata : para criar os c\u00f3digos de captura e limpeza dos dados. Linha de comando : para configurar seu ambiente local e conex\u00e3o com o Google Cloud. Github : para subir seu c\u00f3digo para revis\u00e3o da nossa equipe. N\u00e3o tem alguma dessas habilidades, mas quer colaborar? Temos um time de dados que pode te ajudar, basta entrar no nosso Discord e mandar uma mensagem em #quero-contribuir.","title":"Antes de come\u00e7ar"},{"location":"colab_data/#como-funciona-o-processo","text":"1. Escolher a base e entender mais dos dados - primeiro precisamos conhecer o que estamos tratando. 2. Baixar nossa pasta template - \u00e9 hora estruturar o trabalho a ser feito 3. Preencher as tabelas de arquitetura - \u00e9 primordial definir a estrutura dos dados antes de iniciarmos o tratamento 4. Escrever codigo de captura e limpeza de dados - hora de botar a m\u00e3o na massa! 5. (Caso necess\u00e1rio) Organizar arquivos auxiliares - porque at\u00e9 dados precisam de guias 6. (Caso necess\u00e1rio) Criar tabela dicion\u00e1rio - momento de montar os dicion\u00e1rios 7. Subir tudo no Google Cloud - afinal, \u00e9 por l\u00e1 que ficam os dados da BD 8. Enviar tudo para revis\u00e3o - um olhar da nossa equipe para garantir que tudo est\u00e1 pronto para ir pra produ\u00e7\u00e3o!","title":"Como funciona o processo?"},{"location":"colab_data/#1-escolher-a-base-e-entender-mais-dos-dados","text":"Mantemos a lista de conjuntos para volunt\u00e1rios no nosso Github . Para come\u00e7ar a subir uma base do seu interesse, basta abrir uma nova issue de dados. Caso sua base (conjunto) j\u00e1 esteja listada, basta marcar seu usu\u00e1rio do Github como assignee Seu primeiro trabalho \u00e9 preencher as informa\u00e7\u00f5es na issue. Essas informa\u00e7\u00f5es v\u00e3o te ajudar a entender melhor os dados e ser\u00e3o muito \u00fateis para o tratamento e o preenchimento de metadados. Quando finalizar essa etapa, chame algu\u00e9m da equipe dados para que as informa\u00e7\u00f5es que voc\u00ea mapeou sobre o conjunto j\u00e1 entrem pro nosso site!","title":"1. Escolher a base e entender mais dos dados"},{"location":"colab_data/#2-baixar-nossa-pasta-template","text":"Baixe aqui a pasta template e renomeie para o <dataset_id> (definido na issue do passo 1 ). Essa pasta template facilita e organiza todos os passos daqui pra frente. Sua estrutura \u00e9 a seguinte: <dataset_id>/ code/ : C\u00f3digos necess\u00e1rios para captura e limpeza dos dados ( vamos ver mais no passo 4 ). input/ : Cont\u00e9m todos os arquivos com dados originais, exatamente como baixados da fonte prim\u00e1ria. ( vamos ver mais no passo 4 ). output/ : Arquivos finais, j\u00e1 no formato pronto para subir na BD ( vamos ver mais no passo 4 ). tmp/ : Quaisquer arquivos tempor\u00e1rios criados pelo c\u00f3digo em /code no processo de limpeza e tratamento ( vamos ver mais no passo 4 ). extra/ architecture/ : Tabelas de arquitetura ( vamos ver mais no passo 3 ). auxiliary_files/ : Arquivos auxiliares aos dados ( vamos ver mais no passo 5 ). dicionario.csv : Tabela dicion\u00e1rio de todo o conjunto de dados ( vamos ver mais no passo 6 ). Apenas a pasta code ser\u00e1 commitada para o seu projeto, os demais arquivos existir\u00e3o apenas localmente ou no Google Cloud.","title":"2. Baixar nossa pasta template"},{"location":"colab_data/#3-preencher-as-tabelas-de-arquitetura","text":"As tabelas de arquitetura determinam qual a estrutura de cada tabela do seu conjunto de dados . Elas definem, por exemplo, o nome, ordem e metadados das vari\u00e1veis, al\u00e9m de compatibiliza\u00e7\u00f5es quando h\u00e1 mudan\u00e7as em vers\u00f5es (por exemplo, se uma vari\u00e1vel muda de nome de um ano para o outro). Cada tabela do conjunto de dados deve ter sua pr\u00f3pria tabela de arquitetura (planilha), que deve ser preenchida no Google Drive para permitir a corre\u00e7\u00e3o pela nossa equipe de dados.","title":"3. Preencher as tabelas de arquitetura"},{"location":"colab_data/#exemplo-rais-tabelas-de-arquitetura","text":"As tabelas de arquitetura da RAIS podem ser consultadas aqui . Elas s\u00e3o uma \u00f3tima refer\u00eancia para voc\u00ea come\u00e7ar seu trabalho j\u00e1 que tem muitas vari\u00e1veis e exemplos de diversas situa\u00e7\u00f5es que voc\u00ea pode acabar encontrando.","title":"Exemplo: RAIS - Tabelas de arquitetura"},{"location":"colab_data/#para-o-preenchimento-de-cada-tabela-do-seu-conjunto-siga-esse-passo-a-passo","text":"A cada in\u00edcio e final de etapa consulte nosso manual de estilo para garantir que voc\u00ea est\u00e1 seguindo a padroniza\u00e7\u00e3o da BD Listar todas as vari\u00e1veis dos dados na coluna original_name Obs: Caso a base mude o nome das vari\u00e1veis ao longo dos anos (como a RAIS), \u00e9 necess\u00e1rio fazer a compatibiliza\u00e7\u00e3o entre anos para todas as vari\u00e1veis preenchendo a coluna de original_name_YYYY para cada ano ou m\u00eas dispon\u00edvel Renomear as vari\u00e1veis conforme nosso manual na coluna name Entender o tipo da vari\u00e1vel e preencher a coluna bigquery_type Preencher a descri\u00e7\u00e3o em description conforme o manual A partir da compatibiliza\u00e7\u00e3o entre anos e/ou consultas aos dados brutos, preencher a cobertura temporal em temporal_coverage de cada vari\u00e1vel Obs: Caso a as vari\u00e1veis tenham a mesma cobertura temporal da tabela preencher apenas com '(1)' Indicar com 'yes' ou 'no' se h\u00e1 dicion\u00e1rio para as vari\u00e1veis em covered_by_dictionary Verificar se as vari\u00e1veis representam alguma entidade presente nos diret\u00f3rios para preencher o directory_column 8 Para as vari\u00e1veis do tipo int64 ou float64 verificar se \u00e9 necess\u00e1rio incluir uma unidade de medida Reordernar as vari\u00e1veis conforme o manual Quando terminar de preencher as tabelas de arquitetura, entre em contato com a equipe da Base dos Dados para validar tudo. \u00c9 necess\u00e1rio que esteja claro o formato final que os dados devem ficar antes de come\u00e7ar a escrever o c\u00f3digo. Assim a gente evita o retrabalho.","title":"Para o preenchimento de cada tabela do seu conjunto siga esse passo a passo:"},{"location":"colab_data/#4-escrever-codigo-de-captura-e-limpeza-de-dados","text":"Ap\u00f3s validadas as tabelas de arquitetura, podemos escrever os c\u00f3digos de captura e limpeza dos dados. Captura : C\u00f3digo que baixa automaticamente todos os dados originais e os salva em /input . Esses dados podem estar dispon\u00edveis em portais ou links FTP, podem ser raspados de sites, entre outros. Limpeza : C\u00f3digo que transforma os dados originais salvos em /input em dados limpos, salva na pasta /output , para, posteriormente, serem subidos na BD. Cada tabela limpa para produ\u00e7\u00e3o pode ser salva como um arquivo \u00fanico ou, caso seja muito grande (e.g. acima de 200 mb), ser particionada no formato Hive em v\u00e1rios sub-arquivos. Os formatos aceitos s\u00e3o .csv ou .parquet . Nossa recomenda\u00e7\u00e3o \u00e9 particionar tabelas por ano , mes e sigla_uf . O particionamento \u00e9 feito atrav\u00e9s da estrutura de pastas, veja o exemplo a baixo para visualizar como.","title":"4. Escrever codigo de captura e limpeza de dados"},{"location":"colab_data/#exemplo-rais-particionamento","text":"A tabela microdados_vinculos da RAIS, por exemplo, \u00e9 uma tabela muito grande (+250GB) por isso n\u00f3s particionamos por ano e sigla_uf . O particionamento foi feito usando a estrutura de pastas /microdados_vinculos/ano=YYYY/sigla_uf=XX .","title":"Exemplo: RAIS - Particionamento"},{"location":"colab_data/#padroes-necessarios-no-codigo","text":"Devem ser escritos em Python , R ou Stata - para que a revis\u00e3o possa ser realizada pela equipe. Pode estar em script ( .py , .R , ...) ou notebooks (Google Colab, Jupyter, Rmarkdown, etc). Os caminhos de arquivos devem ser atalhos relativos \u00e0 pasta ra\u00edz ( <dataset_id> ), ou seja, n\u00e3o devem depender dos caminhos do seu computador. A limpeza deve seguir nosso manual de estilo e as melhores pr\u00e1ticas de programa\u00e7\u00e3o .","title":"Padr\u00f5es necess\u00e1rios no c\u00f3digo"},{"location":"colab_data/#exemplo-pnad-continua-codigo-de-limpeza","text":"O c\u00f3digo de limpeza foi constru\u00eddo em R e pode ser consultado aqui .","title":"Exemplo: PNAD Cont\u00ednua - C\u00f3digo de limpeza"},{"location":"colab_data/#exemplo-atividade-na-camara-legislativa-codigo-de-download-e-limpeza","text":"O c\u00f3digo de limpeza foi constru\u00eddo em Python pode ser consultado aqui","title":"Exemplo: Atividade na C\u00e2mara Legislativa - C\u00f3digo de download e limpeza"},{"location":"colab_data/#5-caso-necessario-organizar-arquivos-auxiliares","text":"\u00c9 comum bases de dados serem disponibilizadas com arquivos auxiliares. Esses podem incluir notas t\u00e9cnicas, descri\u00e7\u00f5es de coleta e amostragem, etc. Para ajudar usu\u00e1rios da Base dos Dados terem mais contexto e entenderem melhor os dados, organize todos esses arquivos auxiliares em /extra/auxiliary_files . Fique \u00e0 vontade para estruturar sub-pastas como quiser l\u00e1 dentro. O que importa \u00e9 que fique claro o que s\u00e3o esses arquivos.","title":"5. (Caso necess\u00e1rio) Organizar arquivos auxiliares"},{"location":"colab_data/#6-caso-necessario-criar-tabela-dicionario","text":"Muitas vezes, especialmente com bases antigas, h\u00e1 m\u00faltiplos dicion\u00e1rios em formatos Excel ou outros. Na Base dos Dados n\u00f3s unificamos tudo em um \u00fanico arquivo em formato .csv - um \u00fanico dicion\u00e1rio para todas as colunas de todas as tabelas do seu conjunto. Detalhes importantes de como construir seu dicion\u00e1rio est\u00e3o no nosso manual de estilo .","title":"6. (Caso necess\u00e1rio) Criar tabela dicion\u00e1rio"},{"location":"colab_data/#exemplo-rais-dicionario","text":"O dicion\u00e1rio completo pode ser consultado aqui . Ele j\u00e1 possui a estrutura padr\u00e3o que utilizamos para dicion\u00e1rios.","title":"Exemplo: RAIS - Dicion\u00e1rio"},{"location":"colab_data/#7-subir-tudo-no-google-cloud","text":"Tudo pronto! Agora s\u00f3 falta subir para o Google Cloud e enviar para revis\u00e3o. Para isso, vamos usar o cliente basedosdados (dispon\u00edvel em Python) que facilita as configura\u00e7\u00f5es e etapas do processo. Como existe um custo para o armazenamento no storage, para finalizar essa etapa vamos precisar te disponibilizar uma api_key especifica para volunt\u00e1rios para subir os dados em nosso ambiente de desenvolvimento. Assim, entre em nosso canal no Discord e nos chame em 'quero-contribuir'","title":"7. Subir tudo no Google Cloud"},{"location":"colab_data/#configure-suas-credenciais-localmente","text":"7.1 No seu terminal instale nosso cliente: pip install basedosdados . 7.2 Rode import basedosdados as bd no python e siga o passo a passo para configurar localmente com as credenciais de seu projeto no Google Cloud. Preencha as informa\u00e7\u00f5es conforme a seguir: * STEP 1: y * STEP 2: basedosdados-dev (colocar o .json passado pela equipe da bd na pasta credentials) * STEP 3: y * STEP 4: basedosdados-dev * STEP 5: https://api.basedosdados.org/api/v1/graphql","title":"Configure suas credenciais localmente"},{"location":"colab_data/#suba-os-arquivos-na-cloud","text":"Os dados v\u00e3o passar por 3 lugares no Google Cloud: Storage : tamb\u00e9m chamado de GCS \u00e9 o local onde ser\u00e3o armazenados o arquivos \"frios\" (arquiteturas, dados, arquivos auxiliares). BigQuery-DEV-Staging : tabela que conecta os dados do storage ao projeto basedosdados-dev no bigquery BigQuery-DEV-Produ\u00e7\u00e3o : tabela utilizada paras teste e tratamento via SQL do conjunto de dados 7.3 Crie a tabela no bucket do GCS e BigQuey-DEV-staging , usando a API do Python, da seguinte forma: ```python import basedosdados as bd tb = bd.Table( dataset_id='<dataset_id>', table_id='<table_id>') tb.create( path='<caminho_para_os_dados>', if_table_exists='raise', if_storage_data_exists='raise', ) ``` Os seguintes par\u00e2metros podem ser usados: - `path` (obrigat\u00f3rio): o caminho completo do arquivo no seu computador, como: `/Users/<seu_usuario>/projetos/basedosdados/mais/bases/[DATASET_ID]/output/microdados.csv`. !!! Tip \"Caso seus dados sejam particionados, o caminho deve apontar para a pasta onde est\u00e3o as parti\u00e7\u00f5es. No contr\u00e1rio, deve apontar para um arquivo `.csv` (por exemplo, microdados.csv).\" - `force_dataset`: comando que cria os arquivos de configura\u00e7\u00e3o do dataset no BigQuery. - _True_: os arquivos de configura\u00e7\u00e3o do dataset ser\u00e3o criados no seu projeto e, caso ele n\u00e3o exista no BigQuery, ser\u00e1 criado automaticamente. **Se voc\u00ea j\u00e1 tiver criado e configurado o dataset, n\u00e3o use esta op\u00e7\u00e3o, pois ir\u00e1 sobrescrever arquivos**. - _False_: o dataset n\u00e3o ser\u00e1 recriado e, se n\u00e3o existir, ser\u00e1 criado automaticamente. - `if_table_exists` : comando utilizado caso a **tabela j\u00e1 exista no BQ**: - _raise_: retorna mensagem de erro. - _replace_: substitui a tabela. - _pass_: n\u00e3o faz nada. - `if_storage_data_exists`: comando utilizado caso os **dados j\u00e1 existam no Google Cloud Storage**: - _raise_: retorna mensagem de erro - _replace_: substitui os dados existentes. - _pass_: n\u00e3o faz nada. !!! Info \"Se o projeto n\u00e3o existir no BigQuery, ele ser\u00e1 automaticamente criado\" Consulte tamb\u00e9m nossa API para mais detalhes de cada m\u00e9todo. 7.4 Crie os arquivos .sql e schema.yml a partir da tabela de arquitetura seguindo essa documenta\u00e7\u00e3o Caso voc\u00ea precise, nesse momento voc\u00ea pode alterar a consulta em SQL para realizar tratamentos finais a partir da tabela staging , pode incluir coluna, remover coluna, fazer opera\u00e7\u00f5es alg\u00e9bricas, substituir strings, etc. O SQL \u00e9 o limite! 7.5 Rode e teste os modelos localmente seguindo essa documenta\u00e7\u00e3o 7.6 Suba os metadados da tabela no site: Por enquanto apenas a equipe dados tem permiss\u00f5es de subir os metadados da tabela no site, por isso ser\u00e1 necess\u00e1rio entrar em contato conosco. J\u00e1 estamos trabalhando para que, num futuro pr\u00f3ximo, os volunt\u00e1rios tamb\u00e9m possam atualizar dados no site. 7.7 Suba os arquivos auxiliares: st = bd . Storage ( dataset_id = < dataset_id > , table_id = < table_id > ) st . upload ( path = 'caminho_para_os_arquivos_auxiliares' , mode = 'auxiliary_files' , if_exists = 'raise' )","title":"Suba os arquivos na Cloud"},{"location":"colab_data/#8-enviar-tudo-para-revisao","text":"Ufa, \u00e9 isso! Agora s\u00f3 resta enviar tudo para revis\u00e3o no reposit\u00f3rio da Base dos Dados. Clone o nosso reposit\u00f3rio localmente. D\u00ea um cd para a pasta local do reposit\u00f3rio e abra uma nova branch com git checkout -b [dataset_id] . Todas as adi\u00e7\u00f5es e modifica\u00e7\u00f5es ser\u00e3o inclu\u00eddas nessa branch . Para cada tabela nova incluir o arquivo com nome table_id.sql na pasta queries-basedosdados/models/dataset_id/ copiando as queries que voc\u00ea desenvolveu no passo 7. Incluir o arquivo schema.yaml desenvolvido no passo 7 Caso seja um dataset novo, incluir o dataset conforme as instru\u00e7\u00f5es do arquivo queries-basedosdados/dbt_project.yaml (n\u00e3o se esque\u00e7a de seguir a ordem alfab\u00e9tica pra n\u00e3o bagun\u00e7ar a organiza\u00e7\u00e3o) Inclua o seu c\u00f3digo de captura e limpeza em na pasta queries-basedosdados/models/dataset_id/code Agora \u00e9 s\u00f3 publicar a branch, abrir o PR com as labels 'table-approve' e marcar a equipe dados para corre\u00e7\u00e3o E agora? Nossa equipe ir\u00e1 revisar os dados e metadados submetidos via Github. Podemos entrar em contato para tirar d\u00favidas ou solicitar mudan\u00e7as no c\u00f3digo. Quando tudo estiver OK, fazemos um merge do seu pull request e os dados s\u00e3o automaticamente publicados na nossa plataforma!","title":"8. Enviar tudo para revis\u00e3o"},{"location":"colab_infrastructure/","text":"Infra da BD Nosso time de infraestrutura cuida para que todos os pacotes e pipelines estejam funcionando da melhor forma para o p\u00fablico. Utilizamos o Github para gerir todo o c\u00f3digo e mant\u00ea-lo organizado, onde voc\u00ea pode encontrar issues de novas features, bugs e melhorias que estamos trabalhando. Como funciona nossa infraestrutura Nossa infraestrutura \u00e9 composta de 3 frentes principais: Sistema de ingest\u00e3o de dados : desde o upload at\u00e9 a disponibiliza\u00e7\u00e3o em produ\u00e7\u00e3o; Pacotes de acesso Website : Front-end, Back-end e APIs. Atualmente \u00e9 poss\u00edvel colaborar em todas as frentes, com destaque ao desenvolvimento dos pesos e contrapesos e atualiza\u00e7\u00e3o do site. Sugerimos que entre em nosso canal no Discord para tirar d\u00favidas e interagir com outros(as) colaboradores(as)! :) Sistema de ingest\u00e3o de dados O sistema possui ambientes de desenvolvimento ( basedosdados-dev ), homologa\u00e7\u00e3o ( basedosdados-staging ) e produ\u00e7\u00e3o ( basedosdados ) no BigQuery. Os processos para subida de dados s\u00e3o detalhados na imagem abaixo, sendo alguns deles automatizados via Github Actions. Explicamos com mais detalhes do funcionamento desse sistema no blog . Como contribuir? Melhorando a documenta\u00e7\u00e3o do sistema aqui :) Criando checagens autom\u00e1ticas de qualidade de dados e metadados (em Python) Criando novos issues e sugest\u00f5es de melhorias Pacotes de acesso Os pacotes de acesso ao datalake est\u00e3o em constante melhoria e voc\u00ea pode colaborar com a gente com novas features, conserto de bugs e muito mais. Como contribuir? Explore os issues do pacote Python Explore os issues do pacote R Ajude a desenvolver o pacote em Stata Website Nosso website \u00e9 desenvolvido em Next.js e consome uma API de metadados do CKAN. O c\u00f3digo do site est\u00e1 tamb\u00e9m no nosso Github . Como contribuir? Melhore o UX do site (Next, CSS, HTML) Ajudando em issues abertas de BE, FE ou API Criando novos issues e sugest\u00f5es de melhorias","title":"Infraestrutura"},{"location":"colab_infrastructure/#infra-da-bd","text":"Nosso time de infraestrutura cuida para que todos os pacotes e pipelines estejam funcionando da melhor forma para o p\u00fablico. Utilizamos o Github para gerir todo o c\u00f3digo e mant\u00ea-lo organizado, onde voc\u00ea pode encontrar issues de novas features, bugs e melhorias que estamos trabalhando.","title":"Infra da BD"},{"location":"colab_infrastructure/#como-funciona-nossa-infraestrutura","text":"Nossa infraestrutura \u00e9 composta de 3 frentes principais: Sistema de ingest\u00e3o de dados : desde o upload at\u00e9 a disponibiliza\u00e7\u00e3o em produ\u00e7\u00e3o; Pacotes de acesso Website : Front-end, Back-end e APIs. Atualmente \u00e9 poss\u00edvel colaborar em todas as frentes, com destaque ao desenvolvimento dos pesos e contrapesos e atualiza\u00e7\u00e3o do site. Sugerimos que entre em nosso canal no Discord para tirar d\u00favidas e interagir com outros(as) colaboradores(as)! :)","title":"Como funciona nossa infraestrutura"},{"location":"colab_infrastructure/#sistema-de-ingestao-de-dados","text":"O sistema possui ambientes de desenvolvimento ( basedosdados-dev ), homologa\u00e7\u00e3o ( basedosdados-staging ) e produ\u00e7\u00e3o ( basedosdados ) no BigQuery. Os processos para subida de dados s\u00e3o detalhados na imagem abaixo, sendo alguns deles automatizados via Github Actions. Explicamos com mais detalhes do funcionamento desse sistema no blog .","title":"Sistema de ingest\u00e3o de dados"},{"location":"colab_infrastructure/#como-contribuir","text":"Melhorando a documenta\u00e7\u00e3o do sistema aqui :) Criando checagens autom\u00e1ticas de qualidade de dados e metadados (em Python) Criando novos issues e sugest\u00f5es de melhorias","title":"Como contribuir?"},{"location":"colab_infrastructure/#pacotes-de-acesso","text":"Os pacotes de acesso ao datalake est\u00e3o em constante melhoria e voc\u00ea pode colaborar com a gente com novas features, conserto de bugs e muito mais.","title":"Pacotes de acesso"},{"location":"colab_infrastructure/#como-contribuir_1","text":"Explore os issues do pacote Python Explore os issues do pacote R Ajude a desenvolver o pacote em Stata","title":"Como contribuir?"},{"location":"colab_infrastructure/#website","text":"Nosso website \u00e9 desenvolvido em Next.js e consome uma API de metadados do CKAN. O c\u00f3digo do site est\u00e1 tamb\u00e9m no nosso Github .","title":"Website"},{"location":"colab_infrastructure/#como-contribuir_2","text":"Melhore o UX do site (Next, CSS, HTML) Ajudando em issues abertas de BE, FE ou API Criando novos issues e sugest\u00f5es de melhorias","title":"Como contribuir?"},{"location":"style_data/","text":"Manual de estilo Nessa se\u00e7\u00e3o listamos todos os padr\u00f5es do nosso manual de estilo e diretrizes de dados que usamos na Base dos Dados. Eles nos ajudam a manter os dados e metadados que publicamos com qualidade alta. Voc\u00ea pode usar o menu esquerdo para navegar pelos diferentes t\u00f3picos dessa p\u00e1gina. Nomea\u00e7\u00e3o de bases e tabelas Conjuntos de dados ( dataset_id ) Nomeamos conjuntos no formato <organization_id\\>_<descri\u00e7\u00e3o\\> , onde organization_id segue por padr\u00e3o a abrang\u00eancia geogr\u00e1fica da organiza\u00e7\u00e3o que publica o conjunto: organization_id Mundial mundo_<organizacao> Federal <sigla_pais>_<organizacao> Estadual <sigla_pais>_<sigla_uf>_<organizacao> Municipal <sigla_pais>_<sigla_uf>_<cidade>_<organizacao> sigla_pais e sigla_uf s\u00e3o sempre 2 letras min\u00fasculas; organizacao \u00e9 o nome ou sigla (de prefer\u00eancia) da organiza\u00e7\u00e3o que publicou os dados orginais (ex: ibge , tse , inep ). descricao \u00e9 uma breve descri\u00e7\u00e3o do conjunto de dados, que pode ser Por exemplo, o conjunto de dados do PIB do IBGE tem como dataset_id : br_ibge_pib N\u00e3o sabe como nomear a organiza\u00e7\u00e3o? Sugerimos que v\u00e1 no site da mesma e veja como ela se autodenomina (ex: DETRAN-RJ seria br_rj_detran ) Tabelas Nomear tabelas \u00e9 algo menos estruturado e, por isso, requer bom senso. Mas temos algumas regras: Se houver tabelas para diferentes entidades, incluir a entidade no come\u00e7o do nome. Exemplo: municipio_valor , uf_valor . N\u00e3o incluir a unidade temporal no nome. Exemplo: nomear municipio , e n\u00e3o municipio_ano . Deixar nomes no singular. Exemplo: escola , e n\u00e3o escolas . Nomear de microdados as tabelas mais desagregadas. Em geral essas tem dados a n\u00edvel de pessoa ou transa\u00e7\u00e3o. Exemplos de dataset_id.table_id Mundial mundo_waze.alertas Dados de alertas do Waze de diferentes cidades. Federal br_tse_eleicoes.candidatos Dados de candidatos a cargos pol\u00edticos do TSE. Federal br_ibge_pnad.microdados Microdados da Pesquisa Nacional por Amostra de Domic\u00edlios produzidos pelo IBGE. Federal br_ibge_pnadc.microdados Microdados da Pesquisa Nacional por Amostra de Domic\u00edlios Cont\u00ednua (PNAD-C) produzidos pelo IBGE. Estadual br_sp_see_docentes.carga_horaria Carga hor\u00e1ria anonimizado de docentes ativos da rede estadual de ensino de SP. Municipal br_rj_riodejaneiro_cmrj_legislativo.votacoes Dados de vota\u00e7\u00e3o da C\u00e2mara Municipal do Rio de Janeiro (RJ). Formatos de tabelas Tabelas devem, na medida do poss\u00edvel, estar no formato long , ao inv\u00e9s de wide . Nomea\u00e7\u00e3o de vari\u00e1veis Nomes de vari\u00e1veis devem respeitar algumas regras: Usar ao m\u00e1ximo nomes j\u00e1 presentes no reposit\u00f3rio. Exemplos: ano , mes , id_municipio , sigla_uf , idade , cargo , resultado , votos , receita , despesa , preco , etc. Respeitar padr\u00f5es das tabelas de diret\u00f3rios. Ser o mais intuitivo, claro e extenso poss\u00edvel. Ter todas letras min\u00fasculas (inclusive siglas), sem acentos, conectados por _ . N\u00e3o incluir conectores como de , da , dos , e , a , em , etc. S\u00f3 ter o prefixo id_ quando a vari\u00e1vel representar chaves prim\u00e1rias de entidades (que eventualmente teriam uma tabela de diret\u00f3rio). Exemplos que tem: id_municipio , id_uf , id_escola , id_pessoa . Exemplos que n\u00e3o tem: rede , localizacao . Importante : quando a base est\u00e1 em ingl\u00eas id vira um sufixo S\u00f3 ter sufixos de entidade quando a entidade da coluna for diferente da entidade da tabela. Exemplos que tem: numa tabela com entidade pessoa , uma coluna sobre PIB municipal se chamaria pib_municipio . Exemplos que n\u00e3o tem: numa tabela com entidade pessoa , caracter\u00edsticas da pessoa se chamariam nome , idade , sexo , etc. Lista de prefixos permitidos nome_ , data_ , numero_ , quantidade_ , proporcao_ (vari\u00e1veis de porcentagem 0-100%), taxa_ , razao_ , indice_ , indicador_ (vari\u00e1veis do tipo booleano), tipo_ , sigla_ , sequencial_ . Lista de sufixos comuns _pc (per capita) Ordenamento de vari\u00e1veis A ordem de vari\u00e1veis em tabelas \u00e9 padronizada para manter uma consist\u00eancia no reposit\u00f3rio. Nossas regras s\u00e3o: Chaves prim\u00e1rias \u00e0 esquerda, em ordem descendente de abrang\u00eancia; No meio devem estar vari\u00e1veis qualitativas da linha; As \u00faltimas vari\u00e1veis devem ser os valores quantitativos em ordem crescente de relev\u00e2ncia; Exemplo de ordem: ano , sigla_uf , id_municipio , id_escola , rede , nota_ideb ; Dependendo da tabela, pode ser recomendado agrupar e ordenar vari\u00e1veis por temas. Tipos de vari\u00e1veis N\u00f3s utilizamos algumas das op\u00e7\u00f5es de tipos do BigQuery : string , int64 , float64 , date , time , geography . Quando escolher: string : Vari\u00e1veis de texto Chaves de vari\u00e1veis categ\u00f3ricas com dicion\u00e1rio ou diret\u00f3rio int64 : Vari\u00e1veis de n\u00fameros inteiros com as quais \u00e9 poss\u00edvel fazer contas (adi\u00e7\u00e3o, subtra\u00e7\u00e3o) Vari\u00e1veis do tipo booleanas que preenchemos com 0 ou 1 float64 : Vari\u00e1veis de n\u00fameros com casas decimais com as quais \u00e9 poss\u00edvel fazer contas (adi\u00e7\u00e3o, subtra\u00e7\u00e3o) date : Vari\u00e1veis de data no formato YYYY-MM-DD time : Vari\u00e1veis de tempo no formato HH:MM:SS geography : Vari\u00e1veis de geografia Unidades de medida A regra \u00e9 manter vari\u00e1veis com suas unidades de medida originais listadas nesse c\u00f3digo , com a exce\u00e7\u00e3o de vari\u00e1veis financeiras onde convertermos moedas antigas para as atuais (e.g. Cruzeiro para Real). Catalogamos unidades de medida em formato padr\u00e3o na tabela de arquitetura. Lista completa aqui Exemplos: m , km/h , BRL . Para colunas financeiras deflacionadas, listamos a moeda com o ano base. Exemplo: uma coluna medida em reais de 2010 tem unidade BRL_2010 . Vari\u00e1veis devem ter sempre unidades de medida com base 1. Ou seja, ter BRL ao inv\u00e9s de 1000 BRL , ou pessoa ao inv\u00e9s de 1000 pessoas . Essa informa\u00e7\u00e3o, como outros metadados de colunas, s\u00e3o registradas na tabela de arquitetura da tabela. Quais vari\u00e1veis manter, quais adicionar e quais remover Mantemos nossas tabelas parcialmente normalizadas , e temos regras para quais vari\u00e1veis incluirmos em produ\u00e7\u00e3o. Elas s\u00e3o: Remover vari\u00e1veis de nomes de entidades que j\u00e1 est\u00e3o em diret\u00f3rios. Exemplo: retirar municipio da tabela que j\u00e1 inclui id_municipio . Remover vari\u00e1veis servindo de parti\u00e7\u00e3o. Exemplo: remover ano e sigla_uf se a tabela \u00e9 particionada nessas duas dimens\u00f5es. Adicionar chaves prim\u00e1rias principais para cada entidade j\u00e1 existente. Exemplo: adicionar id_municipio a tabelas que s\u00f3 incluem id_municipio_tse . Manter todas as chaves prim\u00e1rias que j\u00e1 vem com a tabela, mas (1) adicionar chaves relevantes (e.g. sigla_uf , id_municipio ) e (2) retirar chaves irrelevantes (e.g. regiao ). Cobertura temporal Preencher a coluna cobertura_temporal nos metadados de tabela, coluna e chave (em dicion\u00e1rios) segue o seguinte padr\u00e3o. Formato geral: data_inicial(unidade_temporal)data_final data_inicial e data_final est\u00e3o na correspondente unidade temporal. Exemplo: tabela com unidade ano tem cobertura 2005(1)2018 . Exemplo: tabela com unidade mes tem cobertura 2005-08(1)2018-12 . Exemplo: tabela com unidade semana tem cobertura 2005-08-01(7)2018-08-31 . Exemplo: tabela com unidade dia tem cobertura 2005-08-01(1)2018-12-31 . Regras para preenchimento Metadados de tabela Preencher no formato geral. Metadados de coluna Preencher no formato geral, exceto quando a data_inicial ou data_final sejam iguais aos da tabela. Nesse caso deixe vazio. Exemplo: suponha que a cobertura da tabela seja 2005(1)2018 . Se uma coluna aparece s\u00f3 em 2012 e existe at\u00e9 2018, preenchemos sua cobertura como 2012(1) . Se uma coluna desaparece em 2013, preenchemos sua cobertura como (1)2013 . Se uma coluna existe na mesma cobertura temporal da tabela, preenchemos sua cobertura como (1) . Metadados de chave Preencher no mesmo padr\u00e3o de colunas, mas a refer\u00eancia sendo a coluna correspondente, e n\u00e3o a tabela. Limpando STRINGs Vari\u00e1veis categ\u00f3ricas: inicial mai\u00fascula e resto min\u00fasculo, com acentos. STRINGs n\u00e3o-estruturadas: manter igual aos dados originais. Formatos de valores Decimal: formato americano, i.e. sempre . (ponto) ao inv\u00e9s de , (v\u00edrgula). Data: YYYY-MM-DD Hor\u00e1rio (24h): HH:MM:SS Datetime ( ISO-8601 ): YYYY-MM-DDTHH:MM:SS.sssZ Valor nulo: \"\" (csv), NULL (Python), NA (R), . ou \"\" (Stata) Propor\u00e7\u00e3o/porcentagem: entre 0-100 Particionamento de tabelas O que \u00e9 particionamento e qual seu objetivo ? De forma resumida, particionar uma tabela \u00e9 dividi-la em v\u00e1rios blocos/partes. O objetivo central \u00e9 diminuir os custos financeiros e aumentar a perfomance, visto que, quanto maior o volume de dados, consequentemente ser\u00e1 maior o custo de armazenamento e consulta. A redu\u00e7\u00e3o de custos e o aumento de perfomance acontece, principalmente, porque a parti\u00e7\u00e3o permite a reorganiza\u00e7\u00e3o do conjunto de dados em pequenos blocos agrupados . Na pr\u00e1tica, realizando o particionamento, \u00e9 poss\u00edvel evitar que uma consulta percorra toda a tabela s\u00f3 para trazer um pequeno recorte de dados. Um exemplo pr\u00e1tico da nossa querida RAIS: Sem utilizar filtro de parti\u00e7\u00e3o: Para esse caso o Bigquery varreu todas (*) as colunas e linhas do conjunto. Vale salientar que esse custo ainda n\u00e3o \u00e9 t\u00e3o grande, visto que a base j\u00e1 foi particionada. Caso esse conjunto n\u00e3o tivesse passado pelo processo de particionamento, essa consulta custaria muito mais dinheiro e tempo, j\u00e1 que se trata de um volume consider\u00e1vel de dados. Com filtro de parti\u00e7\u00e3o: Aqui, filtramos pelas colunas particionadas ano e sigla_uf . Dessa forma, o Bigquery s\u00f3 consulta e retorna os valores da pasta ano e da subpasta sigla_uf . Quando particionar uma tabela? A primeira pergunta que surge quando se trata de particionamento \u00e9: a partir de qual quantidade de linhas uma tabela deve ser particionada? A documenta\u00e7\u00e3o do GCP n\u00e3o define uma quantidade x ou y de linhas que deve ser particionada. O ideal \u00e9 que as tabelas sejam particionadas, com poucas exce\u00e7\u00f5es. Por exemplo, tabelas com menos de 10.000 linhas, que n\u00e3o receber\u00e3o mais ingest\u00e3o de dados, n\u00e3o tem um custo de armazenamento e processamento altos e, portanto, n\u00e3o h\u00e1 necessidade de serem particionadas. Como particionar uma tabela? Se os dados est\u00e3o guardados localmente, \u00e9 necess\u00e1rio: Criar as pastas particionadas na sua pasta de /output , na linguagem que voc\u00ea estiver utilizando. Exemplo de uma tabela particionada por ano e mes , utilizando python : for ano in [ * range ( 2005 , 2020 )]: for mes in [ * range ( 1 , 13 )]: particao = output + f 'table_id/ano= { ano } /mes= { mes } ' if not os . path . exists ( particao ): os . makedirs ( particao ) 2. Salvar os arquivos particionados. for ano in [ * range ( 2005 , 2020 )]: for mes in [ * range ( 1 , 13 )]: df_particao = df [ df [ 'ano' ] == ano ] . copy () # O .copy n\u00e3o \u00e9 necess\u00e1rio \u00e9 apenas uma boa pr\u00e1tica df_particao = df_particao [ df_particao [ 'mes' ] == mes ] df_particao . drop ([ 'ano' , 'mes' ], axis = 1 , inplace = True ) # \u00c9 preciso excluir as colunas utilizadas para parti\u00e7\u00e3o particao = output + f 'table_id/ano= { ano } /mes= { mes } /tabela.csv' df_particao . to_csv ( particao , index = False , encoding = 'utf-8' , na_rep = '' ) Exemplos de tabelas particionadas em R : PNADC PAM Exemplo de como particionar uma tabela em SQL : CREATE TABLE ` dataset_id . table_id ` as ( ano INT64 , mes INT64 , col1 STRING , col1 STRING ) PARTITION BY ano , mes OPTIONS ( Description = 'Descri\u00e7\u00e3o da tabela' ) Regras importantes de particionamento. Os tipos de colunas que o BigQuery aceita como parti\u00e7\u00e3o s\u00e3o: Coluna de unidade de tempo : as tabelas s\u00e3o particionadas com base em uma coluna de TIMESTAMP , DATE ou DATETIME . Tempo de processamento : as tabelas s\u00e3o particionadas com base no carimbo de data/hora quando o BigQuery processa os dados. Intervalo de n\u00fameros inteiros : as tabelas s\u00e3o particionadas com base em uma coluna de n\u00fameros inteiros. Os tipos de colunas que o BigQuery n\u00e3o aceita como parti\u00e7\u00e3o s\u00e3o: BOOL , FLOAT64 , BYTES , etc. O BigQuery aceita no m\u00e1ximo 4.000 parti\u00e7\u00f5es por tabela. Aqui na BD as tabelas geralmente s\u00e3o particionadas por: ano , mes , trimestre e sigla_uf . Note que ao particionar uma tabela \u00e9 preciso excluir a coluna correspondente. Exemplo: \u00e9 preciso excluir a coluna ano ao particionar por ano . N\u00famero de bases por pull request Pull requests no Github devem incluir no m\u00e1ximo um conjunto, mas pode incluir mais de uma base. Ou seja, podem envolver uma ou mais tabela dentro do mesmo conjunto. Dicion\u00e1rios Cada base inclui somente um dicion\u00e1rio (que cobre uma ou mais tabelas). Para cada tabela, coluna, e cobertura temporal, cada chave mapeia unicamente um valor. Chaves n\u00e3o podem ter valores nulos. Dicion\u00e1rios devem cobrir todas as chaves dispon\u00edveis nas tabelas originais. Chaves s\u00f3 podem possuir zeros \u00e0 esquerda quando o n\u00famero de d\u00edgitos da vari\u00e1vel tiver significado. Quando a vari\u00e1vel for enum padr\u00e3o, n\u00f3s excluimos os zeros \u00e0 esquerda. Exemplo: mantemos o zero \u00e0 esquerda da vari\u00e1vel br_bd_diretorios_brasil.cbo_2002:cbo_2002 , que tem seis d\u00edgitos, pois o primeiro d\u00edgito 0 significa a categoria ser do grande grupo = \"Membros das for\u00e7as armadas, policiais e bombeiros militares\" . Para outros casos, como por exemplo br_inep_censo_escolar.turma:etapa_ensino , n\u00f3s excluimos os zeros \u00e0 esquerda. Ou seja, mudamos 01 para 1 . Valores s\u00e3o padronizados: sem espa\u00e7os extras, inicial mai\u00fascula e resto min\u00fasculo, etc. Como preencher os metadados da tabela dicion\u00e1rio? N\u00e3o preencher o spatial_coverage ( cobertura_espacial ), ou seja, deixar o campo vazio. N\u00e3o preencher o temporal_coverage ( cobertura_temporal ), ou seja, deixar o campo vazio. N\u00e3o preencher o observation_level ( nivel_observacao ), ou seja, deixar o campo vazio. Diret\u00f3rios Diret\u00f3rios s\u00e3o as pedras fundamentais da estrutura do nosso datalake . Nossas regras para gerenciar diret\u00f3rios s\u00e3o: Diret\u00f3rios representam entidades do reposit\u00f3rio que tenham chaves prim\u00e1rias (e.g. uf , munic\u00edpio , escola ) e unidades de data-tempo (e.g. data , tempo , dia , mes , ano ). Cada tabela de diret\u00f3rio tem ao menos uma chave prim\u00e1ria com valores \u00fanicos e sem nulos. Exemplos: municipio:id_municipio , uf:sigla_uf . Nomes de vari\u00e1veis com prefixo id_ s\u00e3o reservadas para chaves prim\u00e1rias de entidades. Veja todas as tabelas j\u00e1 dispon\u00edveis aqui. Como preencher os metadados das tabelas de diret\u00f3rio? Preencher o spatial_coverage ( cobertura_espacial ), que \u00e9 a m\u00e1xima unidade espacial que a tabela cobre. Exemplo: sa.br, que significa que o n\u00edvel de agrega\u00e7\u00e3o espacial da tabela \u00e9 o Brasil. N\u00e3o preencher o temporal_coverage ( cobertura_temporal ), ou seja, deixar o campo vazio. Preencher o observation_level ( nivel_observacao ), que consiste no n\u00edvel de observa\u00e7\u00e3o da tabela, ou seja, o que representa cada linha. N\u00e3o preencher o temporal_coverage ( cobertura_temporal ) das colunas da tabela, ou seja, deixar o campo vazio. Fontes Originais O campo se refere aos dados na fonte original, que ainda n\u00e3o passaram pela metodologia de tratamento da Base dos Dados, ou seja, nosso _input_ . Ao clicar nele, a ideia \u00e9 redirecionar o usu\u00e1rio para a p\u00e1gina da fonte original dos dados. As regras para gerenciar as Fontes Originais s\u00e3o: Incluir o nome do link externo que leva \u00e0 fonte original. Como padr\u00e3o, esse nome deve ser da organiza\u00e7\u00e3o ou do portal que armazenena os dados. Exemplos: Sinopses Estat\u00edsticas da Educa\u00e7\u00e3o B\u00e1sica: Dados Abertos do Inep , Penn World Tables: Groningen Growth and Development Centre . Preencher os metadados de Fontes Originais: Descri\u00e7\u00e3o, URL, L\u00edngua, Tem Dados Estruturados, Tem uma API, \u00c9 de Gra\u00e7a, Requer Registro, Disponibilidade, Requer IP de Algum Pa\u00eds, Tipo de Licen\u00e7a, Cobertura Temporal, Cobertura Espacial e N\u00edvel da Observa\u00e7\u00e3o. Pensou em melhorias para os padr\u00f5es definidos? Abra um issue no nosso Github ou mande uma mensagem no Discord para conversarmos :)","title":"Manual de estilo"},{"location":"style_data/#manual-de-estilo","text":"Nessa se\u00e7\u00e3o listamos todos os padr\u00f5es do nosso manual de estilo e diretrizes de dados que usamos na Base dos Dados. Eles nos ajudam a manter os dados e metadados que publicamos com qualidade alta. Voc\u00ea pode usar o menu esquerdo para navegar pelos diferentes t\u00f3picos dessa p\u00e1gina.","title":"Manual de estilo"},{"location":"style_data/#nomeacao-de-bases-e-tabelas","text":"","title":"Nomea\u00e7\u00e3o de bases e tabelas"},{"location":"style_data/#conjuntos-de-dados-dataset_id","text":"Nomeamos conjuntos no formato <organization_id\\>_<descri\u00e7\u00e3o\\> , onde organization_id segue por padr\u00e3o a abrang\u00eancia geogr\u00e1fica da organiza\u00e7\u00e3o que publica o conjunto: organization_id Mundial mundo_<organizacao> Federal <sigla_pais>_<organizacao> Estadual <sigla_pais>_<sigla_uf>_<organizacao> Municipal <sigla_pais>_<sigla_uf>_<cidade>_<organizacao> sigla_pais e sigla_uf s\u00e3o sempre 2 letras min\u00fasculas; organizacao \u00e9 o nome ou sigla (de prefer\u00eancia) da organiza\u00e7\u00e3o que publicou os dados orginais (ex: ibge , tse , inep ). descricao \u00e9 uma breve descri\u00e7\u00e3o do conjunto de dados, que pode ser Por exemplo, o conjunto de dados do PIB do IBGE tem como dataset_id : br_ibge_pib N\u00e3o sabe como nomear a organiza\u00e7\u00e3o? Sugerimos que v\u00e1 no site da mesma e veja como ela se autodenomina (ex: DETRAN-RJ seria br_rj_detran )","title":"Conjuntos de dados (dataset_id)"},{"location":"style_data/#tabelas","text":"Nomear tabelas \u00e9 algo menos estruturado e, por isso, requer bom senso. Mas temos algumas regras: Se houver tabelas para diferentes entidades, incluir a entidade no come\u00e7o do nome. Exemplo: municipio_valor , uf_valor . N\u00e3o incluir a unidade temporal no nome. Exemplo: nomear municipio , e n\u00e3o municipio_ano . Deixar nomes no singular. Exemplo: escola , e n\u00e3o escolas . Nomear de microdados as tabelas mais desagregadas. Em geral essas tem dados a n\u00edvel de pessoa ou transa\u00e7\u00e3o.","title":"Tabelas"},{"location":"style_data/#exemplos-de-dataset_idtable_id","text":"Mundial mundo_waze.alertas Dados de alertas do Waze de diferentes cidades. Federal br_tse_eleicoes.candidatos Dados de candidatos a cargos pol\u00edticos do TSE. Federal br_ibge_pnad.microdados Microdados da Pesquisa Nacional por Amostra de Domic\u00edlios produzidos pelo IBGE. Federal br_ibge_pnadc.microdados Microdados da Pesquisa Nacional por Amostra de Domic\u00edlios Cont\u00ednua (PNAD-C) produzidos pelo IBGE. Estadual br_sp_see_docentes.carga_horaria Carga hor\u00e1ria anonimizado de docentes ativos da rede estadual de ensino de SP. Municipal br_rj_riodejaneiro_cmrj_legislativo.votacoes Dados de vota\u00e7\u00e3o da C\u00e2mara Municipal do Rio de Janeiro (RJ).","title":"Exemplos de dataset_id.table_id"},{"location":"style_data/#formatos-de-tabelas","text":"Tabelas devem, na medida do poss\u00edvel, estar no formato long , ao inv\u00e9s de wide .","title":"Formatos de tabelas"},{"location":"style_data/#nomeacao-de-variaveis","text":"Nomes de vari\u00e1veis devem respeitar algumas regras: Usar ao m\u00e1ximo nomes j\u00e1 presentes no reposit\u00f3rio. Exemplos: ano , mes , id_municipio , sigla_uf , idade , cargo , resultado , votos , receita , despesa , preco , etc. Respeitar padr\u00f5es das tabelas de diret\u00f3rios. Ser o mais intuitivo, claro e extenso poss\u00edvel. Ter todas letras min\u00fasculas (inclusive siglas), sem acentos, conectados por _ . N\u00e3o incluir conectores como de , da , dos , e , a , em , etc. S\u00f3 ter o prefixo id_ quando a vari\u00e1vel representar chaves prim\u00e1rias de entidades (que eventualmente teriam uma tabela de diret\u00f3rio). Exemplos que tem: id_municipio , id_uf , id_escola , id_pessoa . Exemplos que n\u00e3o tem: rede , localizacao . Importante : quando a base est\u00e1 em ingl\u00eas id vira um sufixo S\u00f3 ter sufixos de entidade quando a entidade da coluna for diferente da entidade da tabela. Exemplos que tem: numa tabela com entidade pessoa , uma coluna sobre PIB municipal se chamaria pib_municipio . Exemplos que n\u00e3o tem: numa tabela com entidade pessoa , caracter\u00edsticas da pessoa se chamariam nome , idade , sexo , etc. Lista de prefixos permitidos nome_ , data_ , numero_ , quantidade_ , proporcao_ (vari\u00e1veis de porcentagem 0-100%), taxa_ , razao_ , indice_ , indicador_ (vari\u00e1veis do tipo booleano), tipo_ , sigla_ , sequencial_ . Lista de sufixos comuns _pc (per capita)","title":"Nomea\u00e7\u00e3o de vari\u00e1veis"},{"location":"style_data/#ordenamento-de-variaveis","text":"A ordem de vari\u00e1veis em tabelas \u00e9 padronizada para manter uma consist\u00eancia no reposit\u00f3rio. Nossas regras s\u00e3o: Chaves prim\u00e1rias \u00e0 esquerda, em ordem descendente de abrang\u00eancia; No meio devem estar vari\u00e1veis qualitativas da linha; As \u00faltimas vari\u00e1veis devem ser os valores quantitativos em ordem crescente de relev\u00e2ncia; Exemplo de ordem: ano , sigla_uf , id_municipio , id_escola , rede , nota_ideb ; Dependendo da tabela, pode ser recomendado agrupar e ordenar vari\u00e1veis por temas.","title":"Ordenamento de vari\u00e1veis"},{"location":"style_data/#tipos-de-variaveis","text":"N\u00f3s utilizamos algumas das op\u00e7\u00f5es de tipos do BigQuery : string , int64 , float64 , date , time , geography . Quando escolher: string : Vari\u00e1veis de texto Chaves de vari\u00e1veis categ\u00f3ricas com dicion\u00e1rio ou diret\u00f3rio int64 : Vari\u00e1veis de n\u00fameros inteiros com as quais \u00e9 poss\u00edvel fazer contas (adi\u00e7\u00e3o, subtra\u00e7\u00e3o) Vari\u00e1veis do tipo booleanas que preenchemos com 0 ou 1 float64 : Vari\u00e1veis de n\u00fameros com casas decimais com as quais \u00e9 poss\u00edvel fazer contas (adi\u00e7\u00e3o, subtra\u00e7\u00e3o) date : Vari\u00e1veis de data no formato YYYY-MM-DD time : Vari\u00e1veis de tempo no formato HH:MM:SS geography : Vari\u00e1veis de geografia","title":"Tipos de vari\u00e1veis"},{"location":"style_data/#unidades-de-medida","text":"A regra \u00e9 manter vari\u00e1veis com suas unidades de medida originais listadas nesse c\u00f3digo , com a exce\u00e7\u00e3o de vari\u00e1veis financeiras onde convertermos moedas antigas para as atuais (e.g. Cruzeiro para Real). Catalogamos unidades de medida em formato padr\u00e3o na tabela de arquitetura. Lista completa aqui Exemplos: m , km/h , BRL . Para colunas financeiras deflacionadas, listamos a moeda com o ano base. Exemplo: uma coluna medida em reais de 2010 tem unidade BRL_2010 . Vari\u00e1veis devem ter sempre unidades de medida com base 1. Ou seja, ter BRL ao inv\u00e9s de 1000 BRL , ou pessoa ao inv\u00e9s de 1000 pessoas . Essa informa\u00e7\u00e3o, como outros metadados de colunas, s\u00e3o registradas na tabela de arquitetura da tabela.","title":"Unidades de medida"},{"location":"style_data/#quais-variaveis-manter-quais-adicionar-e-quais-remover","text":"Mantemos nossas tabelas parcialmente normalizadas , e temos regras para quais vari\u00e1veis incluirmos em produ\u00e7\u00e3o. Elas s\u00e3o: Remover vari\u00e1veis de nomes de entidades que j\u00e1 est\u00e3o em diret\u00f3rios. Exemplo: retirar municipio da tabela que j\u00e1 inclui id_municipio . Remover vari\u00e1veis servindo de parti\u00e7\u00e3o. Exemplo: remover ano e sigla_uf se a tabela \u00e9 particionada nessas duas dimens\u00f5es. Adicionar chaves prim\u00e1rias principais para cada entidade j\u00e1 existente. Exemplo: adicionar id_municipio a tabelas que s\u00f3 incluem id_municipio_tse . Manter todas as chaves prim\u00e1rias que j\u00e1 vem com a tabela, mas (1) adicionar chaves relevantes (e.g. sigla_uf , id_municipio ) e (2) retirar chaves irrelevantes (e.g. regiao ).","title":"Quais vari\u00e1veis manter, quais adicionar e quais remover"},{"location":"style_data/#cobertura-temporal","text":"Preencher a coluna cobertura_temporal nos metadados de tabela, coluna e chave (em dicion\u00e1rios) segue o seguinte padr\u00e3o. Formato geral: data_inicial(unidade_temporal)data_final data_inicial e data_final est\u00e3o na correspondente unidade temporal. Exemplo: tabela com unidade ano tem cobertura 2005(1)2018 . Exemplo: tabela com unidade mes tem cobertura 2005-08(1)2018-12 . Exemplo: tabela com unidade semana tem cobertura 2005-08-01(7)2018-08-31 . Exemplo: tabela com unidade dia tem cobertura 2005-08-01(1)2018-12-31 . Regras para preenchimento Metadados de tabela Preencher no formato geral. Metadados de coluna Preencher no formato geral, exceto quando a data_inicial ou data_final sejam iguais aos da tabela. Nesse caso deixe vazio. Exemplo: suponha que a cobertura da tabela seja 2005(1)2018 . Se uma coluna aparece s\u00f3 em 2012 e existe at\u00e9 2018, preenchemos sua cobertura como 2012(1) . Se uma coluna desaparece em 2013, preenchemos sua cobertura como (1)2013 . Se uma coluna existe na mesma cobertura temporal da tabela, preenchemos sua cobertura como (1) . Metadados de chave Preencher no mesmo padr\u00e3o de colunas, mas a refer\u00eancia sendo a coluna correspondente, e n\u00e3o a tabela.","title":"Cobertura temporal"},{"location":"style_data/#limpando-strings","text":"Vari\u00e1veis categ\u00f3ricas: inicial mai\u00fascula e resto min\u00fasculo, com acentos. STRINGs n\u00e3o-estruturadas: manter igual aos dados originais.","title":"Limpando STRINGs"},{"location":"style_data/#formatos-de-valores","text":"Decimal: formato americano, i.e. sempre . (ponto) ao inv\u00e9s de , (v\u00edrgula). Data: YYYY-MM-DD Hor\u00e1rio (24h): HH:MM:SS Datetime ( ISO-8601 ): YYYY-MM-DDTHH:MM:SS.sssZ Valor nulo: \"\" (csv), NULL (Python), NA (R), . ou \"\" (Stata) Propor\u00e7\u00e3o/porcentagem: entre 0-100","title":"Formatos de valores"},{"location":"style_data/#particionamento-de-tabelas","text":"","title":"Particionamento de tabelas"},{"location":"style_data/#o-que-e-particionamento-e-qual-seu-objetivo","text":"De forma resumida, particionar uma tabela \u00e9 dividi-la em v\u00e1rios blocos/partes. O objetivo central \u00e9 diminuir os custos financeiros e aumentar a perfomance, visto que, quanto maior o volume de dados, consequentemente ser\u00e1 maior o custo de armazenamento e consulta. A redu\u00e7\u00e3o de custos e o aumento de perfomance acontece, principalmente, porque a parti\u00e7\u00e3o permite a reorganiza\u00e7\u00e3o do conjunto de dados em pequenos blocos agrupados . Na pr\u00e1tica, realizando o particionamento, \u00e9 poss\u00edvel evitar que uma consulta percorra toda a tabela s\u00f3 para trazer um pequeno recorte de dados. Um exemplo pr\u00e1tico da nossa querida RAIS: Sem utilizar filtro de parti\u00e7\u00e3o: Para esse caso o Bigquery varreu todas (*) as colunas e linhas do conjunto. Vale salientar que esse custo ainda n\u00e3o \u00e9 t\u00e3o grande, visto que a base j\u00e1 foi particionada. Caso esse conjunto n\u00e3o tivesse passado pelo processo de particionamento, essa consulta custaria muito mais dinheiro e tempo, j\u00e1 que se trata de um volume consider\u00e1vel de dados. Com filtro de parti\u00e7\u00e3o: Aqui, filtramos pelas colunas particionadas ano e sigla_uf . Dessa forma, o Bigquery s\u00f3 consulta e retorna os valores da pasta ano e da subpasta sigla_uf .","title":"O que \u00e9 particionamento e qual seu objetivo ?"},{"location":"style_data/#quando-particionar-uma-tabela","text":"A primeira pergunta que surge quando se trata de particionamento \u00e9: a partir de qual quantidade de linhas uma tabela deve ser particionada? A documenta\u00e7\u00e3o do GCP n\u00e3o define uma quantidade x ou y de linhas que deve ser particionada. O ideal \u00e9 que as tabelas sejam particionadas, com poucas exce\u00e7\u00f5es. Por exemplo, tabelas com menos de 10.000 linhas, que n\u00e3o receber\u00e3o mais ingest\u00e3o de dados, n\u00e3o tem um custo de armazenamento e processamento altos e, portanto, n\u00e3o h\u00e1 necessidade de serem particionadas.","title":"Quando particionar uma tabela?"},{"location":"style_data/#como-particionar-uma-tabela","text":"Se os dados est\u00e3o guardados localmente, \u00e9 necess\u00e1rio: Criar as pastas particionadas na sua pasta de /output , na linguagem que voc\u00ea estiver utilizando. Exemplo de uma tabela particionada por ano e mes , utilizando python : for ano in [ * range ( 2005 , 2020 )]: for mes in [ * range ( 1 , 13 )]: particao = output + f 'table_id/ano= { ano } /mes= { mes } ' if not os . path . exists ( particao ): os . makedirs ( particao ) 2. Salvar os arquivos particionados. for ano in [ * range ( 2005 , 2020 )]: for mes in [ * range ( 1 , 13 )]: df_particao = df [ df [ 'ano' ] == ano ] . copy () # O .copy n\u00e3o \u00e9 necess\u00e1rio \u00e9 apenas uma boa pr\u00e1tica df_particao = df_particao [ df_particao [ 'mes' ] == mes ] df_particao . drop ([ 'ano' , 'mes' ], axis = 1 , inplace = True ) # \u00c9 preciso excluir as colunas utilizadas para parti\u00e7\u00e3o particao = output + f 'table_id/ano= { ano } /mes= { mes } /tabela.csv' df_particao . to_csv ( particao , index = False , encoding = 'utf-8' , na_rep = '' ) Exemplos de tabelas particionadas em R : PNADC PAM Exemplo de como particionar uma tabela em SQL : CREATE TABLE ` dataset_id . table_id ` as ( ano INT64 , mes INT64 , col1 STRING , col1 STRING ) PARTITION BY ano , mes OPTIONS ( Description = 'Descri\u00e7\u00e3o da tabela' )","title":"Como particionar uma tabela?"},{"location":"style_data/#regras-importantes-de-particionamento","text":"Os tipos de colunas que o BigQuery aceita como parti\u00e7\u00e3o s\u00e3o: Coluna de unidade de tempo : as tabelas s\u00e3o particionadas com base em uma coluna de TIMESTAMP , DATE ou DATETIME . Tempo de processamento : as tabelas s\u00e3o particionadas com base no carimbo de data/hora quando o BigQuery processa os dados. Intervalo de n\u00fameros inteiros : as tabelas s\u00e3o particionadas com base em uma coluna de n\u00fameros inteiros. Os tipos de colunas que o BigQuery n\u00e3o aceita como parti\u00e7\u00e3o s\u00e3o: BOOL , FLOAT64 , BYTES , etc. O BigQuery aceita no m\u00e1ximo 4.000 parti\u00e7\u00f5es por tabela. Aqui na BD as tabelas geralmente s\u00e3o particionadas por: ano , mes , trimestre e sigla_uf . Note que ao particionar uma tabela \u00e9 preciso excluir a coluna correspondente. Exemplo: \u00e9 preciso excluir a coluna ano ao particionar por ano .","title":"Regras importantes de particionamento."},{"location":"style_data/#numero-de-bases-por-pull-request","text":"Pull requests no Github devem incluir no m\u00e1ximo um conjunto, mas pode incluir mais de uma base. Ou seja, podem envolver uma ou mais tabela dentro do mesmo conjunto.","title":"N\u00famero de bases por pull request"},{"location":"style_data/#dicionarios","text":"Cada base inclui somente um dicion\u00e1rio (que cobre uma ou mais tabelas). Para cada tabela, coluna, e cobertura temporal, cada chave mapeia unicamente um valor. Chaves n\u00e3o podem ter valores nulos. Dicion\u00e1rios devem cobrir todas as chaves dispon\u00edveis nas tabelas originais. Chaves s\u00f3 podem possuir zeros \u00e0 esquerda quando o n\u00famero de d\u00edgitos da vari\u00e1vel tiver significado. Quando a vari\u00e1vel for enum padr\u00e3o, n\u00f3s excluimos os zeros \u00e0 esquerda. Exemplo: mantemos o zero \u00e0 esquerda da vari\u00e1vel br_bd_diretorios_brasil.cbo_2002:cbo_2002 , que tem seis d\u00edgitos, pois o primeiro d\u00edgito 0 significa a categoria ser do grande grupo = \"Membros das for\u00e7as armadas, policiais e bombeiros militares\" . Para outros casos, como por exemplo br_inep_censo_escolar.turma:etapa_ensino , n\u00f3s excluimos os zeros \u00e0 esquerda. Ou seja, mudamos 01 para 1 . Valores s\u00e3o padronizados: sem espa\u00e7os extras, inicial mai\u00fascula e resto min\u00fasculo, etc.","title":"Dicion\u00e1rios"},{"location":"style_data/#como-preencher-os-metadados-da-tabela-dicionario","text":"N\u00e3o preencher o spatial_coverage ( cobertura_espacial ), ou seja, deixar o campo vazio. N\u00e3o preencher o temporal_coverage ( cobertura_temporal ), ou seja, deixar o campo vazio. N\u00e3o preencher o observation_level ( nivel_observacao ), ou seja, deixar o campo vazio.","title":"Como preencher os metadados da tabela dicion\u00e1rio?"},{"location":"style_data/#diretorios","text":"Diret\u00f3rios s\u00e3o as pedras fundamentais da estrutura do nosso datalake . Nossas regras para gerenciar diret\u00f3rios s\u00e3o: Diret\u00f3rios representam entidades do reposit\u00f3rio que tenham chaves prim\u00e1rias (e.g. uf , munic\u00edpio , escola ) e unidades de data-tempo (e.g. data , tempo , dia , mes , ano ). Cada tabela de diret\u00f3rio tem ao menos uma chave prim\u00e1ria com valores \u00fanicos e sem nulos. Exemplos: municipio:id_municipio , uf:sigla_uf . Nomes de vari\u00e1veis com prefixo id_ s\u00e3o reservadas para chaves prim\u00e1rias de entidades. Veja todas as tabelas j\u00e1 dispon\u00edveis aqui.","title":"Diret\u00f3rios"},{"location":"style_data/#como-preencher-os-metadados-das-tabelas-de-diretorio","text":"Preencher o spatial_coverage ( cobertura_espacial ), que \u00e9 a m\u00e1xima unidade espacial que a tabela cobre. Exemplo: sa.br, que significa que o n\u00edvel de agrega\u00e7\u00e3o espacial da tabela \u00e9 o Brasil. N\u00e3o preencher o temporal_coverage ( cobertura_temporal ), ou seja, deixar o campo vazio. Preencher o observation_level ( nivel_observacao ), que consiste no n\u00edvel de observa\u00e7\u00e3o da tabela, ou seja, o que representa cada linha. N\u00e3o preencher o temporal_coverage ( cobertura_temporal ) das colunas da tabela, ou seja, deixar o campo vazio.","title":"Como preencher os metadados das tabelas de diret\u00f3rio?"},{"location":"style_data/#fontes-originais","text":"O campo se refere aos dados na fonte original, que ainda n\u00e3o passaram pela metodologia de tratamento da Base dos Dados, ou seja, nosso _input_ . Ao clicar nele, a ideia \u00e9 redirecionar o usu\u00e1rio para a p\u00e1gina da fonte original dos dados. As regras para gerenciar as Fontes Originais s\u00e3o: Incluir o nome do link externo que leva \u00e0 fonte original. Como padr\u00e3o, esse nome deve ser da organiza\u00e7\u00e3o ou do portal que armazenena os dados. Exemplos: Sinopses Estat\u00edsticas da Educa\u00e7\u00e3o B\u00e1sica: Dados Abertos do Inep , Penn World Tables: Groningen Growth and Development Centre . Preencher os metadados de Fontes Originais: Descri\u00e7\u00e3o, URL, L\u00edngua, Tem Dados Estruturados, Tem uma API, \u00c9 de Gra\u00e7a, Requer Registro, Disponibilidade, Requer IP de Algum Pa\u00eds, Tipo de Licen\u00e7a, Cobertura Temporal, Cobertura Espacial e N\u00edvel da Observa\u00e7\u00e3o.","title":"Fontes Originais"},{"location":"style_data/#pensou-em-melhorias-para-os-padroes-definidos","text":"Abra um issue no nosso Github ou mande uma mensagem no Discord para conversarmos :)","title":"Pensou em melhorias para os padr\u00f5es definidos?"},{"location":"tutorial_cross_tables/","text":"Como cruzar tabelas no datalake Organizamos os dados de forma que o cruzamento de tabelas de diferentes intitui\u00e7\u00f5es e temas seja t\u00e3o simples quanto qualquer outra consulta. Para isso, definimos uma metodologia padr\u00e3o para tratamento dos dados, nomea\u00e7\u00e3o de colunas, tabelas e conjuntos. Como funciona a metolodiga BD+? Alguma frase sobre .... Para saber mais, leia a documenta\u00e7\u00e3o sobre tratamento e arquitetura de dados. Informa\u00e7\u00f5es de diferentes tabelas podem ser agregadas por meiode chaves identificadora . Uma chave identificadora \u00e9 uma coluna cujo nome \u00e9 \u00fanico em todas as tabelas do datalake e \u00e9 utilizada para identificar uma entidade. Exemplo de chave identificadora A coluna ano tem esse mesmo nome em todas as tabelas do datalake - ela sempre se refere a vari\u00e1vel que tem como valor quaisquer anos do nosso calend\u00e1rio. Quando vamos trabalhar com dados de popula\u00e7\u00e3o do IBGE, a coluna ano , junto com a coluna municipio , identificam unicamente cada linha da tabela: N\u00e3o existe mais de uma linha com o mesmo ano e munic\u00edpio; N\u00e3o existe linha com valor nulo de ano ou municipio na tabela; Teste voc\u00ea mesmo(a): as queries abaixo devem retornar vazio! R library ( \"basedosdados\" ) # Busca alguma linha que possui ano e munic\u00edpio repetido query <- \"SELECT ano, municipio, count(*) as total FROM `basedosdados.br_ibge_populacao.municipios` GROUP BY ano, municipio WHERE total > 1\" read_sql ( query = query ) # Busca linhas com ano ou municipio nulos query <- \"SELECT * FROM `basedosdados.br_ibge_populacao.municipios` WHERE ano IS NULL OR municipio IS NULL\" read_sql ( query = query ) Python import basedadosdados as bd # Busca alguma linha que possui ano e munic\u00edpio repetido query = \"\"\"SELECT ano, municipio, count(*) as total FROM `basedosdados.br_ibge_populacao.municipios` GROUP BY ano, municipio WHERE total > 1\"\"\" bd . read_sql ( query = query ) # Busca linhas com ano ou municipio nulos query = \"\"\"SELECT * FROM `basedosdados.br_ibge_populacao.municipios` WHERE ano IS NULL OR municipio IS NULL\"\"\" bd . read_sql ( query = query ) CLI ... Cruzando tabelas com chaves identificadoras A indica\u00e7\u00e3o de um conjunto de colunas como chave identificadora \u00e9 feita direto nos metadados da tabela. Assim, voc\u00ea pode saber quais tabelas podem ser cruzadas comparando o conjunto de chaves identificadoras de cada uma. Abaixo vamos fazer um exemplo de como cruzar as tabelas de popula\u00e7\u00e3o e PIB do IBGE para obter o PIB per capita de todos os munic\u00edpios brasileiros. Nas tabelas de popula\u00e7\u00e3o e PIB, a coluna ano e municipio s\u00e3o chaves identificadoras. Logo usaremos essas colunas na nossa fun\u00e7\u00e3o JOIN para determinar como cruzar as tabelas. R library ( \"basedosdados\" ) set_billing_id ( \"<YOUR_PROJECT_ID>\" ) query <- \"SELECT pib.id_municipio, pop.ano, pib.PIB / pop.populacao as pib_per_capita FROM `basedosdados.br_ibge_pib.municipio` as pib JOIN `basedosdados.br_ibge_populacao.municipio` as pop ON pib.id_municipio = pop.id_municipio AND pib.ano = pop.ano\" # Voc\u00ea pode fazer o download no seu computador dir <- tempdir () data <- download ( query , file.path ( dir , \"pib_per_capita.csv\" )) # Ou carregar o resultado da query no seu ambiente de an\u00e1lise data <- read_sql ( query ) Python import basedosdados as bd pib_per_capita = \"\"\"SELECT pib.id_municipio , pop.ano, pib.PIB / pop.populacao as pib_per_capita FROM `basedosdados.br_ibge_pib.municipio` as pib INNER JOIN `basedosdados.br_ibge_populacao.municipio` as pop ON pib.id_municipio = pop.id_municipio AND pib.ano = pop.ano \"\"\" # Voc\u00ea pode fazer o download no seu computador bd . download ( query = pib_per_capita , savepath = \"where/to/save/file\" , billing_project_id =< YOUR_PROJECT_ID > ) # Ou carregar o resultado da query no pandas df = bd . read_sql ( pib_per_capita , billing_project_id =< YOUR_PROJECT_ID > ) Lista de chaves identificadoras Chaves geogr\u00e1ficas Setor censit\u00e1rio: id_setor_censitario Munic\u00edpio: id_municipio (padr\u00e3o), id_municipio_6 , id_municipio_tse , id_municipio_rf , id_municipio_bcb \u00c1rea M\u00ednima Compar\u00e1vel: id_AMC Regi\u00e3o imediata: id_regiao_imediata Regi\u00e3o intermedi\u00e1ria: id_regiao_intermediaria Microrregi\u00e3o: id_microrregiao Mesorregi\u00e3o: id_mesorregiao Unidade da federa\u00e7\u00e3o (UF): sigla_uf (padr\u00e3o), id_uf , uf Regi\u00e3o: regiao Chaves temporais ano , semestre , mes , semana , dia , hora Chaves de pessoas f\u00edsicas cpf , pis , nis Chaves de pessoas jur\u00eddicas Empresa: cnpj Escola: id_escola Chaves em pol\u00edtica Candidato(a): id_candidato_bd Partido: sigla_partido , partido","title":"Como cruzar tabelas no datalake"},{"location":"tutorial_cross_tables/#como-cruzar-tabelas-no-datalake","text":"Organizamos os dados de forma que o cruzamento de tabelas de diferentes intitui\u00e7\u00f5es e temas seja t\u00e3o simples quanto qualquer outra consulta. Para isso, definimos uma metodologia padr\u00e3o para tratamento dos dados, nomea\u00e7\u00e3o de colunas, tabelas e conjuntos. Como funciona a metolodiga BD+? Alguma frase sobre .... Para saber mais, leia a documenta\u00e7\u00e3o sobre tratamento e arquitetura de dados. Informa\u00e7\u00f5es de diferentes tabelas podem ser agregadas por meiode chaves identificadora . Uma chave identificadora \u00e9 uma coluna cujo nome \u00e9 \u00fanico em todas as tabelas do datalake e \u00e9 utilizada para identificar uma entidade.","title":"Como cruzar tabelas no datalake"},{"location":"tutorial_cross_tables/#exemplo-de-chave-identificadora","text":"A coluna ano tem esse mesmo nome em todas as tabelas do datalake - ela sempre se refere a vari\u00e1vel que tem como valor quaisquer anos do nosso calend\u00e1rio. Quando vamos trabalhar com dados de popula\u00e7\u00e3o do IBGE, a coluna ano , junto com a coluna municipio , identificam unicamente cada linha da tabela: N\u00e3o existe mais de uma linha com o mesmo ano e munic\u00edpio; N\u00e3o existe linha com valor nulo de ano ou municipio na tabela; Teste voc\u00ea mesmo(a): as queries abaixo devem retornar vazio! R library ( \"basedosdados\" ) # Busca alguma linha que possui ano e munic\u00edpio repetido query <- \"SELECT ano, municipio, count(*) as total FROM `basedosdados.br_ibge_populacao.municipios` GROUP BY ano, municipio WHERE total > 1\" read_sql ( query = query ) # Busca linhas com ano ou municipio nulos query <- \"SELECT * FROM `basedosdados.br_ibge_populacao.municipios` WHERE ano IS NULL OR municipio IS NULL\" read_sql ( query = query ) Python import basedadosdados as bd # Busca alguma linha que possui ano e munic\u00edpio repetido query = \"\"\"SELECT ano, municipio, count(*) as total FROM `basedosdados.br_ibge_populacao.municipios` GROUP BY ano, municipio WHERE total > 1\"\"\" bd . read_sql ( query = query ) # Busca linhas com ano ou municipio nulos query = \"\"\"SELECT * FROM `basedosdados.br_ibge_populacao.municipios` WHERE ano IS NULL OR municipio IS NULL\"\"\" bd . read_sql ( query = query ) CLI ...","title":"Exemplo de chave identificadora"},{"location":"tutorial_cross_tables/#cruzando-tabelas-com-chaves-identificadoras","text":"A indica\u00e7\u00e3o de um conjunto de colunas como chave identificadora \u00e9 feita direto nos metadados da tabela. Assim, voc\u00ea pode saber quais tabelas podem ser cruzadas comparando o conjunto de chaves identificadoras de cada uma. Abaixo vamos fazer um exemplo de como cruzar as tabelas de popula\u00e7\u00e3o e PIB do IBGE para obter o PIB per capita de todos os munic\u00edpios brasileiros. Nas tabelas de popula\u00e7\u00e3o e PIB, a coluna ano e municipio s\u00e3o chaves identificadoras. Logo usaremos essas colunas na nossa fun\u00e7\u00e3o JOIN para determinar como cruzar as tabelas. R library ( \"basedosdados\" ) set_billing_id ( \"<YOUR_PROJECT_ID>\" ) query <- \"SELECT pib.id_municipio, pop.ano, pib.PIB / pop.populacao as pib_per_capita FROM `basedosdados.br_ibge_pib.municipio` as pib JOIN `basedosdados.br_ibge_populacao.municipio` as pop ON pib.id_municipio = pop.id_municipio AND pib.ano = pop.ano\" # Voc\u00ea pode fazer o download no seu computador dir <- tempdir () data <- download ( query , file.path ( dir , \"pib_per_capita.csv\" )) # Ou carregar o resultado da query no seu ambiente de an\u00e1lise data <- read_sql ( query ) Python import basedosdados as bd pib_per_capita = \"\"\"SELECT pib.id_municipio , pop.ano, pib.PIB / pop.populacao as pib_per_capita FROM `basedosdados.br_ibge_pib.municipio` as pib INNER JOIN `basedosdados.br_ibge_populacao.municipio` as pop ON pib.id_municipio = pop.id_municipio AND pib.ano = pop.ano \"\"\" # Voc\u00ea pode fazer o download no seu computador bd . download ( query = pib_per_capita , savepath = \"where/to/save/file\" , billing_project_id =< YOUR_PROJECT_ID > ) # Ou carregar o resultado da query no pandas df = bd . read_sql ( pib_per_capita , billing_project_id =< YOUR_PROJECT_ID > )","title":"Cruzando tabelas com chaves identificadoras"},{"location":"tutorial_cross_tables/#lista-de-chaves-identificadoras","text":"","title":"Lista de chaves identificadoras"},{"location":"tutorial_cross_tables/#chaves-geograficas","text":"Setor censit\u00e1rio: id_setor_censitario Munic\u00edpio: id_municipio (padr\u00e3o), id_municipio_6 , id_municipio_tse , id_municipio_rf , id_municipio_bcb \u00c1rea M\u00ednima Compar\u00e1vel: id_AMC Regi\u00e3o imediata: id_regiao_imediata Regi\u00e3o intermedi\u00e1ria: id_regiao_intermediaria Microrregi\u00e3o: id_microrregiao Mesorregi\u00e3o: id_mesorregiao Unidade da federa\u00e7\u00e3o (UF): sigla_uf (padr\u00e3o), id_uf , uf Regi\u00e3o: regiao","title":"Chaves geogr\u00e1ficas"},{"location":"tutorial_cross_tables/#chaves-temporais","text":"ano , semestre , mes , semana , dia , hora","title":"Chaves temporais"},{"location":"tutorial_cross_tables/#chaves-de-pessoas-fisicas","text":"cpf , pis , nis","title":"Chaves de pessoas f\u00edsicas"},{"location":"tutorial_cross_tables/#chaves-de-pessoas-juridicas","text":"Empresa: cnpj Escola: id_escola","title":"Chaves de pessoas jur\u00eddicas"},{"location":"tutorial_cross_tables/#chaves-em-politica","text":"Candidato(a): id_candidato_bd Partido: sigla_partido , partido","title":"Chaves em pol\u00edtica"}]}